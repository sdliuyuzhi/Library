{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Congress knowledge base. Please, meet main roles in future web. cyb: - nick. a friendly software robot who helps you explore universes cyber: - noun. a superintelligent network computer for answers - verb. to do something intelligent, to be very smart cyber:// - web3 protocol for computing answers and knowledge exchange CYB: - ticker. transferable token expressing a will to become smarter CYBER: - ticker. non-transferable token measuring intelligence CBD: - ticker. ERC-20 proto token representing substance from which CYB emerge cyberlink: - link type. expressing connection from one link to another as link-x.link-y Right now these docs cover three open source projects: cyb - pure web3 browser cyb.ai chaingear - the consensus computer driven database framework chaingear.io cyberd - knowledge consensus computer in Go cyberd.ai congress - community of scientists, developers, engineers and craftsmen cybercongress.ai","title":"congress"},{"location":"contribute/","text":"Current wiki is built on top of mkdocs.org engine with Material for MkDocs extensions pack. Required Installations \u00b6 https://hub.docker.com/r/squidfunk/mkdocs-material/ Commands Cheat Sheet \u00b6 docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Contributing"},{"location":"contribute/#required-installations","text":"https://hub.docker.com/r/squidfunk/mkdocs-material/","title":"Required Installations"},{"location":"contribute/#commands-cheat-sheet","text":"docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy","title":"Commands Cheat Sheet"},{"location":"contribute/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"blog/blog/","text":"Welcome to cyber\u2022Congress Blog \u00b6 Here you can find: weekly developments reports announcement tech articles by our teammates research and expertise","title":"Welcome to cyber\u2022Congress Blog"},{"location":"blog/blog/#welcome-to-cybercongress-blog","text":"Here you can find: weekly developments reports announcement tech articles by our teammates research and expertise","title":"Welcome to cyber\u2022Congress Blog"},{"location":"blog/CYB_and_CBD_distribition/distribution/","text":"A note about CBD and CYB Distribution \u00b6 This note should be perceived, as context, upon reading euler release notes . The main purpose of this note - is to explain the logic behind our decisions, on the distribution of CBD and CYB, and prove to you that the decisions we made, have a sensible balance of risk, taking into account the possibilities of the project. We wish to be as transparent and as honest as possible, with our community. Because of this, some of the revealed information may seem strange and unaccustomed to you. We fully understand this, please be so kind in understanding us in return. One \u00b6 The first important moment is that even though PoS is so fucking ecologically effective, it does put project creators in a very uncomfortable situation in approaching initial token distribution. This means that the network cannot simply take and receive bonds from validators as if those tokens just suddenly appeared out of nowhere. In PoW, things are simple. You burn some electricity - you create tokens. With PoS, the legend is still filled with mist, as to how tokens are created :-) And on that thought, it is obvious that the initial distribution must be proven with PoW. This is with consideration to the difficult times of today, when any fool is able to make an ASIC. Of course, one can create or use something like ProgPOW or Ethash, with tons of clever parameters. But those won't last you for long. So, if you really believe that PoW will get us to the point where all our trees are eaten by caterpillars , then you aren't really left with many choices for making a distribution that won't harm your project. Looking at the bigger picture, there are only two proven ways of doing so: Drop 'em \u00b6 This is a great way to prove that users are using what you have created. A drop is the most effective, and up to date way of attracting users. Drops of BTC attract billions of dollars if 100% tokens of a new system has been dropped. But, those are only possible if you do not need to invest in the code base. If your project is written from scratch, because, it indeed, offers something new, then the project must have both - money and developers. This is simply because developers eat only money indeed. Collecting dough \u00b6 A very effective way of \"feeding\" devs with money, is to feed them the money that the investors have brought to the table. But out of those that send you that money, there will always be those, that aren't the \"happy bunch\", and the project will have to live with it. Bitcoin, for example, didn't have this negativity, as it simply couldn't have had it. If one single person doesn't have the money for covering the projects costs (meanwhile only Satoshi and the guys from Grin have managed to pull this off), then you are put with the necessity of taking money, either from those you trust, or from everyone. Attracting money from everyone is always a risk for the project. Especially now, when the regulators don't give a fuck for basic logic. This is why, private investments from people you trust are the way forward, especially if the project can do it quickly and effectively. This is the way we will move go by in order to fund our project and to bring it up to stable mode. Also, this will allow us to focus more on development, as the resources burned on investor relations are always fierce. Two \u00b6 The second important moment is that the distribution must always solve an issue. In its essence, any proven distribution is a mix between different capitals, that brings us to the current state of the system (whether successful or not). Simply understanding who and how receives your token can mean a lot, if not basically everything :-) Our project has (almost) the classical problem of the egg, the dragon, and money. What we need to do, is to make a connection between developers and normal crypto users, in such a way, where those who have the capital are also willing to help. This means, that we achieve a state where the capital, simultaneously, has to be in the hands of the \"average\" user and in the hands of those, who have contributed that capital. And of course, most importantly, in the hands of the developers. For Developers \u00b6 This brings us to the understanding that part of the distribution has to be distributed to developers. In our case, most of the code was written by ourselves, this means that we have either already received a substantial part of the allocation, or will receive it, upon completing the development. Another substantial part of what is allocated to the developers will be used for useful experimenting. Tokens will be allocated to three (for the time being) experiments in the field of network swarming: Gitcoin, Aragon and Colony. Three \u00b6 The third part of the story is that we still have to find a balance between the market depth (the investors) and between the engineering thought (the developers). Because, if this is not done, then the developers will simply fork you out, and of course, this is not good for the investors. Because in an organic ecosystem (like Ethereum), the investors religiously believe in the developers, and it looks as synergic as it can get. If it will be the other way around - where the developers believe religiously in the investor's - nothing will ever get done, it just won't fucking work. We have decided to go in the direction where the money and the code are of equal value. Both groups get 15% of the distribution (each). And the users get the other 70% of CBD tokens. The main purpose of this note - is to show the potential contributors that the existing valuation has been formed upon actual and valid contributions. This also means, that in the future, there won't be a situation where one type of actor gets their tokens for a lesser value than was formed during the Genesis contribution. The truth is that we want to get rid of the distribution question, as quickly as possible. But, the project needs a throughout initial capital structure, both in economical and in human terms. This is in order for the project to become something meaningful and worthwhile, and to be able to compete with the giants out there. Summing up the distribution of CBD tokens \u00b6 Proof of code: 15% for those who write code Proof of dough: 15% for those who contribute the dough Proof of use: 70% for at least 1 million of (at least) Ethereum users At the time of Genesis of the mainnet, the owners of CBD tokens will get the lion's share of CYB tokens. This is with the exception to the inflation, that is allocated to validators of the mainnet, which will be in between 3% to 10%, depending on when the network is launched. Utility testnet \u00b6 It is important to understand the difference between an average blockchain testnet and our euler testnet! Our testnet can be utilized and can be used for searching already! The links will be persistent from testnet to testnet! Because of this - it can hold 1% of monetary value within itself. By this we are solving a rather difficult issue, which is related to the delivery of complicated and productive networks and smart contract systems. Usually, those can develop for years. This is why we have decided to build our rocket during real flight time. On one hand, we already have something to show. Something that is working already! And we want people to use it. Also our ranking system is based on pure economics, so we can conclude nothing from running zero value testnet. On the other hand, because the code is still young, monetary issues can arise. This is why we have decided to find a compromise, in the light of using CBD - an Ethereum based token, and CYB - the mainnet token. Proof-of-value: 15% \u00b6 Those who donated dough can be roughly divided into 2 groups: The first group is the dough that will go to cyberCongress: - The Genesis team round: 4.1592% - has already been done in the beginning of 2018. It is valued at 30k ETH. There was no software prior to this. It is worth noting here, that all further valuations of the project, from the moment it was conceived, were based on the fact, that for two years the project was solely being donated by the guys from the cyberCongress team: that is - 110.2 BTC + 380 ETH. 4.1592% of the CBD distribution was allocated to the team for the above contributions. A winter round of donations from friends: will vary at between 2.1153% to 4.1153%. This round is actually in progress right now. The second group, is the dough that will go to cyberFoundation: Between 6.7255% to 8.7255%, depending on the volumes of the donations during the winter round. This is an Aragon organization that will generate its capital through a public auction from the CBD tokens that has been allocated to them. The auction will be similar to that of EOS, with the only difference, that the collected dough will not go to cyberCongress, but, will be under the control of the community itself, i.e. of the DAO. Taking into account the fact that this, is in essence, the only opportunity for validators to purchase tokens in big amounts, I presume the auction can collect at least 10k ETH over the next one and a half years. Proof-of-code: 15% \u00b6 Those who have contributed code can be roughly divided into 3 groups: Congress and inventors (developers): 8.4% The team: 3.8% A wider community of contributors: 2.8% One can say, that the logic was as follows: the team calculated the valuation of its options, based on the amount of personal investment and reasonable goals. Congress: 8.4% in actual money, estimated at 10M / 3 people / 30 months = ~10k 10M / 3 people / 30 months = ~10k per person, per month, into one hand, according to current estimates The team: 3.8% in actual money, estimated at $10M / 9 people / 18 months = ~ 1.8k $ per person, per month, into one hand, according to current estimates Contributors: This category will include things like bounties for simple translation work, and also bounties for more serious work, such as: protocol implementation in alternative programming languages, security bounty, and so on. About half of this sum will be distributed via Gitcoin, under the control of the Congress. The second half is going to be allocated towards the creation of cyberColony . Since some members of the Congress will also be the founders of cyberColony, there should be no risk of cheap token leakage, but of course, those may arise. Proof-of-use: 70% \u00b6 The details of the distribution can be found in the release notes, but a lion's share of the distribution, 70% - to be precise, will go towards the drop. We have six more attempts to optimize the drop. Each further attempt should be more efficient than the previous one. We will try to apply some scientific methods in between the drops in order to optimize them. As a result, over the horizon of between one to two years, we hope to achieve the highest possible effective distribution, for the users who were most helpful in the space of cybernomics. Individual addresses will be allocated between %0.0003 and %0.000003, this is equal to between 30 dollars and 0.3 dollars when evaluating at $10M. I assume that these numbers are reasonable, in order not to expect any mass dumping of tokens by the users. Nevertheless, I expect that the current configuration of the distribution is able to generate demand in order to compensate for the supply, even for as much as, one hundred thousand users. The fact is, based upon experience in other networks, the validator market will strive for 60% of the supply. Provided that the tokens can be bought or earned in a number of ways, just for 30% of the total supply - there will be roughly 30% demand, which can only be obtained from different users. In reality, most validators will only have access to the stake which forms cyberFoundation, this is equal to round about 8%, which in turn, will build an even stronger demand for the token, during its early stages from the validators themselves. We should also not cross out the users who will see value in the token. The purpose of approaching distribution is this way - is to give Ethereum's active users the minimum possible bandwidth. This is done in order to value the advantages of distributed search. It is unlikely that any of the addresses that received a drop will have enough tokens to become a validator, the only way for this to occur is during the very beginning of the life of the network, when the market of validators has not yet formed any competition. After Genesis \u00b6 Towards the Genesis, the phase at which you can prove something to someone, will come to an end. Meaning - that with code, money or by use, you won't be able to prove anything to anyone anymore :-) After Genesis, the network will move onto a stage, where new tokens will only be generated by the validators. From this moment on, the validators will receive a fixed amount of token per block: 1 000 000 000 CYB. This will be the base consensus for the monetary policy. The reason for choosing an inflationary system, was because we believe that the transactional margin has to flow to those who fulfil the most important task. Our knowledge graph will not be possible to calculate without the validators. This means, that if we wish to use the network's bandwidth for eternity, we have to guarantee the validators a life long cover of their costs from a fixed level of never-ending inflation. The longer the system exists, the less value will the relative inflation have. So why do we have two tokens after all? \u00b6 Technically we could have not had an ERC-20 token, nevertheless, there was a whole bunch of reasons found, why we do need it. ERC-20 tokens are good for accounting options for the team and for vendors until the network is 100% productive The process making CYB token liquid is a long one. Some steps taken before the launch of the network can help the project develop We have other side projects that can help us to make the token of this project stronger, for example: cyberAcademia and Chaingear We want to actively develop the community on Gitcoin, but doing so with tokens from an outside network - is impossible. We need an ERC-20 token in order to have more non-fiat stimulus for the contributors. We love Ethereum and we want to live in it :-) Aragon is finally working, so it is \"a must\", to try out the Aragon organizations Forming an Ethereum based community on the basis of CBD tokens, to which part of the CYB tokens is allocated, in such a way - where 100% of the money is controlled by the community itself, looks too tempting in order not to give it a try. This is because we must try and have another go at repeating the DAO's success. As a result we ended up with CBD tokens, which are a kind of a community token on the Ethereum network already, it can already grant you different super skills and give you different artifacts. We see our Ethereum based tokens as a side effect of organising the process, rather then our main super power. Our main super power is - of course, the CYB token, because they are the once that give you the possibility of validating and ranking. But we do not plan on throwing CBD out after the launch of the mainnet. It is a cool thing that can have many uses and help us to do achieve many cool things. Long term perspective \u00b6 The starting distribution might seem a bit more complicated in comparison to a Satoshi-style one. But, it solves the current tasks of the project - that of the egg, the dragon, and the dough. After the activation of the merkle network, the structure of the distribution becomes rather simple and validator orientated. The main task of the model will be providing the computing consensus with the needed resources for the actualization of the publicly available knowledge graph. Whilst developing this distribution, we were trying to keep in mind the following things: balance of risks for the projets participants financing the project at the needed level and no more ensuring long term incentives to the capital structure The model illustrated above assumes, that the project will achieve the merkle stage on block 50 000 000. Based upon this scenario, initial investors and developers share, will be equal to ~13.4% after 10 years and only to ~5.7% after 30 years. \u0417\u0430\u043c\u0435\u0442\u043a\u0430 \u043a \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 CBD \u0438 CYB \u00b6 \u042d\u0442\u0443 \u0437\u0430\u043c\u0435\u0442\u043a\u0443 \u0441\u0442\u043e\u0438\u0442 \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u043f\u0440\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u0437\u0430\u043c\u0435\u0442\u043e\u043a \u043a \u0440\u0435\u043b\u0438\u0437\u0443 euler . \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u0437\u0430\u043c\u0435\u0442\u043a\u0438 - \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u043d\u0430\u0448\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0435\u0439 CBD \u0438 CYB \u0438 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0430\u043c, \u0447\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u0440\u0438\u043d\u044f\u043b\u0438 \u043d\u0435\u0441\u0443\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 \u0440\u0438\u0441\u043a\u043e\u0432 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0446\u0435\u043b\u0435\u0439 \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041c\u044b \u0445\u043e\u0442\u0438\u043c \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u044b\u043c\u0438 \u0438 \u0447\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0441\u043a\u0440\u044b\u0442\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0412\u0430\u043c \u043d\u0435\u043f\u0440\u0438\u0432\u044b\u0447\u043d\u043e\u0439. \u041c\u044b \u044d\u0442\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u043c, \u043f\u043e\u0439\u043c\u0438\u0442\u0435 \u0438 \u0412\u044b \u043d\u0430\u0441. \u0420\u0430\u0437 \u00b6 \u041f\u0435\u0440\u0432\u044b\u0439 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u044d\u0442\u043e \u0442\u043e, \u0447\u0442\u043e PoS \u0431\u0443\u0434\u0443\u0447\u0438 \u0430\u0445\u0443\u0435\u043d\u043d\u043e \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0441\u0442\u0430\u0432\u0438\u0442 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u0435\u043c \u0434\u044e\u0436\u0443\u044e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0435\u0439. \u0422.\u0435. \u0441\u0435\u0442\u044c \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0437\u044f\u0442\u044c \u0442\u0430\u043a \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043d\u0434\u044b \u043e\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432, \u0435\u0441\u043b\u0438 \u044d\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u044b \u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043e\u0442\u043a\u0443\u0434\u0430-\u0442\u043e \u0443 \u043d\u0438\u0445 \u043d\u0435 \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c. \u0412 PoW \u0432\u0441\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e. \u0421\u043f\u0430\u043b\u0438\u043b \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u0442\u0432\u0430 - \u0441\u043e\u0437\u0434\u0430\u043b\u0438\u0441\u044c \u0442\u043e\u043a\u0435\u043d\u044b. \u0410 \u0432\u043e \u0432\u0441\u044f\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 PoS \u043b\u0435\u0433\u0435\u043d\u0434\u0430 \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043a\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u044d\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u044b \u043f\u043e\u044f\u0432\u044f\u0442\u0441\u044f :-) \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0434\u043e\u043a\u0430\u0437\u0443\u0435\u043c\u0430\u044f \u043a\u0430\u043a PoW. \u0421\u0435\u0439\u0447\u0430\u0441 \u0435\u0449\u0435 \u0432\u0440\u0435\u043c\u044f \u0442\u0430\u043a\u043e\u0435, \u0447\u0442\u043e \u0430\u0441\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u043b\u044e\u0431\u043e\u0439 \u0434\u0443\u0440\u0430\u043a \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c. \u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0438 \u0438\u0437\u043e\u0431\u0440\u0435\u0441\u0442\u0438 ProgPOW \u0438\u043b\u0438 Ethash \u0441 \u0445\u0438\u0442\u0440\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043d\u043e \u043d\u0430\u0434\u043e\u043b\u0433\u043e \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u0442. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0441\u043b\u0438 \u0442\u044b \u0443\u0431\u0435\u0436\u0434\u0435\u043d \u0447\u0442\u043e PoW \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u0434\u0435\u0440\u0435\u0432\u044c\u044f \u0441\u044c\u0435\u0434\u0430\u044e\u0442 \u0433\u0443\u0441\u0435\u043d\u0446\u044b , \u0442\u043e \u0442\u043e\u0433\u0434\u0430 \u0443 \u0442\u0435\u0431\u044f \u0435\u0441\u0442\u044c \u043d\u0435 \u0442\u0430\u043a \u0443\u0436 \u0438 \u043c\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044e \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u043f\u0440\u0438\u0431\u044c\u0435\u0442 \u0442\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442. \u041f\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u043c\u0443 \u0441\u0447\u0435\u0442\u0443 \u0435\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0430 \u0434\u043e\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430: \u0414\u0440\u043e\u043f\u043d\u0443\u0442\u044c \u00b6 \u0425\u043e\u0440\u043e\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0447\u0442\u043e \u044e\u0437\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0442\u043e, \u0447\u0442\u043e \u0442\u044b \u0441\u0434\u0435\u043b\u0430\u043b. \u0414\u0440\u043e\u043f \u044d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u0438\u0432\u043b\u0435\u0447\u044c \u044e\u0437\u0435\u0440\u043e\u0432. \u0414\u0440\u043e\u043f\u044b \u0431\u0438\u0442\u043a\u043e\u0438\u043d\u0430 \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u044e\u0442 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u044b \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 100%-\u043d\u044b. \u041d\u043e \u0441\u0442\u043e\u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u044b\u0435 \u0434\u0440\u043e\u043f\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u043e\u0434\u043e\u0432\u0443\u044e \u0431\u0430\u0437\u0443. \u0415\u0441\u043b\u0438 \u0436\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0441 \u043d\u0443\u043b\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0435\u043c-\u0442\u043e \u043f\u0440\u0438\u043d\u0438\u0446\u0438\u043f\u0438\u0430\u043b\u044c\u043d\u043e \u043d\u043e\u0432\u044b\u043c, \u0442\u043e \u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0438 \u0434\u0435\u043d\u044c\u0433\u0438 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438, \u043f\u043e\u0442\u043e\u043c\u0443-\u0447\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0447\u0438\u043a\u0438 \u043f\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438. C\u043e\u0431\u0440\u0430\u0442\u044c \u0431\u0430\u0431\u043b\u043e \u00b6 \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u043a\u043e\u0440\u043c\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0432 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u044d\u0442\u043e \u043d\u0430\u043a\u043e\u0440\u043c\u0438\u0442\u044c \u0438\u0445 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432. \u041d\u043e \u0438\u0437 \u0442\u0435\u0445 \u043a\u0442\u043e \u043f\u0440\u0438\u0441\u043b\u0430\u043b \u0431\u0430\u0431\u043b\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0443\u0442 \u043d\u0435\u0434\u043e\u0432\u043e\u043b\u044c\u043d\u044b\u0435 c \u0447\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0436\u0438\u0442\u044c. \u0423 \u0411\u0438\u0442\u043a\u043e\u0438\u043d\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u0430, \u043f\u043e\u0442\u043e\u043c\u0443 \u043a\u0430\u043a \u043d\u0435 \u043c\u043e\u0433\u043b\u043e \u0431\u044b\u0442\u044c. \u0415\u0441\u043b\u0438 \u0443 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432\u0437\u044f\u0442\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u043d\u0435\u0442\u0443 \u0434\u0435\u043d\u0435\u0433, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u0432\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442 (\u0430 \u043f\u043e\u043a\u0430-\u0447\u0442\u043e \u0442\u0430\u043a \u0443\u043c\u0443\u0434\u0440\u0438\u043b\u0438\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0421\u0430\u0442\u043e\u0448\u0438 \u0438 \u0440\u0435\u0431\u044f\u0442\u0430 \u0438\u0437 \u0413\u0440\u0438\u043d), \u0442\u043e\u0433\u0434\u0430 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0431\u0430\u0431\u043b\u043e \u043b\u0438\u0431\u043e \u043e\u0442 \u043b\u044e\u0434\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0442\u044b \u0434\u043e\u0432\u0435\u0440\u044f\u0435\u0448\u044c, \u043b\u0438\u0431\u043e \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0440\u044f\u0434. \u041f\u0440\u0438\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u043d\u0435\u0433 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0440\u044f\u0434 \u0432\u0441\u0435\u0433\u0434\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0438\u0441\u043a\u043e\u043c \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0447\u0442\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0442\u043e\u0440\u0430\u043c \u0441\u0442\u0430\u043b\u043e \u043f\u043e\u0445\u0443\u0439 \u043d\u0430 \u0437\u0434\u0440\u0430\u0432\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0435 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u043e\u0442 \u043b\u044e\u0434\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0442\u044b \u0434\u043e\u0432\u0435\u0440\u044f\u0435\u0448\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u044b\u043c \u0432\u044b\u0445\u043e\u0434\u043e\u043c \u0432 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0444\u0430\u043d\u0434\u0438\u043d\u0433 \u043d\u0430 \u0434\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u044b \u0442\u0430\u043a \u0438 \u043f\u043e\u0441\u0443\u043f\u0438\u043c. \u041a \u0442\u043e\u043c\u0443 \u0436\u0435 \u044d\u0442\u043e \u043d\u0430\u043c \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0444\u043e\u043a\u0443\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435, \u0442.\u043a. \u043b\u044e\u0431\u044b\u0435 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u044d\u0442\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u043b\u044e\u0442\u044b\u0435 \u044d\u043d\u0435\u0440\u0433\u043e\u0437\u0430\u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u0430\u043c\u0438. \u0414\u0432\u0430 \u00b6 \u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0436\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u044d\u0442\u043e \u0442\u043e, \u0447\u0442\u043e \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044f \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0443. \u041f\u043e \u0441\u0443\u0442\u0438 \u0432\u0441\u044f\u043a\u0430\u044f \u0434\u043e\u043a\u0430\u0437\u0443\u0435\u043c\u0430\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044f \u044d\u0442\u043e \u043c\u0438\u043a\u0441 \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 (\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c\u0443 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u041e\u0442 \u0442\u043e\u0433\u043e \u0443 \u043a\u043e\u0433\u043e \u0438 \u043a\u0430\u043a \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d \u0437\u043d\u0430\u0447\u0438\u0442 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0441\u0451 :-) \u0423 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0435\u0441\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u044f\u0438\u0446\u0430, \u0434\u0440\u0430\u043a\u043e\u043d\u0430 \u0438 \u0431\u0430\u0431\u043b\u0430. \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0441 \u043e\u0431\u044b\u043a\u043d\u043e\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0434\u0430 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u043e\u0438\u043c\u0443\u0449\u0438\u0435 \u0442\u043e\u0436\u0435 \u043c\u043e\u0433\u043b\u0438 \u043f\u043e\u043c\u043e\u0447\u044c. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u043f\u0438\u0442\u0430\u043b \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u0438 \u0443 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0438 \u0443 \u0442\u0435\u0445 \u043a\u0442\u043e \u0437\u0430\u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0438\u043b \u043a\u0430\u043f\u0438\u0442\u0430\u043b, \u0438 \u0441\u0430\u043c\u043e\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u0443 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432. \u0420\u0430\u0437\u0440\u0430\u0431\u0430\u043c \u00b6 \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0447\u0430\u0441\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0432\u0441\u0435 \u0442\u0430\u043a\u0438 \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u0441\u043f\u0438\u043b\u0438\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u043c\u0438. \u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043a\u043e\u0434\u0430 \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438 \u0441\u0430\u043c\u0438, \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0430\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0438 \u043b\u0438\u0431\u043e \u0443\u0436\u0435 \u0437\u0430\u0431\u0440\u0430\u043b\u0438 \u0441\u0435\u0431\u0435, \u043b\u0438\u0431\u043e \u043e\u0442\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0435 \u0434\u043e\u043f\u0438\u0448\u0435\u043c. \u0410 \u0435\u0449\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0438\u0437 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0434\u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u043c \u043f\u043e\u0439\u0434\u0435\u0442 \u043d\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b. \u0422\u043e\u043a\u0435\u043d\u044b \u0434\u043e\u0441\u0442\u0430\u043d\u0443\u0442\u0441\u044f \u0442\u0440\u0435\u043c (\u043f\u043e\u043a\u0430) \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043c \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0441\u0432\u0430\u0440\u043c\u043e\u0432: Gitcoin, Aragon \u0438 Colony. \u0422\u0440\u0438 \u00b6 \u0410 \u0442\u0440\u0435\u0442\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0435\u0449\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0431\u0430\u043b\u0430\u043d\u0441 \u0432 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0430\u043a\u0430\u043d\u043e\u043c (\u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u0430\u043c\u0438) \u0438 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u043e\u0439 \u043c\u044b\u0441\u043b\u044c\u044e (\u0434\u0435\u0432\u0435\u043e\u043b\u043e\u043f\u0435\u0440\u0430\u043c\u0438). \u041f\u043e\u0442\u043e\u043c\u0443 \u043a\u0430\u043a \u0435\u0441\u043b\u0438 \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u043e \u0434\u0435\u0432\u0435\u043b\u043e\u043f\u0435\u0440\u044b \u043e\u043a\u0430\u0436\u0443\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043a\u0435, \u0447\u0442\u043e \u043f\u043b\u043e\u0445\u043e \u0434\u043b\u044f \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432, \u0442.\u043a. \u0432 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u043e\u0440\u0433\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u0442\u0430\u043a\u043e\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u043a \u044d\u0444\u0438\u0440, \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u044b \u0440\u0435\u043b\u0438\u0433\u0438\u043e\u0437\u043d\u043e \u0432\u0435\u0440\u044f\u0442 \u0432 \u0434\u0435\u0432\u0435\u043b\u043e\u043f\u0435\u0440\u043e\u0432 \u0447\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0438\u043d\u0435\u0440\u0433\u0438\u0447\u043d\u043e. \u0415\u0441\u043b\u0438 \u0434\u0435\u0432\u0435\u043b\u043e\u043f\u0435\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0435\u043b\u0438\u0433\u0438\u043e\u0437\u043d\u043e \u0432\u0435\u0440\u0438\u0442\u044c \u0432 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432, \u0442\u043e \u043d\u0438\u0445\u0443\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442. \u041c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043f\u043e\u0439\u0442\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0430\u0431\u043b\u043e \u0438 \u043a\u043e\u0434 \u0440\u0430\u0432\u043d\u043e\u0446\u0435\u043d\u043d\u044b \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u043f\u043e 15% \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438, \u0430 \u044e\u0437\u0435\u0440\u0430\u043c \u0443\u0445\u043e\u0434\u0438\u0442 70% CBD \u0442\u043e\u043a\u0435\u043d\u043e\u0432. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u044d\u0442\u043e\u0439 \u0437\u0430\u043c\u0435\u0442\u043a\u0438 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0435\u0440\u0430\u043c, \u0447\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0439, \u0438 \u0447\u0442\u043e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u043f\u0440\u0438 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439 \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0442\u043e\u043a\u0435\u043d\u044b \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 \u043d\u0438\u0436\u0435, \u0447\u0435\u043c \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0413\u0435\u043d\u0435\u0437\u0438\u0441 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438. \u041f\u0440\u0430\u0432\u0434\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043c\u044b \u043f\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0445\u043e\u0442\u0438\u043c \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0434\u0438\u0441\u0442\u0440\u0438\u044c\u0431\u044c\u044e\u0446\u0438\u0435\u0439, \u043d\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u043c\u0443\u0434\u0440\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u0430, \u043a\u0430\u043a \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e, \u0442\u0430\u043a \u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u0432\u043e \u0447\u0442\u043e-\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438 \u043c\u043e\u0447\u044c \u043a\u043e\u043d\u043a\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u0433\u0438\u0433\u0430\u043d\u0442\u0430\u043c\u0438. \u0418\u0442\u043e\u0433\u043e \u043f\u0440\u043e \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044e \u0442\u043e\u043a\u0435\u043d\u043e\u0432 CBD \u00b6 \u041f\u0440\u0443\u0444 \u043a\u043e\u0434\u0430: 15% \u0434\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u043f\u0438\u0448\u0435\u0442 \u043a\u043e\u0434 \u041f\u0440\u0443\u0444 \u0431\u0430\u0431\u043b\u0430: 15% \u0434\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u0434\u043e\u043d\u0430\u0442\u0438\u0442 \u0431\u0430\u0431\u043b\u043e \u041f\u0440\u0443\u0444 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: 70% \u0434\u043b\u044f \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u044e\u0437\u0435\u0440\u043e\u0432 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u042d\u0444\u0438\u0440\u0430 \u041d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0413\u0435\u043d\u0435\u0437\u0438\u0441\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b CBD \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0430\u0442 \u043b\u044c\u0432\u0438\u043d\u0443 \u0434\u043e\u043b\u044e CYB, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u0438 \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442 \u043e\u0442 3% \u0434\u043e 10% \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u043a\u043e\u0433\u0434\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0435\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043d\u0435\u0442 \u00b6 \u041e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c \u0432 \u0447\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0431\u044b\u0447\u043d\u044b\u043c \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d \u0442\u0435\u0441\u0442\u043d\u0435\u0442\u043e\u043c \u0438 \u043d\u0430\u0448\u0438\u043c \u0442\u0435\u0441\u0442\u043d\u0435\u0442\u043e\u043c euler! \u041d\u0430\u0448 \u0442\u0435\u0441\u0442\u043d\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u0447\u0430\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441! \u0421\u0441\u044b\u043b\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b \u043e\u0442 \u0442\u0435\u0441\u0442\u043d\u0435\u0442\u0430 \u043a \u0442\u0435\u0441\u0442\u043d\u0435\u0442\u0443! \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u0435 1% \u043c\u043e\u043d\u0435\u0442\u0430\u0440\u043d\u043e\u0439 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0422.\u043e. \u043c\u044b \u0440\u0435\u0448\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u0443\u044e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0443\u044e \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439 \u0438 \u0441\u0438\u0441\u0442\u0435\u043c \u0441\u043c\u0430\u0440\u0442\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432. \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0433\u043e\u0434\u0430\u043c\u0438. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0440\u0430\u043a\u0435\u0442\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043b\u0435\u0442\u0430. \u0421 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0443\u0436\u0435 \u0447\u0442\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c. \u0427\u0442\u043e-\u0442\u043e \u0447\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442! \u0418 \u043d\u0430\u043c \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u0438\u043c \u043d\u0430\u0447\u0430\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u0421 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0432\u043b\u0435\u0447\u0435\u043d\u044b \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u043d\u0435\u0442\u0430\u0440\u043d\u044b\u0435 \u0440\u0438\u0441\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u043a\u043e\u0434 \u0435\u0449\u0435 \u043c\u043e\u043b\u043e\u0434. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0438\u0441 \u0432 \u0432\u0438\u0434\u0435 \u044d\u0444\u0438\u0440 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 CBD \u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 CYB. Proof-of-value: 15% \u00b6 \u0422\u0435 \u043a\u0442\u043e \u0437\u0430\u0434\u043e\u043d\u0430\u0442\u0438\u043b \u0431\u0430\u0431\u043b\u043e \u0433\u0440\u0443\u0431\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 2 \u0433\u0440\u0443\u043f\u043f\u044b: \u041f\u0435\u0440\u0432\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u044d\u0442\u043e \u0431\u0430\u0431\u043b\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0439\u0434\u0435\u0442 \u0432 \u043a\u0438\u0431\u0435\u0440\u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441: - Gensis \u0440\u0430\u0443\u043d\u0434 \u043e\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: 4.1592% - \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043b\u0438. \u041e\u0446\u0435\u043d\u043a\u0430 30k ETH. \u041d\u0435 \u0431\u044b\u043b\u043e \u0441\u043e\u0444\u0442\u0430. \u0422\u0443\u0442 \u0441\u0442\u043e\u0438\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0447\u0442\u043e \u0432\u0441\u0435 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 \u0432\u0437\u044f\u043b\u0438\u0441\u044c \u0438\u0437 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0432\u043e\u0435\u0433\u043e \u0437\u0430\u0447\u0430\u0442\u0438\u044f, \u0434\u0432\u0430 \u0433\u043e\u0434\u0430 \u0434\u043e\u043d\u043e\u0440\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u044f\u0432\u043b\u044f\u043b\u0438\u0441\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u0431\u044f\u0442\u0430 \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u0438\u0431\u0435\u0440\u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441\u0430: 110.2 BTC + 380 ETH. \u0417\u0430 \u044d\u0442\u0438 \u0434\u043e\u043d\u0430\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043e 4.1592% \u043e\u0442 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 CBD. Winter \u0440\u0430\u0443\u043d\u0434 \u043e\u0442 \u0434\u0440\u0443\u0437\u0435\u0439: \u043e\u0442 2.1153% \u0434\u043e 4.1153% - \u0437\u0438\u043c\u043d\u0438\u0439 \u0440\u0430\u0443\u043d\u0434. \u042d\u0442\u043e\u0442 \u0440\u0430\u0443\u043d\u0434 \u043a\u0430\u043a \u0440\u0430\u0437 \u0441\u0435\u0439\u0447\u0430\u0441 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u0412\u0442\u043e\u0440\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u044d\u0442\u043e \u0431\u0430\u0431\u043b\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0439\u0434\u0435\u0442 \u0432 \u043a\u0438\u0431\u0435\u0440\u0424\u0430\u0443\u043d\u0434\u0435\u0439\u0448\u043d: 6.7255% - 8.7255% \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043e\u0431\u044a\u0435\u043c\u0430 \u0437\u0438\u043c\u043d\u0435\u0433\u043e \u0440\u0430\u0443\u043d\u0434\u0430. \u042d\u0442\u043e \u0410\u0440\u0430\u0433\u043e\u043d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0441\u0432\u043e\u0439 \u043a\u0430\u043f\u0438\u0442\u0430\u043b \u0437\u0430 \u0441\u0447\u0435\u0442 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430 \u043d\u0430 \u043f\u0440\u0438\u0447\u0438\u0442\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0435\u0439 CBD. \u0410\u0443\u043a\u0446\u0438\u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 EOS \u0441 \u0442\u043e\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439, \u0447\u0442\u043e \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u0431\u0430\u0431\u043b\u043e \u043f\u043e\u0439\u0434\u0435\u0442 \u043d\u0435 \u0432 \u043a\u0438\u0431\u0435\u0440\u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441, \u0430 \u043f\u043e\u0434 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u0442.\u0435. \u0432 \u0414\u0410\u041e. \u0421 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e \u0441\u0443\u0442\u0438 \u0431\u0443\u0434\u0435\u0442 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0437\u0430\u043a\u0443\u043f\u0438\u0442\u044c\u0441\u044f \u043c\u0430\u0441\u0441\u043e\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432, \u0434\u0443\u043c\u0430\u044e \u0430\u0443\u043a\u0446\u0438\u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 10k ETH \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0442\u043e\u0440\u0430 \u043b\u0435\u0442. Proof-of-code: 15% \u00b6 \u0422\u0435 \u043a\u0442\u043e \u0437\u0430\u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0438\u043b \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0433\u0440\u0443\u0431\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 3 \u0433\u0440\u0443\u043f\u043f\u044b: \u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441 \u0438 \u0438\u0437\u043e\u0431\u0440\u0435\u0442\u0430\u0442\u0435\u043b\u0438: 8.4% \u041a\u043e\u043c\u0430\u043d\u0434\u0430: 3.8% \u0428\u0438\u0440\u043e\u043a\u043e\u0435 \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0435\u0440\u043e\u0432: 2.8% \u041b\u043e\u0433\u0438\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439: \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0440\u0430\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043b\u0430 \u043e\u0446\u0435\u043d\u043a\u0443 \u0441\u0432\u043e\u0438\u0445 \u043e\u043f\u0446\u0438\u043e\u043d\u043e\u0432 \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0441\u0443\u043c\u043c\u044b \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u0438 \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439. \u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441: 8.4% \u0432 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u044c\u0433\u0430\u0445 \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 10M / 3 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 / 30 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 = ~10k 10M / 3 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 / 30 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 = ~10k \u043d\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446 \u0432 \u0437\u0443\u0431\u044b \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0435 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: 2.8% \u0432 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u044c\u0433\u0430\u0445 \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 10M / 9 \u0447\u0435\u043b\u043e\u0432\u0435\u043a / 18 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 = ~1.8k 10M / 9 \u0447\u0435\u043b\u043e\u0432\u0435\u043a / 18 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 = ~1.8k \u043d\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446 \u0432 \u0437\u0443\u0431\u044b \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0435 \u041a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0435\u0440\u044b: \u0412 \u044d\u0442\u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u0431\u0443\u0434\u0443\u0442 \u0432\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0430\u0443\u043d\u0442\u0438 \u0437\u0430 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430\u043c, \u043d\u043e \u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u043d\u0430 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u0430\u0445, \u0441\u0435\u043a\u044c\u044e\u0440\u0438\u0442\u0438 \u0431\u0430\u0443\u043d\u0442\u0438 \u0438 \u0442\u0434. \u041e\u043a\u043e\u043b\u043e \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u044d\u0442\u043e\u0433\u043e \u043c\u0435\u0448\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e \u043f\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u043c \u043a\u043e\u043d\u0433\u0440\u0435\u0441\u0441\u0430 \u0447\u0435\u0440\u0435\u0437 Gitcoin. \u0412\u0442\u043e\u0440\u0443\u044e \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443 \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0441\u043e\u0437\u0430\u0434\u043d\u0438\u0435 cyberColony . \u0422\u0430\u043a \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u043a\u0438\u0431\u0435\u0440\u041a\u043e\u043b\u043e\u043d\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u044f\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0447\u043b\u0435\u043d\u044b \u043a\u043e\u043d\u0433\u0440\u0435\u0441\u0441\u0430, \u0440\u0438\u0441\u043a\u043e\u0432 \u0434\u043b\u044f \u0434\u0435\u0448\u0435\u0432\u043e\u0439 \u0443\u0442\u0435\u0447\u043a\u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0442\u0430\u043a \u0436\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c, \u043d\u043e \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c. Proof-of-use: 70% \u00b6 \u0414\u0435\u0442\u0430\u043b\u0438 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0437\u0430\u043c\u0435\u0442\u043a\u0430\u0445 \u043a \u0440\u0435\u043b\u0438\u0437\u0443, \u043d\u043e \u043b\u044c\u0432\u0438\u043d\u0430\u044f \u0434\u043e\u043b\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e 70% \u0443\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u0434\u0440\u043e\u043f. \u041c\u044b \u0438\u043c\u0435\u0435\u043c \u0435\u0449\u0435 \u0448\u0435\u0441\u0442\u044c \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u043e\u043f. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439. \u041c\u0435\u0436\u0434\u0443 \u0434\u0440\u043e\u043f\u0430\u043c\u0438 \u043c\u044b \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430\u0443\u0447\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0412 \u0438\u0442\u043e\u0433\u0435 \u043c\u044b \u043d\u0430\u0434\u0435\u0435\u043c\u0441\u044f \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u0432 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0435 \u043e\u0434\u043d\u043e\u0433\u043e-\u0434\u0432\u0443\u0445 \u043b\u0435\u0442 \u0437\u0430 \u0441\u0447\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u044e\u0437\u0435\u0440\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u0433\u0434\u0435-\u0442\u043e \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\u0445 \u043a\u0438\u0431\u0435\u0440\u043d\u043e\u043c\u0438\u043a\u0438. \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432\u0437\u044f\u0442\u044b\u043c \u0430\u0434\u0440\u0435\u0441\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u0430\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0432 \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 \u043c\u0435\u0436\u0434\u0443 %.0003 \u0438 %0.000003 \u0447\u0442\u043e \u043f\u0440\u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u0432 10 \u043c\u0443\u043b\u044c\u0442\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 30 \u0431\u0430\u043a\u0441\u0430\u043c\u0438 \u0438 0.3 \u0431\u0430\u043a\u0441\u0430\u043c\u0438. \u042f \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u044e \u0447\u0442\u043e \u044d\u0442\u043e \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u043e\u0432\u0433\u043e \u0434\u0430\u043c\u043f\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u044f \u043e\u0436\u0438\u0434\u0430\u044e, \u0447\u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u044c\u0431\u044e\u0446\u0438\u0438 \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c demand \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c supply \u0434\u0430\u0436\u0435 \u043e\u0442 \u0441\u0442\u0430 \u0442\u044b\u0441\u044f\u0447 \u044e\u0437\u0435\u0440\u043e\u0432. \u0414\u0435\u043b\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u044b\u043d\u043e\u043a \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e \u043e\u043f\u044b\u0442\u0443 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0435\u0442\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u044c\u0441\u044f \u043a 60% \u043e\u0442 \u0441\u0443\u043f\u043b\u0430\u044f. \u041f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0438 \u0447\u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c \u0438\u043b\u0438 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 30% \u0441\u0443\u043f\u043b\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0440\u043e\u0441 \u043d\u0430 ~30% \u0441\u0443\u043f\u043b\u0430\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442 \u044e\u0437\u0435\u0440\u043e\u0432. \u0412 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0435\u0439\u043a \u043e\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f cyberFoundation, \u0430 \u044d\u0442\u043e \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 8% \u0447\u0442\u043e \u0435\u0449\u0435 \u0441\u0438\u043b\u044c\u043d\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0430\u043d\u043d\u0435\u0433\u043e \u0441\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0442\u043e\u043a\u0435\u043d\u044b \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432. \u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u0431\u044b\u0432\u0430\u0442\u044c \u0438 \u043e \u044e\u0437\u0435\u0440\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0432\u0438\u0434\u044f\u0442 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044e\u044e \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u043e\u0432. \u0426\u0435\u043b\u044c \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u042d\u0444\u0438\u0440\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0439 \u0431\u0440\u043e\u0430\u0434\u0431\u0430\u043d\u0434, \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430. \u041c\u0430\u043b\u043e\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0447\u0442\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u043b\u0438\u0431\u043e \u0438\u0437 \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0441 \u0434\u0440\u043e\u043f\u0435 \u0445\u0432\u0430\u0442\u0438\u0442 \u0434\u0440\u043e\u043f\u043d\u0443\u0442\u044b\u0445 \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0441\u0442\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u043c, \u0435\u0441\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u0432 \u0441\u0430\u043c\u043e\u043c \u0437\u0430\u0440\u043e\u0434\u044b\u0448\u0435 \u0441\u0435\u0442\u0438, \u043a\u043e\u0433\u0434\u0430 \u043d\u0430 \u0440\u044b\u043d\u043a\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432 \u0435\u0449\u0435 \u043d\u0435 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0446\u0438\u044f. \u041f\u043e\u0441\u043b\u0435 \u0413\u0435\u043d\u0435\u0437\u0438\u0441\u0430 \u00b6 \u041a \u0433\u0435\u043d\u0435\u0437\u0438\u0441\u0443 \u0444\u0430\u0437\u0430 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u0440\u044f\u0434 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0441\u044f, \u0442.\u0435. \u043a\u043e\u0434\u043e\u043c, \u0431\u0430\u0431\u043b\u043e\u043c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0443\u0436\u0435 \u043d\u0438\u043a\u043e\u043c\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0448\u044c :-) \u041f\u043e\u0441\u043b\u0435 \u0413\u0435\u043d\u0435\u0437\u0438\u0441\u0430 \u0441\u0435\u0442\u044c \u043f\u0435\u0440\u0435\u0439\u0434\u0435\u0442 \u0432 \u0440\u0435\u0436\u0438\u043c, \u043a\u043e\u0433\u0434\u0430 \u043d\u043e\u0432\u044b\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430\u043c\u0438. \u0421 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0431\u043b\u043e\u043a \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432: 1 000 000 000 CYB. \u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u043c \u043a\u043e\u043d\u0441\u0435\u043d\u0441\u0443\u0441\u043e\u043c \u043f\u043e \u043c\u043e\u043d\u0435\u0442\u0430\u0440\u043d\u043e\u0439 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0435. \u041c\u044b \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043f\u043e\u0442\u043e\u043c\u0443-\u0447\u0442\u043e \u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043c\u0430\u0440\u0436\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0435\u0440\u0435\u0442\u0435\u043a\u0430\u0442\u044c \u043a \u0442\u0435\u043c, \u043a\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e. \u041d\u0430\u0448 \u0433\u0440\u0430\u0444 \u0437\u043d\u0430\u043d\u0438\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0435\u0441\u043b\u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043d\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430\u043c, \u0447\u0442\u043e \u0438\u0445 \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u0438 \u0440\u0438\u0441\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0432\u0435\u0447\u043d\u043e\u0439 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u0438. \u0427\u0435\u043c \u0434\u043e\u043b\u044c\u0448\u0435 \u0431\u0443\u0434\u0435\u0442 \u0436\u0438\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u043d\u044c\u0448\u0430\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c. \u041f\u043e\u0447\u0435\u043c\u0443 \u0432\u0441\u0435 \u0442\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u0434\u0432\u0430 \u0442\u043e\u043a\u0435\u043d\u0430? \u00b6 \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438 \u043c\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u043e\u0431\u043e\u0439\u0442\u0438\u0441\u044c \u0431\u0435\u0437 ERC-20 \u0442\u043e\u043a\u0435\u043d\u0430, \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0439 \u0440\u044f\u0434 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432, \u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u043d \u043d\u0430\u043c \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043d\u0443\u0436\u0435\u043d. \u041d\u0430 ERC-20 \u0442\u043e\u043a\u0435\u043d\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0434\u0435\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u043e\u043d\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0438 \u043f\u043e\u0434\u0440\u044f\u0434\u0447\u0438\u043a\u0430\u043c \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043a\u0430 \u0441\u0435\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043d\u0430 100% \u0420\u0430\u0437\u0432\u0438\u0442\u0438\u0435 \u043b\u0438\u043a\u0432\u0438\u0434\u043d\u043e\u0441\u0442\u0438 CYB \u0442\u043e\u043a\u0435\u043d\u0430 - \u0434\u043e\u043b\u0433\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441. \u0428\u0430\u0433\u0438 \u0434\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0442\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0443\u0441\u0438\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442. \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a Academia \u0438 Chaingear \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0438\u043b\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u044b \u043d\u0430 \u044d\u0444\u0438\u0440\u0435. \u041c\u044b \u0445\u043e\u0442\u0438\u043c \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438 \u043d\u0430 Gitcoin, \u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u044b ERC-20 \u0442\u043e\u043a\u0435\u043d\u044b \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0435 \u043a\u0435\u0448\u0435\u0432\u044b\u0445 \u0441\u0442\u0443\u043c\u0443\u043b\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0435\u0440\u043e\u0432. \u041c\u044b \u043b\u044e\u0431\u0438\u043c \u044d\u0444\u0438\u0440, \u0438 \u0445\u043e\u0442\u0438\u043c \u0441 \u043d\u0438\u043c \u0436\u0438\u0442\u044c :-) \u0417\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0410\u0440\u0430\u0433\u043e\u043d, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u0447\u0435\u0441\u0430\u043b\u0438\u0441\u044c \u0440\u0443\u043a\u0438 \u043f\u043e\u0442\u0440\u043e\u0433\u0430\u0442\u044c \u0410\u0440\u0430\u0433\u043e\u043d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0431\u0430\u0437\u0435 CBD \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u044d\u0444\u0438\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0447\u0430\u0441\u0442\u044c \u0434\u0438\u0441\u0442\u0440\u0438\u044c\u0431\u044e\u0446\u0438\u0438 CYB \u0434\u0430 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b 100% \u0431\u0430\u0431\u043b\u0430 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u043c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0440\u0430\u0439\u043d\u0435 \u0441\u043e\u0431\u043b\u0430\u0437\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0442.\u043a. \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u0443\u044e \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0443\u0441\u043f\u0435\u0445 TheDAO. \u0412 \u0438\u0442\u043e\u0433\u0435 \u0443 \u043d\u0430\u0441 \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c CBD \u0442\u043e\u043a\u0435\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u043a\u0438\u043c\u0438 \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u043d\u0430 \u044d\u0444\u0438\u0440\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0441\u0443\u043f\u0435\u0440\u0441\u0438\u043b\u044b \u0438 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b :-) \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d\u044b \u043d\u0430 \u044d\u0444\u0438\u0440\u0435 \u043a\u0430\u043a \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438, \u043d\u0435\u0436\u0435\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0443\u043f\u0435\u0440\u0441\u0438\u043b\u0430. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0443\u043f\u0435\u0440\u0441\u0438\u043b\u0430 \u044d\u0442\u043e CYB \u0442.\u043a. \u043e\u043d\u0438 \u0434\u0430\u044e\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u041d\u043e \u043c\u044b \u043d\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u043c \u0438\u0437\u0431\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043e\u0442 CBD \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u042d\u0442\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0430\u0442\u044c \u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043a\u0440\u0443\u0442\u044b\u0445 \u0448\u0442\u0443\u043a. \u0414\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u0430\u044f \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0430 \u00b6 \u041f\u0440\u0438 \u0442\u043e\u043c, \u0447\u0442\u043e \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0433\u043a\u0430 \u043c\u0443\u0434\u0440\u0435\u043d\u043e\u0439 \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0421\u0430\u0442\u043e\u0448\u0438-\u0441\u0442\u0430\u0439\u043b, \u043e\u043d\u0430 \u0440\u0435\u0448\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u044f\u0438\u0446\u0430, \u0434\u0440\u0430\u043a\u043e\u043d\u043e\u0432 \u0438 \u0431\u0430\u0431\u043b\u0430. \u041f\u043e\u0441\u043b\u0435 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0441\u0435\u0442\u0438 merkle \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432, \u043a\u043b\u044e\u0447\u0435\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0435\u043d\u0441\u0443\u0441 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u0434\u043b\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0430 \u0437\u043d\u0430\u043d\u0438\u0439. \u0420\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u044d\u0442\u0443 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044e \u043c\u044b \u043f\u043e\u0434\u0443\u043c\u0430\u043b\u0438 \u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0432\u0435\u0449\u0430\u0445: \u0431\u0430\u043b\u0430\u043d\u0441 \u0440\u0438\u0441\u043a\u043e\u0432 \u0432\u043e\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 \u043e\u0431\u044a\u0435\u043c\u0435 \u0440\u043e\u0432\u043d\u043e \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u0430 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u044b\u043c\u0438 \u0441\u0442\u0438\u043c\u0443\u043b\u0430\u043c\u0438 \u041c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u0448\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435\u0442 merkle \u0441\u0442\u0430\u0434\u0438\u0438 \u043d\u0430 50 \u043c\u043b\u043d \u0431\u043b\u043e\u043a\u0435. \u041f\u0440\u0438 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 10 \u043b\u0435\u0442 \u0434\u043e\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442 ~13.4%, \u0430 \u0447\u0435\u0440\u0435\u0437 30 \u043b\u0435\u0442 - \u0432\u0441\u0435\u0433\u043e 5.7%.","title":"A note about CBD and CYB Distribution"},{"location":"blog/CYB_and_CBD_distribition/distribution/#a-note-about-cbd-and-cyb-distribution","text":"This note should be perceived, as context, upon reading euler release notes . The main purpose of this note - is to explain the logic behind our decisions, on the distribution of CBD and CYB, and prove to you that the decisions we made, have a sensible balance of risk, taking into account the possibilities of the project. We wish to be as transparent and as honest as possible, with our community. Because of this, some of the revealed information may seem strange and unaccustomed to you. We fully understand this, please be so kind in understanding us in return.","title":"A note about CBD and CYB Distribution"},{"location":"blog/CYB_and_CBD_distribition/distribution/#one","text":"The first important moment is that even though PoS is so fucking ecologically effective, it does put project creators in a very uncomfortable situation in approaching initial token distribution. This means that the network cannot simply take and receive bonds from validators as if those tokens just suddenly appeared out of nowhere. In PoW, things are simple. You burn some electricity - you create tokens. With PoS, the legend is still filled with mist, as to how tokens are created :-) And on that thought, it is obvious that the initial distribution must be proven with PoW. This is with consideration to the difficult times of today, when any fool is able to make an ASIC. Of course, one can create or use something like ProgPOW or Ethash, with tons of clever parameters. But those won't last you for long. So, if you really believe that PoW will get us to the point where all our trees are eaten by caterpillars , then you aren't really left with many choices for making a distribution that won't harm your project. Looking at the bigger picture, there are only two proven ways of doing so:","title":"One"},{"location":"blog/CYB_and_CBD_distribition/distribution/#drop-em","text":"This is a great way to prove that users are using what you have created. A drop is the most effective, and up to date way of attracting users. Drops of BTC attract billions of dollars if 100% tokens of a new system has been dropped. But, those are only possible if you do not need to invest in the code base. If your project is written from scratch, because, it indeed, offers something new, then the project must have both - money and developers. This is simply because developers eat only money indeed.","title":"Drop 'em"},{"location":"blog/CYB_and_CBD_distribition/distribution/#collecting-dough","text":"A very effective way of \"feeding\" devs with money, is to feed them the money that the investors have brought to the table. But out of those that send you that money, there will always be those, that aren't the \"happy bunch\", and the project will have to live with it. Bitcoin, for example, didn't have this negativity, as it simply couldn't have had it. If one single person doesn't have the money for covering the projects costs (meanwhile only Satoshi and the guys from Grin have managed to pull this off), then you are put with the necessity of taking money, either from those you trust, or from everyone. Attracting money from everyone is always a risk for the project. Especially now, when the regulators don't give a fuck for basic logic. This is why, private investments from people you trust are the way forward, especially if the project can do it quickly and effectively. This is the way we will move go by in order to fund our project and to bring it up to stable mode. Also, this will allow us to focus more on development, as the resources burned on investor relations are always fierce.","title":"Collecting dough"},{"location":"blog/CYB_and_CBD_distribition/distribution/#two","text":"The second important moment is that the distribution must always solve an issue. In its essence, any proven distribution is a mix between different capitals, that brings us to the current state of the system (whether successful or not). Simply understanding who and how receives your token can mean a lot, if not basically everything :-) Our project has (almost) the classical problem of the egg, the dragon, and money. What we need to do, is to make a connection between developers and normal crypto users, in such a way, where those who have the capital are also willing to help. This means, that we achieve a state where the capital, simultaneously, has to be in the hands of the \"average\" user and in the hands of those, who have contributed that capital. And of course, most importantly, in the hands of the developers.","title":"Two"},{"location":"blog/CYB_and_CBD_distribition/distribution/#for-developers","text":"This brings us to the understanding that part of the distribution has to be distributed to developers. In our case, most of the code was written by ourselves, this means that we have either already received a substantial part of the allocation, or will receive it, upon completing the development. Another substantial part of what is allocated to the developers will be used for useful experimenting. Tokens will be allocated to three (for the time being) experiments in the field of network swarming: Gitcoin, Aragon and Colony.","title":"For Developers"},{"location":"blog/CYB_and_CBD_distribition/distribution/#three","text":"The third part of the story is that we still have to find a balance between the market depth (the investors) and between the engineering thought (the developers). Because, if this is not done, then the developers will simply fork you out, and of course, this is not good for the investors. Because in an organic ecosystem (like Ethereum), the investors religiously believe in the developers, and it looks as synergic as it can get. If it will be the other way around - where the developers believe religiously in the investor's - nothing will ever get done, it just won't fucking work. We have decided to go in the direction where the money and the code are of equal value. Both groups get 15% of the distribution (each). And the users get the other 70% of CBD tokens. The main purpose of this note - is to show the potential contributors that the existing valuation has been formed upon actual and valid contributions. This also means, that in the future, there won't be a situation where one type of actor gets their tokens for a lesser value than was formed during the Genesis contribution. The truth is that we want to get rid of the distribution question, as quickly as possible. But, the project needs a throughout initial capital structure, both in economical and in human terms. This is in order for the project to become something meaningful and worthwhile, and to be able to compete with the giants out there.","title":"Three"},{"location":"blog/CYB_and_CBD_distribition/distribution/#summing-up-the-distribution-of-cbd-tokens","text":"Proof of code: 15% for those who write code Proof of dough: 15% for those who contribute the dough Proof of use: 70% for at least 1 million of (at least) Ethereum users At the time of Genesis of the mainnet, the owners of CBD tokens will get the lion's share of CYB tokens. This is with the exception to the inflation, that is allocated to validators of the mainnet, which will be in between 3% to 10%, depending on when the network is launched.","title":"Summing up the distribution of CBD tokens"},{"location":"blog/CYB_and_CBD_distribition/distribution/#utility-testnet","text":"It is important to understand the difference between an average blockchain testnet and our euler testnet! Our testnet can be utilized and can be used for searching already! The links will be persistent from testnet to testnet! Because of this - it can hold 1% of monetary value within itself. By this we are solving a rather difficult issue, which is related to the delivery of complicated and productive networks and smart contract systems. Usually, those can develop for years. This is why we have decided to build our rocket during real flight time. On one hand, we already have something to show. Something that is working already! And we want people to use it. Also our ranking system is based on pure economics, so we can conclude nothing from running zero value testnet. On the other hand, because the code is still young, monetary issues can arise. This is why we have decided to find a compromise, in the light of using CBD - an Ethereum based token, and CYB - the mainnet token.","title":"Utility testnet"},{"location":"blog/CYB_and_CBD_distribition/distribution/#proof-of-value-15","text":"Those who donated dough can be roughly divided into 2 groups: The first group is the dough that will go to cyberCongress: - The Genesis team round: 4.1592% - has already been done in the beginning of 2018. It is valued at 30k ETH. There was no software prior to this. It is worth noting here, that all further valuations of the project, from the moment it was conceived, were based on the fact, that for two years the project was solely being donated by the guys from the cyberCongress team: that is - 110.2 BTC + 380 ETH. 4.1592% of the CBD distribution was allocated to the team for the above contributions. A winter round of donations from friends: will vary at between 2.1153% to 4.1153%. This round is actually in progress right now. The second group, is the dough that will go to cyberFoundation: Between 6.7255% to 8.7255%, depending on the volumes of the donations during the winter round. This is an Aragon organization that will generate its capital through a public auction from the CBD tokens that has been allocated to them. The auction will be similar to that of EOS, with the only difference, that the collected dough will not go to cyberCongress, but, will be under the control of the community itself, i.e. of the DAO. Taking into account the fact that this, is in essence, the only opportunity for validators to purchase tokens in big amounts, I presume the auction can collect at least 10k ETH over the next one and a half years.","title":"Proof-of-value: 15%"},{"location":"blog/CYB_and_CBD_distribition/distribution/#proof-of-code-15","text":"Those who have contributed code can be roughly divided into 3 groups: Congress and inventors (developers): 8.4% The team: 3.8% A wider community of contributors: 2.8% One can say, that the logic was as follows: the team calculated the valuation of its options, based on the amount of personal investment and reasonable goals. Congress: 8.4% in actual money, estimated at 10M / 3 people / 30 months = ~10k 10M / 3 people / 30 months = ~10k per person, per month, into one hand, according to current estimates The team: 3.8% in actual money, estimated at $10M / 9 people / 18 months = ~ 1.8k $ per person, per month, into one hand, according to current estimates Contributors: This category will include things like bounties for simple translation work, and also bounties for more serious work, such as: protocol implementation in alternative programming languages, security bounty, and so on. About half of this sum will be distributed via Gitcoin, under the control of the Congress. The second half is going to be allocated towards the creation of cyberColony . Since some members of the Congress will also be the founders of cyberColony, there should be no risk of cheap token leakage, but of course, those may arise.","title":"Proof-of-code: 15%"},{"location":"blog/CYB_and_CBD_distribition/distribution/#proof-of-use-70","text":"The details of the distribution can be found in the release notes, but a lion's share of the distribution, 70% - to be precise, will go towards the drop. We have six more attempts to optimize the drop. Each further attempt should be more efficient than the previous one. We will try to apply some scientific methods in between the drops in order to optimize them. As a result, over the horizon of between one to two years, we hope to achieve the highest possible effective distribution, for the users who were most helpful in the space of cybernomics. Individual addresses will be allocated between %0.0003 and %0.000003, this is equal to between 30 dollars and 0.3 dollars when evaluating at $10M. I assume that these numbers are reasonable, in order not to expect any mass dumping of tokens by the users. Nevertheless, I expect that the current configuration of the distribution is able to generate demand in order to compensate for the supply, even for as much as, one hundred thousand users. The fact is, based upon experience in other networks, the validator market will strive for 60% of the supply. Provided that the tokens can be bought or earned in a number of ways, just for 30% of the total supply - there will be roughly 30% demand, which can only be obtained from different users. In reality, most validators will only have access to the stake which forms cyberFoundation, this is equal to round about 8%, which in turn, will build an even stronger demand for the token, during its early stages from the validators themselves. We should also not cross out the users who will see value in the token. The purpose of approaching distribution is this way - is to give Ethereum's active users the minimum possible bandwidth. This is done in order to value the advantages of distributed search. It is unlikely that any of the addresses that received a drop will have enough tokens to become a validator, the only way for this to occur is during the very beginning of the life of the network, when the market of validators has not yet formed any competition.","title":"Proof-of-use: 70%"},{"location":"blog/CYB_and_CBD_distribition/distribution/#after-genesis","text":"Towards the Genesis, the phase at which you can prove something to someone, will come to an end. Meaning - that with code, money or by use, you won't be able to prove anything to anyone anymore :-) After Genesis, the network will move onto a stage, where new tokens will only be generated by the validators. From this moment on, the validators will receive a fixed amount of token per block: 1 000 000 000 CYB. This will be the base consensus for the monetary policy. The reason for choosing an inflationary system, was because we believe that the transactional margin has to flow to those who fulfil the most important task. Our knowledge graph will not be possible to calculate without the validators. This means, that if we wish to use the network's bandwidth for eternity, we have to guarantee the validators a life long cover of their costs from a fixed level of never-ending inflation. The longer the system exists, the less value will the relative inflation have.","title":"After Genesis"},{"location":"blog/CYB_and_CBD_distribition/distribution/#so-why-do-we-have-two-tokens-after-all","text":"Technically we could have not had an ERC-20 token, nevertheless, there was a whole bunch of reasons found, why we do need it. ERC-20 tokens are good for accounting options for the team and for vendors until the network is 100% productive The process making CYB token liquid is a long one. Some steps taken before the launch of the network can help the project develop We have other side projects that can help us to make the token of this project stronger, for example: cyberAcademia and Chaingear We want to actively develop the community on Gitcoin, but doing so with tokens from an outside network - is impossible. We need an ERC-20 token in order to have more non-fiat stimulus for the contributors. We love Ethereum and we want to live in it :-) Aragon is finally working, so it is \"a must\", to try out the Aragon organizations Forming an Ethereum based community on the basis of CBD tokens, to which part of the CYB tokens is allocated, in such a way - where 100% of the money is controlled by the community itself, looks too tempting in order not to give it a try. This is because we must try and have another go at repeating the DAO's success. As a result we ended up with CBD tokens, which are a kind of a community token on the Ethereum network already, it can already grant you different super skills and give you different artifacts. We see our Ethereum based tokens as a side effect of organising the process, rather then our main super power. Our main super power is - of course, the CYB token, because they are the once that give you the possibility of validating and ranking. But we do not plan on throwing CBD out after the launch of the mainnet. It is a cool thing that can have many uses and help us to do achieve many cool things.","title":"So why do we have two tokens after all?"},{"location":"blog/CYB_and_CBD_distribition/distribution/#long-term-perspective","text":"The starting distribution might seem a bit more complicated in comparison to a Satoshi-style one. But, it solves the current tasks of the project - that of the egg, the dragon, and the dough. After the activation of the merkle network, the structure of the distribution becomes rather simple and validator orientated. The main task of the model will be providing the computing consensus with the needed resources for the actualization of the publicly available knowledge graph. Whilst developing this distribution, we were trying to keep in mind the following things: balance of risks for the projets participants financing the project at the needed level and no more ensuring long term incentives to the capital structure The model illustrated above assumes, that the project will achieve the merkle stage on block 50 000 000. Based upon this scenario, initial investors and developers share, will be equal to ~13.4% after 10 years and only to ~5.7% after 30 years.","title":"Long term perspective"},{"location":"blog/CYB_and_CBD_distribition/distribution/#cbd-cyb","text":"\u042d\u0442\u0443 \u0437\u0430\u043c\u0435\u0442\u043a\u0443 \u0441\u0442\u043e\u0438\u0442 \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u043f\u0440\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u0437\u0430\u043c\u0435\u0442\u043e\u043a \u043a \u0440\u0435\u043b\u0438\u0437\u0443 euler . \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u0437\u0430\u043c\u0435\u0442\u043a\u0438 - \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u043d\u0430\u0448\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0435\u0439 CBD \u0438 CYB \u0438 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0430\u043c, \u0447\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u0440\u0438\u043d\u044f\u043b\u0438 \u043d\u0435\u0441\u0443\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 \u0440\u0438\u0441\u043a\u043e\u0432 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0446\u0435\u043b\u0435\u0439 \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041c\u044b \u0445\u043e\u0442\u0438\u043c \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u044b\u043c\u0438 \u0438 \u0447\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0441\u043a\u0440\u044b\u0442\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0412\u0430\u043c \u043d\u0435\u043f\u0440\u0438\u0432\u044b\u0447\u043d\u043e\u0439. \u041c\u044b \u044d\u0442\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u043c, \u043f\u043e\u0439\u043c\u0438\u0442\u0435 \u0438 \u0412\u044b \u043d\u0430\u0441.","title":"\u0417\u0430\u043c\u0435\u0442\u043a\u0430 \u043a \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 CBD \u0438 CYB"},{"location":"blog/CYB_and_CBD_distribition/distribution/#_1","text":"\u041f\u0435\u0440\u0432\u044b\u0439 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u044d\u0442\u043e \u0442\u043e, \u0447\u0442\u043e PoS \u0431\u0443\u0434\u0443\u0447\u0438 \u0430\u0445\u0443\u0435\u043d\u043d\u043e \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0441\u0442\u0430\u0432\u0438\u0442 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u0435\u043c \u0434\u044e\u0436\u0443\u044e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0435\u0439. \u0422.\u0435. \u0441\u0435\u0442\u044c \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0437\u044f\u0442\u044c \u0442\u0430\u043a \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043d\u0434\u044b \u043e\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432, \u0435\u0441\u043b\u0438 \u044d\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u044b \u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043e\u0442\u043a\u0443\u0434\u0430-\u0442\u043e \u0443 \u043d\u0438\u0445 \u043d\u0435 \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c. \u0412 PoW \u0432\u0441\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e. \u0421\u043f\u0430\u043b\u0438\u043b \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u0442\u0432\u0430 - \u0441\u043e\u0437\u0434\u0430\u043b\u0438\u0441\u044c \u0442\u043e\u043a\u0435\u043d\u044b. \u0410 \u0432\u043e \u0432\u0441\u044f\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 PoS \u043b\u0435\u0433\u0435\u043d\u0434\u0430 \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043a\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u044d\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u044b \u043f\u043e\u044f\u0432\u044f\u0442\u0441\u044f :-) \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0434\u043e\u043a\u0430\u0437\u0443\u0435\u043c\u0430\u044f \u043a\u0430\u043a PoW. \u0421\u0435\u0439\u0447\u0430\u0441 \u0435\u0449\u0435 \u0432\u0440\u0435\u043c\u044f \u0442\u0430\u043a\u043e\u0435, \u0447\u0442\u043e \u0430\u0441\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u043b\u044e\u0431\u043e\u0439 \u0434\u0443\u0440\u0430\u043a \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c. \u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0438 \u0438\u0437\u043e\u0431\u0440\u0435\u0441\u0442\u0438 ProgPOW \u0438\u043b\u0438 Ethash \u0441 \u0445\u0438\u0442\u0440\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043d\u043e \u043d\u0430\u0434\u043e\u043b\u0433\u043e \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u0442. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0441\u043b\u0438 \u0442\u044b \u0443\u0431\u0435\u0436\u0434\u0435\u043d \u0447\u0442\u043e PoW \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u0434\u0435\u0440\u0435\u0432\u044c\u044f \u0441\u044c\u0435\u0434\u0430\u044e\u0442 \u0433\u0443\u0441\u0435\u043d\u0446\u044b , \u0442\u043e \u0442\u043e\u0433\u0434\u0430 \u0443 \u0442\u0435\u0431\u044f \u0435\u0441\u0442\u044c \u043d\u0435 \u0442\u0430\u043a \u0443\u0436 \u0438 \u043c\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044e \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u043f\u0440\u0438\u0431\u044c\u0435\u0442 \u0442\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442. \u041f\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u043c\u0443 \u0441\u0447\u0435\u0442\u0443 \u0435\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0430 \u0434\u043e\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430:","title":"\u0420\u0430\u0437"},{"location":"blog/CYB_and_CBD_distribition/distribution/#_2","text":"\u0425\u043e\u0440\u043e\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0447\u0442\u043e \u044e\u0437\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0442\u043e, \u0447\u0442\u043e \u0442\u044b \u0441\u0434\u0435\u043b\u0430\u043b. \u0414\u0440\u043e\u043f \u044d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u0438\u0432\u043b\u0435\u0447\u044c \u044e\u0437\u0435\u0440\u043e\u0432. \u0414\u0440\u043e\u043f\u044b \u0431\u0438\u0442\u043a\u043e\u0438\u043d\u0430 \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u044e\u0442 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u044b \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 100%-\u043d\u044b. \u041d\u043e \u0441\u0442\u043e\u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u044b\u0435 \u0434\u0440\u043e\u043f\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u043e\u0434\u043e\u0432\u0443\u044e \u0431\u0430\u0437\u0443. \u0415\u0441\u043b\u0438 \u0436\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0441 \u043d\u0443\u043b\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0435\u043c-\u0442\u043e \u043f\u0440\u0438\u043d\u0438\u0446\u0438\u043f\u0438\u0430\u043b\u044c\u043d\u043e \u043d\u043e\u0432\u044b\u043c, \u0442\u043e \u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0438 \u0434\u0435\u043d\u044c\u0433\u0438 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438, \u043f\u043e\u0442\u043e\u043c\u0443-\u0447\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0447\u0438\u043a\u0438 \u043f\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438.","title":"\u0414\u0440\u043e\u043f\u043d\u0443\u0442\u044c"},{"location":"blog/CYB_and_CBD_distribition/distribution/#c","text":"\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u043a\u043e\u0440\u043c\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0432 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u044d\u0442\u043e \u043d\u0430\u043a\u043e\u0440\u043c\u0438\u0442\u044c \u0438\u0445 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432. \u041d\u043e \u0438\u0437 \u0442\u0435\u0445 \u043a\u0442\u043e \u043f\u0440\u0438\u0441\u043b\u0430\u043b \u0431\u0430\u0431\u043b\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0443\u0442 \u043d\u0435\u0434\u043e\u0432\u043e\u043b\u044c\u043d\u044b\u0435 c \u0447\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0436\u0438\u0442\u044c. \u0423 \u0411\u0438\u0442\u043a\u043e\u0438\u043d\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u0430, \u043f\u043e\u0442\u043e\u043c\u0443 \u043a\u0430\u043a \u043d\u0435 \u043c\u043e\u0433\u043b\u043e \u0431\u044b\u0442\u044c. \u0415\u0441\u043b\u0438 \u0443 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432\u0437\u044f\u0442\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u043d\u0435\u0442\u0443 \u0434\u0435\u043d\u0435\u0433, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u0432\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442 (\u0430 \u043f\u043e\u043a\u0430-\u0447\u0442\u043e \u0442\u0430\u043a \u0443\u043c\u0443\u0434\u0440\u0438\u043b\u0438\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0421\u0430\u0442\u043e\u0448\u0438 \u0438 \u0440\u0435\u0431\u044f\u0442\u0430 \u0438\u0437 \u0413\u0440\u0438\u043d), \u0442\u043e\u0433\u0434\u0430 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0431\u0430\u0431\u043b\u043e \u043b\u0438\u0431\u043e \u043e\u0442 \u043b\u044e\u0434\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0442\u044b \u0434\u043e\u0432\u0435\u0440\u044f\u0435\u0448\u044c, \u043b\u0438\u0431\u043e \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0440\u044f\u0434. \u041f\u0440\u0438\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u043d\u0435\u0433 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0440\u044f\u0434 \u0432\u0441\u0435\u0433\u0434\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0438\u0441\u043a\u043e\u043c \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0447\u0442\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0442\u043e\u0440\u0430\u043c \u0441\u0442\u0430\u043b\u043e \u043f\u043e\u0445\u0443\u0439 \u043d\u0430 \u0437\u0434\u0440\u0430\u0432\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0435 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u043e\u0442 \u043b\u044e\u0434\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0442\u044b \u0434\u043e\u0432\u0435\u0440\u044f\u0435\u0448\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u044b\u043c \u0432\u044b\u0445\u043e\u0434\u043e\u043c \u0432 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0444\u0430\u043d\u0434\u0438\u043d\u0433 \u043d\u0430 \u0434\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u044b \u0442\u0430\u043a \u0438 \u043f\u043e\u0441\u0443\u043f\u0438\u043c. \u041a \u0442\u043e\u043c\u0443 \u0436\u0435 \u044d\u0442\u043e \u043d\u0430\u043c \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0444\u043e\u043a\u0443\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435, \u0442.\u043a. \u043b\u044e\u0431\u044b\u0435 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u044d\u0442\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u043b\u044e\u0442\u044b\u0435 \u044d\u043d\u0435\u0440\u0433\u043e\u0437\u0430\u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u0430\u043c\u0438.","title":"C\u043e\u0431\u0440\u0430\u0442\u044c \u0431\u0430\u0431\u043b\u043e"},{"location":"blog/CYB_and_CBD_distribition/distribution/#_3","text":"\u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0436\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u044d\u0442\u043e \u0442\u043e, \u0447\u0442\u043e \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044f \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0443. \u041f\u043e \u0441\u0443\u0442\u0438 \u0432\u0441\u044f\u043a\u0430\u044f \u0434\u043e\u043a\u0430\u0437\u0443\u0435\u043c\u0430\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044f \u044d\u0442\u043e \u043c\u0438\u043a\u0441 \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 (\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c\u0443 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u041e\u0442 \u0442\u043e\u0433\u043e \u0443 \u043a\u043e\u0433\u043e \u0438 \u043a\u0430\u043a \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d \u0437\u043d\u0430\u0447\u0438\u0442 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0441\u0451 :-) \u0423 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0435\u0441\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u044f\u0438\u0446\u0430, \u0434\u0440\u0430\u043a\u043e\u043d\u0430 \u0438 \u0431\u0430\u0431\u043b\u0430. \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0441 \u043e\u0431\u044b\u043a\u043d\u043e\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0434\u0430 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u043e\u0438\u043c\u0443\u0449\u0438\u0435 \u0442\u043e\u0436\u0435 \u043c\u043e\u0433\u043b\u0438 \u043f\u043e\u043c\u043e\u0447\u044c. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u043f\u0438\u0442\u0430\u043b \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u0438 \u0443 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0438 \u0443 \u0442\u0435\u0445 \u043a\u0442\u043e \u0437\u0430\u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0438\u043b \u043a\u0430\u043f\u0438\u0442\u0430\u043b, \u0438 \u0441\u0430\u043c\u043e\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u0443 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.","title":"\u0414\u0432\u0430"},{"location":"blog/CYB_and_CBD_distribition/distribution/#_4","text":"\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0447\u0430\u0441\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0432\u0441\u0435 \u0442\u0430\u043a\u0438 \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u0441\u043f\u0438\u043b\u0438\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u043c\u0438. \u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043a\u043e\u0434\u0430 \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438 \u0441\u0430\u043c\u0438, \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0430\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0438 \u043b\u0438\u0431\u043e \u0443\u0436\u0435 \u0437\u0430\u0431\u0440\u0430\u043b\u0438 \u0441\u0435\u0431\u0435, \u043b\u0438\u0431\u043e \u043e\u0442\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0435 \u0434\u043e\u043f\u0438\u0448\u0435\u043c. \u0410 \u0435\u0449\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0438\u0437 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0434\u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u043c \u043f\u043e\u0439\u0434\u0435\u0442 \u043d\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b. \u0422\u043e\u043a\u0435\u043d\u044b \u0434\u043e\u0441\u0442\u0430\u043d\u0443\u0442\u0441\u044f \u0442\u0440\u0435\u043c (\u043f\u043e\u043a\u0430) \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043c \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0441\u0432\u0430\u0440\u043c\u043e\u0432: Gitcoin, Aragon \u0438 Colony.","title":"\u0420\u0430\u0437\u0440\u0430\u0431\u0430\u043c"},{"location":"blog/CYB_and_CBD_distribition/distribution/#_5","text":"\u0410 \u0442\u0440\u0435\u0442\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0435\u0449\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0431\u0430\u043b\u0430\u043d\u0441 \u0432 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0430\u043a\u0430\u043d\u043e\u043c (\u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u0430\u043c\u0438) \u0438 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u043e\u0439 \u043c\u044b\u0441\u043b\u044c\u044e (\u0434\u0435\u0432\u0435\u043e\u043b\u043e\u043f\u0435\u0440\u0430\u043c\u0438). \u041f\u043e\u0442\u043e\u043c\u0443 \u043a\u0430\u043a \u0435\u0441\u043b\u0438 \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u043e \u0434\u0435\u0432\u0435\u043b\u043e\u043f\u0435\u0440\u044b \u043e\u043a\u0430\u0436\u0443\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043a\u0435, \u0447\u0442\u043e \u043f\u043b\u043e\u0445\u043e \u0434\u043b\u044f \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432, \u0442.\u043a. \u0432 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u043e\u0440\u0433\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u0442\u0430\u043a\u043e\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u043a \u044d\u0444\u0438\u0440, \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u044b \u0440\u0435\u043b\u0438\u0433\u0438\u043e\u0437\u043d\u043e \u0432\u0435\u0440\u044f\u0442 \u0432 \u0434\u0435\u0432\u0435\u043b\u043e\u043f\u0435\u0440\u043e\u0432 \u0447\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0438\u043d\u0435\u0440\u0433\u0438\u0447\u043d\u043e. \u0415\u0441\u043b\u0438 \u0434\u0435\u0432\u0435\u043b\u043e\u043f\u0435\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0435\u043b\u0438\u0433\u0438\u043e\u0437\u043d\u043e \u0432\u0435\u0440\u0438\u0442\u044c \u0432 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432, \u0442\u043e \u043d\u0438\u0445\u0443\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442. \u041c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043f\u043e\u0439\u0442\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0430\u0431\u043b\u043e \u0438 \u043a\u043e\u0434 \u0440\u0430\u0432\u043d\u043e\u0446\u0435\u043d\u043d\u044b \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u043f\u043e 15% \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438, \u0430 \u044e\u0437\u0435\u0440\u0430\u043c \u0443\u0445\u043e\u0434\u0438\u0442 70% CBD \u0442\u043e\u043a\u0435\u043d\u043e\u0432. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u044d\u0442\u043e\u0439 \u0437\u0430\u043c\u0435\u0442\u043a\u0438 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0435\u0440\u0430\u043c, \u0447\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0439, \u0438 \u0447\u0442\u043e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u043f\u0440\u0438 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439 \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0442\u043e\u043a\u0435\u043d\u044b \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 \u043d\u0438\u0436\u0435, \u0447\u0435\u043c \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0413\u0435\u043d\u0435\u0437\u0438\u0441 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438. \u041f\u0440\u0430\u0432\u0434\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043c\u044b \u043f\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0445\u043e\u0442\u0438\u043c \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0434\u0438\u0441\u0442\u0440\u0438\u044c\u0431\u044c\u044e\u0446\u0438\u0435\u0439, \u043d\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u043c\u0443\u0434\u0440\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u0430, \u043a\u0430\u043a \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e, \u0442\u0430\u043a \u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u0432\u043e \u0447\u0442\u043e-\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438 \u043c\u043e\u0447\u044c \u043a\u043e\u043d\u043a\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u0433\u0438\u0433\u0430\u043d\u0442\u0430\u043c\u0438.","title":"\u0422\u0440\u0438"},{"location":"blog/CYB_and_CBD_distribition/distribution/#cbd","text":"\u041f\u0440\u0443\u0444 \u043a\u043e\u0434\u0430: 15% \u0434\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u043f\u0438\u0448\u0435\u0442 \u043a\u043e\u0434 \u041f\u0440\u0443\u0444 \u0431\u0430\u0431\u043b\u0430: 15% \u0434\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u0434\u043e\u043d\u0430\u0442\u0438\u0442 \u0431\u0430\u0431\u043b\u043e \u041f\u0440\u0443\u0444 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: 70% \u0434\u043b\u044f \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u044e\u0437\u0435\u0440\u043e\u0432 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u042d\u0444\u0438\u0440\u0430 \u041d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0413\u0435\u043d\u0435\u0437\u0438\u0441\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b CBD \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0430\u0442 \u043b\u044c\u0432\u0438\u043d\u0443 \u0434\u043e\u043b\u044e CYB, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u0438 \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442 \u043e\u0442 3% \u0434\u043e 10% \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u043a\u043e\u0433\u0434\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0435\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430.","title":"\u0418\u0442\u043e\u0433\u043e \u043f\u0440\u043e \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044e \u0442\u043e\u043a\u0435\u043d\u043e\u0432 CBD"},{"location":"blog/CYB_and_CBD_distribition/distribution/#_6","text":"\u041e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c \u0432 \u0447\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0431\u044b\u0447\u043d\u044b\u043c \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d \u0442\u0435\u0441\u0442\u043d\u0435\u0442\u043e\u043c \u0438 \u043d\u0430\u0448\u0438\u043c \u0442\u0435\u0441\u0442\u043d\u0435\u0442\u043e\u043c euler! \u041d\u0430\u0448 \u0442\u0435\u0441\u0442\u043d\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u0447\u0430\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441! \u0421\u0441\u044b\u043b\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b \u043e\u0442 \u0442\u0435\u0441\u0442\u043d\u0435\u0442\u0430 \u043a \u0442\u0435\u0441\u0442\u043d\u0435\u0442\u0443! \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u0435 1% \u043c\u043e\u043d\u0435\u0442\u0430\u0440\u043d\u043e\u0439 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0422.\u043e. \u043c\u044b \u0440\u0435\u0448\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u0443\u044e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0443\u044e \u0441 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439 \u0438 \u0441\u0438\u0441\u0442\u0435\u043c \u0441\u043c\u0430\u0440\u0442\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432. \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0433\u043e\u0434\u0430\u043c\u0438. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0440\u0430\u043a\u0435\u0442\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043b\u0435\u0442\u0430. \u0421 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0443\u0436\u0435 \u0447\u0442\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c. \u0427\u0442\u043e-\u0442\u043e \u0447\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442! \u0418 \u043d\u0430\u043c \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u0438\u043c \u043d\u0430\u0447\u0430\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u0421 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0432\u043b\u0435\u0447\u0435\u043d\u044b \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u043d\u0435\u0442\u0430\u0440\u043d\u044b\u0435 \u0440\u0438\u0441\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u043a\u043e\u0434 \u0435\u0449\u0435 \u043c\u043e\u043b\u043e\u0434. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0438\u0441 \u0432 \u0432\u0438\u0434\u0435 \u044d\u0444\u0438\u0440 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 CBD \u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 CYB.","title":"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043d\u0435\u0442"},{"location":"blog/CYB_and_CBD_distribition/distribution/#proof-of-value-15_1","text":"\u0422\u0435 \u043a\u0442\u043e \u0437\u0430\u0434\u043e\u043d\u0430\u0442\u0438\u043b \u0431\u0430\u0431\u043b\u043e \u0433\u0440\u0443\u0431\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 2 \u0433\u0440\u0443\u043f\u043f\u044b: \u041f\u0435\u0440\u0432\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u044d\u0442\u043e \u0431\u0430\u0431\u043b\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0439\u0434\u0435\u0442 \u0432 \u043a\u0438\u0431\u0435\u0440\u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441: - Gensis \u0440\u0430\u0443\u043d\u0434 \u043e\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: 4.1592% - \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043b\u0438. \u041e\u0446\u0435\u043d\u043a\u0430 30k ETH. \u041d\u0435 \u0431\u044b\u043b\u043e \u0441\u043e\u0444\u0442\u0430. \u0422\u0443\u0442 \u0441\u0442\u043e\u0438\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0447\u0442\u043e \u0432\u0441\u0435 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 \u0432\u0437\u044f\u043b\u0438\u0441\u044c \u0438\u0437 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0432\u043e\u0435\u0433\u043e \u0437\u0430\u0447\u0430\u0442\u0438\u044f, \u0434\u0432\u0430 \u0433\u043e\u0434\u0430 \u0434\u043e\u043d\u043e\u0440\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u044f\u0432\u043b\u044f\u043b\u0438\u0441\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u0431\u044f\u0442\u0430 \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u0438\u0431\u0435\u0440\u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441\u0430: 110.2 BTC + 380 ETH. \u0417\u0430 \u044d\u0442\u0438 \u0434\u043e\u043d\u0430\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043e 4.1592% \u043e\u0442 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 CBD. Winter \u0440\u0430\u0443\u043d\u0434 \u043e\u0442 \u0434\u0440\u0443\u0437\u0435\u0439: \u043e\u0442 2.1153% \u0434\u043e 4.1153% - \u0437\u0438\u043c\u043d\u0438\u0439 \u0440\u0430\u0443\u043d\u0434. \u042d\u0442\u043e\u0442 \u0440\u0430\u0443\u043d\u0434 \u043a\u0430\u043a \u0440\u0430\u0437 \u0441\u0435\u0439\u0447\u0430\u0441 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u0412\u0442\u043e\u0440\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u044d\u0442\u043e \u0431\u0430\u0431\u043b\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0439\u0434\u0435\u0442 \u0432 \u043a\u0438\u0431\u0435\u0440\u0424\u0430\u0443\u043d\u0434\u0435\u0439\u0448\u043d: 6.7255% - 8.7255% \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043e\u0431\u044a\u0435\u043c\u0430 \u0437\u0438\u043c\u043d\u0435\u0433\u043e \u0440\u0430\u0443\u043d\u0434\u0430. \u042d\u0442\u043e \u0410\u0440\u0430\u0433\u043e\u043d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0441\u0432\u043e\u0439 \u043a\u0430\u043f\u0438\u0442\u0430\u043b \u0437\u0430 \u0441\u0447\u0435\u0442 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430 \u043d\u0430 \u043f\u0440\u0438\u0447\u0438\u0442\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0435\u0439 CBD. \u0410\u0443\u043a\u0446\u0438\u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 EOS \u0441 \u0442\u043e\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439, \u0447\u0442\u043e \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u0431\u0430\u0431\u043b\u043e \u043f\u043e\u0439\u0434\u0435\u0442 \u043d\u0435 \u0432 \u043a\u0438\u0431\u0435\u0440\u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441, \u0430 \u043f\u043e\u0434 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u0442.\u0435. \u0432 \u0414\u0410\u041e. \u0421 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e \u0441\u0443\u0442\u0438 \u0431\u0443\u0434\u0435\u0442 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0437\u0430\u043a\u0443\u043f\u0438\u0442\u044c\u0441\u044f \u043c\u0430\u0441\u0441\u043e\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432, \u0434\u0443\u043c\u0430\u044e \u0430\u0443\u043a\u0446\u0438\u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 10k ETH \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0442\u043e\u0440\u0430 \u043b\u0435\u0442.","title":"Proof-of-value: 15%"},{"location":"blog/CYB_and_CBD_distribition/distribution/#proof-of-code-15_1","text":"\u0422\u0435 \u043a\u0442\u043e \u0437\u0430\u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0438\u043b \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0433\u0440\u0443\u0431\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 3 \u0433\u0440\u0443\u043f\u043f\u044b: \u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441 \u0438 \u0438\u0437\u043e\u0431\u0440\u0435\u0442\u0430\u0442\u0435\u043b\u0438: 8.4% \u041a\u043e\u043c\u0430\u043d\u0434\u0430: 3.8% \u0428\u0438\u0440\u043e\u043a\u043e\u0435 \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0435\u0440\u043e\u0432: 2.8% \u041b\u043e\u0433\u0438\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439: \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0440\u0430\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043b\u0430 \u043e\u0446\u0435\u043d\u043a\u0443 \u0441\u0432\u043e\u0438\u0445 \u043e\u043f\u0446\u0438\u043e\u043d\u043e\u0432 \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0441\u0443\u043c\u043c\u044b \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u0438 \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439. \u041a\u043e\u043d\u0433\u0440\u0435\u0441\u0441: 8.4% \u0432 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u044c\u0433\u0430\u0445 \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 10M / 3 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 / 30 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 = ~10k 10M / 3 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 / 30 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 = ~10k \u043d\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446 \u0432 \u0437\u0443\u0431\u044b \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0435 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: 2.8% \u0432 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u044c\u0433\u0430\u0445 \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 10M / 9 \u0447\u0435\u043b\u043e\u0432\u0435\u043a / 18 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 = ~1.8k 10M / 9 \u0447\u0435\u043b\u043e\u0432\u0435\u043a / 18 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 = ~1.8k \u043d\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446 \u0432 \u0437\u0443\u0431\u044b \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0435 \u041a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0435\u0440\u044b: \u0412 \u044d\u0442\u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u0431\u0443\u0434\u0443\u0442 \u0432\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0430\u0443\u043d\u0442\u0438 \u0437\u0430 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430\u043c, \u043d\u043e \u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u043d\u0430 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u0430\u0445, \u0441\u0435\u043a\u044c\u044e\u0440\u0438\u0442\u0438 \u0431\u0430\u0443\u043d\u0442\u0438 \u0438 \u0442\u0434. \u041e\u043a\u043e\u043b\u043e \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u044d\u0442\u043e\u0433\u043e \u043c\u0435\u0448\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e \u043f\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u043c \u043a\u043e\u043d\u0433\u0440\u0435\u0441\u0441\u0430 \u0447\u0435\u0440\u0435\u0437 Gitcoin. \u0412\u0442\u043e\u0440\u0443\u044e \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443 \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0441\u043e\u0437\u0430\u0434\u043d\u0438\u0435 cyberColony . \u0422\u0430\u043a \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u043a\u0438\u0431\u0435\u0440\u041a\u043e\u043b\u043e\u043d\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u044f\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0447\u043b\u0435\u043d\u044b \u043a\u043e\u043d\u0433\u0440\u0435\u0441\u0441\u0430, \u0440\u0438\u0441\u043a\u043e\u0432 \u0434\u043b\u044f \u0434\u0435\u0448\u0435\u0432\u043e\u0439 \u0443\u0442\u0435\u0447\u043a\u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0442\u0430\u043a \u0436\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c, \u043d\u043e \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c.","title":"Proof-of-code: 15%"},{"location":"blog/CYB_and_CBD_distribition/distribution/#proof-of-use-70_1","text":"\u0414\u0435\u0442\u0430\u043b\u0438 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0437\u0430\u043c\u0435\u0442\u043a\u0430\u0445 \u043a \u0440\u0435\u043b\u0438\u0437\u0443, \u043d\u043e \u043b\u044c\u0432\u0438\u043d\u0430\u044f \u0434\u043e\u043b\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e 70% \u0443\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u0434\u0440\u043e\u043f. \u041c\u044b \u0438\u043c\u0435\u0435\u043c \u0435\u0449\u0435 \u0448\u0435\u0441\u0442\u044c \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u043e\u043f. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439. \u041c\u0435\u0436\u0434\u0443 \u0434\u0440\u043e\u043f\u0430\u043c\u0438 \u043c\u044b \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430\u0443\u0447\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0412 \u0438\u0442\u043e\u0433\u0435 \u043c\u044b \u043d\u0430\u0434\u0435\u0435\u043c\u0441\u044f \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u0432 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0435 \u043e\u0434\u043d\u043e\u0433\u043e-\u0434\u0432\u0443\u0445 \u043b\u0435\u0442 \u0437\u0430 \u0441\u0447\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u044e\u0437\u0435\u0440\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u0433\u0434\u0435-\u0442\u043e \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\u0445 \u043a\u0438\u0431\u0435\u0440\u043d\u043e\u043c\u0438\u043a\u0438. \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432\u0437\u044f\u0442\u044b\u043c \u0430\u0434\u0440\u0435\u0441\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u0430\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0432 \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 \u043c\u0435\u0436\u0434\u0443 %.0003 \u0438 %0.000003 \u0447\u0442\u043e \u043f\u0440\u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u0432 10 \u043c\u0443\u043b\u044c\u0442\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 30 \u0431\u0430\u043a\u0441\u0430\u043c\u0438 \u0438 0.3 \u0431\u0430\u043a\u0441\u0430\u043c\u0438. \u042f \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u044e \u0447\u0442\u043e \u044d\u0442\u043e \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u043e\u0432\u0433\u043e \u0434\u0430\u043c\u043f\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u044f \u043e\u0436\u0438\u0434\u0430\u044e, \u0447\u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u044c\u0431\u044e\u0446\u0438\u0438 \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c demand \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c supply \u0434\u0430\u0436\u0435 \u043e\u0442 \u0441\u0442\u0430 \u0442\u044b\u0441\u044f\u0447 \u044e\u0437\u0435\u0440\u043e\u0432. \u0414\u0435\u043b\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u044b\u043d\u043e\u043a \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e \u043e\u043f\u044b\u0442\u0443 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0435\u0442\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u044c\u0441\u044f \u043a 60% \u043e\u0442 \u0441\u0443\u043f\u043b\u0430\u044f. \u041f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0438 \u0447\u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c \u0438\u043b\u0438 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 30% \u0441\u0443\u043f\u043b\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0440\u043e\u0441 \u043d\u0430 ~30% \u0441\u0443\u043f\u043b\u0430\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442 \u044e\u0437\u0435\u0440\u043e\u0432. \u0412 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0435\u0439\u043a \u043e\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f cyberFoundation, \u0430 \u044d\u0442\u043e \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 8% \u0447\u0442\u043e \u0435\u0449\u0435 \u0441\u0438\u043b\u044c\u043d\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0430\u043d\u043d\u0435\u0433\u043e \u0441\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0442\u043e\u043a\u0435\u043d\u044b \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432. \u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u0431\u044b\u0432\u0430\u0442\u044c \u0438 \u043e \u044e\u0437\u0435\u0440\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0432\u0438\u0434\u044f\u0442 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044e\u044e \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u043e\u0432. \u0426\u0435\u043b\u044c \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u042d\u0444\u0438\u0440\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0439 \u0431\u0440\u043e\u0430\u0434\u0431\u0430\u043d\u0434, \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430. \u041c\u0430\u043b\u043e\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0447\u0442\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u043b\u0438\u0431\u043e \u0438\u0437 \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0441 \u0434\u0440\u043e\u043f\u0435 \u0445\u0432\u0430\u0442\u0438\u0442 \u0434\u0440\u043e\u043f\u043d\u0443\u0442\u044b\u0445 \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0441\u0442\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u043c, \u0435\u0441\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u0432 \u0441\u0430\u043c\u043e\u043c \u0437\u0430\u0440\u043e\u0434\u044b\u0448\u0435 \u0441\u0435\u0442\u0438, \u043a\u043e\u0433\u0434\u0430 \u043d\u0430 \u0440\u044b\u043d\u043a\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432 \u0435\u0449\u0435 \u043d\u0435 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0446\u0438\u044f.","title":"Proof-of-use: 70%"},{"location":"blog/CYB_and_CBD_distribition/distribution/#_7","text":"\u041a \u0433\u0435\u043d\u0435\u0437\u0438\u0441\u0443 \u0444\u0430\u0437\u0430 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u0440\u044f\u0434 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0441\u044f, \u0442.\u0435. \u043a\u043e\u0434\u043e\u043c, \u0431\u0430\u0431\u043b\u043e\u043c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0443\u0436\u0435 \u043d\u0438\u043a\u043e\u043c\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0448\u044c :-) \u041f\u043e\u0441\u043b\u0435 \u0413\u0435\u043d\u0435\u0437\u0438\u0441\u0430 \u0441\u0435\u0442\u044c \u043f\u0435\u0440\u0435\u0439\u0434\u0435\u0442 \u0432 \u0440\u0435\u0436\u0438\u043c, \u043a\u043e\u0433\u0434\u0430 \u043d\u043e\u0432\u044b\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430\u043c\u0438. \u0421 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0431\u043b\u043e\u043a \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432: 1 000 000 000 CYB. \u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u043c \u043a\u043e\u043d\u0441\u0435\u043d\u0441\u0443\u0441\u043e\u043c \u043f\u043e \u043c\u043e\u043d\u0435\u0442\u0430\u0440\u043d\u043e\u0439 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0435. \u041c\u044b \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043f\u043e\u0442\u043e\u043c\u0443-\u0447\u0442\u043e \u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043c\u0430\u0440\u0436\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0435\u0440\u0435\u0442\u0435\u043a\u0430\u0442\u044c \u043a \u0442\u0435\u043c, \u043a\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e. \u041d\u0430\u0448 \u0433\u0440\u0430\u0444 \u0437\u043d\u0430\u043d\u0438\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0435\u0441\u043b\u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043d\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430\u043c, \u0447\u0442\u043e \u0438\u0445 \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u0438 \u0440\u0438\u0441\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0432\u0435\u0447\u043d\u043e\u0439 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u0438. \u0427\u0435\u043c \u0434\u043e\u043b\u044c\u0448\u0435 \u0431\u0443\u0434\u0435\u0442 \u0436\u0438\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u043d\u044c\u0448\u0430\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c.","title":"\u041f\u043e\u0441\u043b\u0435 \u0413\u0435\u043d\u0435\u0437\u0438\u0441\u0430"},{"location":"blog/CYB_and_CBD_distribition/distribution/#_8","text":"\u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438 \u043c\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u043e\u0431\u043e\u0439\u0442\u0438\u0441\u044c \u0431\u0435\u0437 ERC-20 \u0442\u043e\u043a\u0435\u043d\u0430, \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0439 \u0440\u044f\u0434 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432, \u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u043d \u043d\u0430\u043c \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043d\u0443\u0436\u0435\u043d. \u041d\u0430 ERC-20 \u0442\u043e\u043a\u0435\u043d\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0434\u0435\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u043e\u043d\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0438 \u043f\u043e\u0434\u0440\u044f\u0434\u0447\u0438\u043a\u0430\u043c \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043a\u0430 \u0441\u0435\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043d\u0430 100% \u0420\u0430\u0437\u0432\u0438\u0442\u0438\u0435 \u043b\u0438\u043a\u0432\u0438\u0434\u043d\u043e\u0441\u0442\u0438 CYB \u0442\u043e\u043a\u0435\u043d\u0430 - \u0434\u043e\u043b\u0433\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441. \u0428\u0430\u0433\u0438 \u0434\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0442\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0443\u0441\u0438\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442. \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a Academia \u0438 Chaingear \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0438\u043b\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u044b \u043d\u0430 \u044d\u0444\u0438\u0440\u0435. \u041c\u044b \u0445\u043e\u0442\u0438\u043c \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438 \u043d\u0430 Gitcoin, \u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u044b ERC-20 \u0442\u043e\u043a\u0435\u043d\u044b \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0435 \u043a\u0435\u0448\u0435\u0432\u044b\u0445 \u0441\u0442\u0443\u043c\u0443\u043b\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u0435\u0440\u043e\u0432. \u041c\u044b \u043b\u044e\u0431\u0438\u043c \u044d\u0444\u0438\u0440, \u0438 \u0445\u043e\u0442\u0438\u043c \u0441 \u043d\u0438\u043c \u0436\u0438\u0442\u044c :-) \u0417\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0410\u0440\u0430\u0433\u043e\u043d, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u0447\u0435\u0441\u0430\u043b\u0438\u0441\u044c \u0440\u0443\u043a\u0438 \u043f\u043e\u0442\u0440\u043e\u0433\u0430\u0442\u044c \u0410\u0440\u0430\u0433\u043e\u043d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0431\u0430\u0437\u0435 CBD \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u044d\u0444\u0438\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0447\u0430\u0441\u0442\u044c \u0434\u0438\u0441\u0442\u0440\u0438\u044c\u0431\u044e\u0446\u0438\u0438 CYB \u0434\u0430 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b 100% \u0431\u0430\u0431\u043b\u0430 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0435\u043c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0440\u0430\u0439\u043d\u0435 \u0441\u043e\u0431\u043b\u0430\u0437\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0442.\u043a. \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u0443\u044e \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0443\u0441\u043f\u0435\u0445 TheDAO. \u0412 \u0438\u0442\u043e\u0433\u0435 \u0443 \u043d\u0430\u0441 \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c CBD \u0442\u043e\u043a\u0435\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u043a\u0438\u043c\u0438 \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u043d\u0430 \u044d\u0444\u0438\u0440\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0441\u0443\u043f\u0435\u0440\u0441\u0438\u043b\u044b \u0438 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b :-) \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d\u044b \u043d\u0430 \u044d\u0444\u0438\u0440\u0435 \u043a\u0430\u043a \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u044d\u0444\u0444\u0435\u043a\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438, \u043d\u0435\u0436\u0435\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0443\u043f\u0435\u0440\u0441\u0438\u043b\u0430. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0443\u043f\u0435\u0440\u0441\u0438\u043b\u0430 \u044d\u0442\u043e CYB \u0442.\u043a. \u043e\u043d\u0438 \u0434\u0430\u044e\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u041d\u043e \u043c\u044b \u043d\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u043c \u0438\u0437\u0431\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043e\u0442 CBD \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u042d\u0442\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0430\u0442\u044c \u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043a\u0440\u0443\u0442\u044b\u0445 \u0448\u0442\u0443\u043a.","title":"\u041f\u043e\u0447\u0435\u043c\u0443 \u0432\u0441\u0435 \u0442\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u0434\u0432\u0430 \u0442\u043e\u043a\u0435\u043d\u0430?"},{"location":"blog/CYB_and_CBD_distribition/distribution/#_9","text":"\u041f\u0440\u0438 \u0442\u043e\u043c, \u0447\u0442\u043e \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0433\u043a\u0430 \u043c\u0443\u0434\u0440\u0435\u043d\u043e\u0439 \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0421\u0430\u0442\u043e\u0448\u0438-\u0441\u0442\u0430\u0439\u043b, \u043e\u043d\u0430 \u0440\u0435\u0448\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u044f\u0438\u0446\u0430, \u0434\u0440\u0430\u043a\u043e\u043d\u043e\u0432 \u0438 \u0431\u0430\u0431\u043b\u0430. \u041f\u043e\u0441\u043b\u0435 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0441\u0435\u0442\u0438 merkle \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432, \u043a\u043b\u044e\u0447\u0435\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0435\u043d\u0441\u0443\u0441 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u0434\u043b\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0430 \u0437\u043d\u0430\u043d\u0438\u0439. \u0420\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u044d\u0442\u0443 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u044c\u044e\u0446\u0438\u044e \u043c\u044b \u043f\u043e\u0434\u0443\u043c\u0430\u043b\u0438 \u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0432\u0435\u0449\u0430\u0445: \u0431\u0430\u043b\u0430\u043d\u0441 \u0440\u0438\u0441\u043a\u043e\u0432 \u0432\u043e\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 \u043e\u0431\u044a\u0435\u043c\u0435 \u0440\u043e\u0432\u043d\u043e \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u0430 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u044b\u043c\u0438 \u0441\u0442\u0438\u043c\u0443\u043b\u0430\u043c\u0438 \u041c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u0448\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435\u0442 merkle \u0441\u0442\u0430\u0434\u0438\u0438 \u043d\u0430 50 \u043c\u043b\u043d \u0431\u043b\u043e\u043a\u0435. \u041f\u0440\u0438 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 10 \u043b\u0435\u0442 \u0434\u043e\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442 ~13.4%, \u0430 \u0447\u0435\u0440\u0435\u0437 30 \u043b\u0435\u0442 - \u0432\u0441\u0435\u0433\u043e 5.7%.","title":"\u0414\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u0430\u044f \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0430"},{"location":"blog/cyb_tutorial_eth_local_node/eth_node/","text":"How to add own ETH node to your Cyb \u00b6 by @savetheales Hi! As we know from an earlier post we need 3 green lights on the right side of the footer. Today we'll add ETH node to Cyb. We'll use Parity node as an example, but you can try Geth node if you feel strong enough. Installing Parity-node \u00b6 The easiest way to install the stable version of Parity is Homebrew . Run this command in terminal: brew tap paritytech/paritytech brew install parity Additional methods you can explore here , but I still recommend you Homebrew :) Syncing \u00b6 After successfull installation run: parity --jsonrpc-cors=\"all\" --jsonrpc-apis=\"all\" --jsonrpc-interface=all this command starts syncing of Parity. Actually, the node is available for use by address http://127.0.0.1:8545 it can sync for 48 hours and more, it depends on your hardware and internet connection. The total size of the synced node at that moment is approximately 80 Gb. After syncing you should see something like this: As you see Syncing is switched to Imported . It means that the node in a valid state. Adding port to Cyb \u00b6 Launch Cyb, latest version you can download here if you still not have it :). Type settings.cyb in a search field or click on a gear at the top right side. You need to insert this address http://127.0.0.1:8545 opposite ETH NODE like this: That's it ;) Now you run your own node and use it with Cyb ;) 2 of 3, move on! ;)","title":"How to add own ETH node to your Cyb"},{"location":"blog/cyb_tutorial_eth_local_node/eth_node/#how-to-add-own-eth-node-to-your-cyb","text":"by @savetheales Hi! As we know from an earlier post we need 3 green lights on the right side of the footer. Today we'll add ETH node to Cyb. We'll use Parity node as an example, but you can try Geth node if you feel strong enough.","title":"How to add own ETH node to your Cyb"},{"location":"blog/cyb_tutorial_eth_local_node/eth_node/#installing-parity-node","text":"The easiest way to install the stable version of Parity is Homebrew . Run this command in terminal: brew tap paritytech/paritytech brew install parity Additional methods you can explore here , but I still recommend you Homebrew :)","title":"Installing Parity-node"},{"location":"blog/cyb_tutorial_eth_local_node/eth_node/#syncing","text":"After successfull installation run: parity --jsonrpc-cors=\"all\" --jsonrpc-apis=\"all\" --jsonrpc-interface=all this command starts syncing of Parity. Actually, the node is available for use by address http://127.0.0.1:8545 it can sync for 48 hours and more, it depends on your hardware and internet connection. The total size of the synced node at that moment is approximately 80 Gb. After syncing you should see something like this: As you see Syncing is switched to Imported . It means that the node in a valid state.","title":"Syncing"},{"location":"blog/cyb_tutorial_eth_local_node/eth_node/#adding-port-to-cyb","text":"Launch Cyb, latest version you can download here if you still not have it :). Type settings.cyb in a search field or click on a gear at the top right side. You need to insert this address http://127.0.0.1:8545 opposite ETH NODE like this: That's it ;) Now you run your own node and use it with Cyb ;) 2 of 3, move on! ;)","title":"Adding port to Cyb"},{"location":"blog/cyb_tutorial_ipfs_links/how_to_open_ipfs_hash/","text":"How to open ipfs link using Cyb? \u00b6 by @savetheales Hi everyone! Today I intend to show you how to open web3 link with our web3 browser. If you have read our last post you should have noticed IPFS hash at back matter. The thing is that we have web3 blog :) First of all download latest version of our \u0421yb and install it. Next click on a \u0421yb icon. You can see something like this This is the Root Registry by the way, but we will talk later about this. It is not so important, which page is opened, we need just to find search field at the top of the page. So, let's copy ipfs hash from previous post , paste it in a search field and attach .ipfs to the and of hash. Alright! If everything is correct the following raw markdown file will be displayed. :) As you see this is current post which is broadcasting in ipfs and had signed by me ;) You can also can following hashes as homework: QmVD5L3ZX6KW7cJPKu2fn8QkN1xLuhR7rvpUGVU3SoPg8V QmPcjrmWDtunvrkX1tiGcbT4ZsE8JFzAgqdPKK2Hmc6B8A QmaXfCR86ZL6gRXK8knMoVCzQSFMzwsYcJnT7DE68g5QY2 QmPAz8iuoJWHr4jrvfXZ7pDycV1kPTyPVBrDWDj3353JAg Moreover now you can explore the Internet and find hashes of content you are interested in :) In the next post we will connect local ipfs node to our \u0421yb ;) Subscribe for our blogs: Steemit https://steemit.com/@cybercongress Reddit https://www.reddit.com/r/cybercongress/ Twitter https://twitter.com/cyber_devs Telegram channel https://t.me/cybercongress devChat https://t.me/fuckgoogle","title":"How to open ipfs link using Cyb?"},{"location":"blog/cyb_tutorial_ipfs_links/how_to_open_ipfs_hash/#how-to-open-ipfs-link-using-cyb","text":"by @savetheales Hi everyone! Today I intend to show you how to open web3 link with our web3 browser. If you have read our last post you should have noticed IPFS hash at back matter. The thing is that we have web3 blog :) First of all download latest version of our \u0421yb and install it. Next click on a \u0421yb icon. You can see something like this This is the Root Registry by the way, but we will talk later about this. It is not so important, which page is opened, we need just to find search field at the top of the page. So, let's copy ipfs hash from previous post , paste it in a search field and attach .ipfs to the and of hash. Alright! If everything is correct the following raw markdown file will be displayed. :) As you see this is current post which is broadcasting in ipfs and had signed by me ;) You can also can following hashes as homework: QmVD5L3ZX6KW7cJPKu2fn8QkN1xLuhR7rvpUGVU3SoPg8V QmPcjrmWDtunvrkX1tiGcbT4ZsE8JFzAgqdPKK2Hmc6B8A QmaXfCR86ZL6gRXK8knMoVCzQSFMzwsYcJnT7DE68g5QY2 QmPAz8iuoJWHr4jrvfXZ7pDycV1kPTyPVBrDWDj3353JAg Moreover now you can explore the Internet and find hashes of content you are interested in :) In the next post we will connect local ipfs node to our \u0421yb ;) Subscribe for our blogs: Steemit https://steemit.com/@cybercongress Reddit https://www.reddit.com/r/cybercongress/ Twitter https://twitter.com/cyber_devs Telegram channel https://t.me/cybercongress devChat https://t.me/fuckgoogle","title":"How to open ipfs link using Cyb?"},{"location":"blog/cyb_tutorial_ipfs_local_node/ipfs_local_node/","text":"How to add custom ipfs node to your Cyb \u00b6 by @savetheales \u2190 Previous post Hey everyone! Today we'll make the glorious step into adulthood! The greatest level of Cyb using is when you have 3 greenlights on the right side of footer ;) Cyb uses color indication to show your connection status. Green indicator means that you have connection to local node, yellow one is for remote node and red one is for no connection at all. So today we intend to add local IPFS node to our Cyb. IPFS installing First of all we need to install and initiate IPFS node. If you've already did it, you can skip this section. The easiest way to install IPFS is homebrew . All you need is just to run in your terminal brew install ipfs , and then run ipfs init commands. Other methods you can explore here , but I recommend you homebrew :) Just for test you can write ipfs cat /ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme and if you see following text, everything is alright. ;) Start IPFS daemon So it's time to go online now. Write in your terminal ipfs daemon wait a few seconds. Now you should see Good job! The last step is adding local IPFS node to Cyb. 3.1 Download latest release according to your platform. 3.2 Type in search field settings.cyb and press Enter . You should see something like this: settings.cyb means that you open settings page in .\u0441yb app (same as Qm.....Dvd.ipfs command opens ipfs hash in app .ipfs . 3.3 Here you can see addresses of your connections. Default connection type is for our cybernodes. So let's change it!. Put this http://127.0.0.1:8080 in IPFS connection filed and click on update button. If everything is correct you should see: Awesome!!! Now you can use your local IPFS node in Cyb! Welcome to your adult life! In the next post we will learn how to import Metamask account in Cyb;) Subscribe for our blogs: Steemit https://steemit.com/@cybercongress Reddit https://www.reddit.com/r/cybercongress/ Twitter https://twitter.com/cyber_devs Telegram channel https://t.me/cybercongress devChat https://t.me/fuckgoogle \u2190 Previous post","title":"How to add own ipfs node to your Cyb"},{"location":"blog/cyb_tutorial_ipfs_local_node/ipfs_local_node/#how-to-add-custom-ipfs-node-to-your-cyb","text":"by @savetheales \u2190 Previous post Hey everyone! Today we'll make the glorious step into adulthood! The greatest level of Cyb using is when you have 3 greenlights on the right side of footer ;) Cyb uses color indication to show your connection status. Green indicator means that you have connection to local node, yellow one is for remote node and red one is for no connection at all. So today we intend to add local IPFS node to our Cyb. IPFS installing First of all we need to install and initiate IPFS node. If you've already did it, you can skip this section. The easiest way to install IPFS is homebrew . All you need is just to run in your terminal brew install ipfs , and then run ipfs init commands. Other methods you can explore here , but I recommend you homebrew :) Just for test you can write ipfs cat /ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme and if you see following text, everything is alright. ;) Start IPFS daemon So it's time to go online now. Write in your terminal ipfs daemon wait a few seconds. Now you should see Good job! The last step is adding local IPFS node to Cyb. 3.1 Download latest release according to your platform. 3.2 Type in search field settings.cyb and press Enter . You should see something like this: settings.cyb means that you open settings page in .\u0441yb app (same as Qm.....Dvd.ipfs command opens ipfs hash in app .ipfs . 3.3 Here you can see addresses of your connections. Default connection type is for our cybernodes. So let's change it!. Put this http://127.0.0.1:8080 in IPFS connection filed and click on update button. If everything is correct you should see: Awesome!!! Now you can use your local IPFS node in Cyb! Welcome to your adult life! In the next post we will learn how to import Metamask account in Cyb;) Subscribe for our blogs: Steemit https://steemit.com/@cybercongress Reddit https://www.reddit.com/r/cybercongress/ Twitter https://twitter.com/cyber_devs Telegram channel https://t.me/cybercongress devChat https://t.me/fuckgoogle \u2190 Previous post","title":"How to add custom ipfs node to your Cyb"},{"location":"blog/cyb_tutorial_metamask_import/metamask_import/","text":"How to import ETH wallet from Metamask to Cyb \u00b6 by @savetheales Hi everyone! Today we'll take one giant step to regular Cyb using. At this time import of account is available just with the private key. All private keys are encrypted and stored at local storage. Disclaimer: Cyb in Ethereum Mainnet may not be secure yet. We recommend to operate accounts with small balance at your own risk. After successful installation and launching of the latest version Cyb you should see the screen like this: Type in a search field wallet.cyb or click on the wallet button. Cyb will offer you to create the password. Create and confirm it. And PLEASE store that. This is your key to Cyb. Click Create . Cyb had created the ETH account already, but we want to import own account from metamask. So, go to your browser with a metamask extension, in my case, this is FireFox and click on a metamask icon. Click on a ... and then Expand View Click on DETAILS button. After that click on EXPORT PRIVATE KEY button, before metamask presented your private key it asks you for a metamask password. Type it. Now you can see: Copy your private key to clipboard and go back to pure web3 browser ;) I mean Cyb. Click on IMPORT ACCOUNT tab and paste your private key into the requested field. Your account should be visible now in your wallet. To activate an account address and use it for transactions click on MAKE MAIN button Done! Now your operations will go through this account!","title":"How to import ETH wallet from Metamask to Cyb"},{"location":"blog/cyb_tutorial_metamask_import/metamask_import/#how-to-import-eth-wallet-from-metamask-to-cyb","text":"by @savetheales Hi everyone! Today we'll take one giant step to regular Cyb using. At this time import of account is available just with the private key. All private keys are encrypted and stored at local storage. Disclaimer: Cyb in Ethereum Mainnet may not be secure yet. We recommend to operate accounts with small balance at your own risk. After successful installation and launching of the latest version Cyb you should see the screen like this: Type in a search field wallet.cyb or click on the wallet button. Cyb will offer you to create the password. Create and confirm it. And PLEASE store that. This is your key to Cyb. Click Create . Cyb had created the ETH account already, but we want to import own account from metamask. So, go to your browser with a metamask extension, in my case, this is FireFox and click on a metamask icon. Click on a ... and then Expand View Click on DETAILS button. After that click on EXPORT PRIVATE KEY button, before metamask presented your private key it asks you for a metamask password. Type it. Now you can see: Copy your private key to clipboard and go back to pure web3 browser ;) I mean Cyb. Click on IMPORT ACCOUNT tab and paste your private key into the requested field. Your account should be visible now in your wallet. To activate an account address and use it for transactions click on MAKE MAIN button Done! Now your operations will go through this account!","title":"How to import ETH wallet from Metamask to Cyb"},{"location":"blog/dragons_with_cyb/dragons/","text":"How to play in Dragonereum with Cyb \u00b6 by @savetheales and @xhipster This article for Dragonereum players who was faced with trouble around Chrome, Mozilla, Opera + Metamask using. We want to explain why and how to play Dragonereum with a pure web3 browser. The first question we want to address is why someone may need to use another browser instead of Chrome? Speed \u00b6 The truth is that real blockchain gaming is brand new thing. We know that gaming require fast interactions. Blockchain interactions are slow. There is only one way to reduce issues of slow interactions in any ethereum-based application: to have a full Ethereum node It weight some gigs, it eat some bandwidth, it eats processor for verifications. But there is one very important thing: In games like this relation of write requests to read requests is roughly about 1/100. E.g. if you do 100 tx you will probably do 10000 request. That is a lot. Hence it is better do this read requests using local verified state privately. I promise that will save you a lot of time and bring joy, gameplay and security. For free you will have tough backend to web3 backbone right on your machine. Through the history amazing gaming required better computers. Dragonereum can not be cheap by design (not yet). So if you want to become kinda professional Dragonereum gamer its better you to have a good computer with full Ethereum node. Of course you will always be able to use some workarounds (like Infura or friends or some good folks from the game) but you always must understand that you can have better experience with better computer and broadband. I think that low comfort level is 512 GB SSD, 32 GB RAM and not so fast but stable 1 mBit connection. Average CPU and GPU is perfectly ok. Signing experience \u00b6 That ugly Metamask window. You perfectly can live with it if you do couple of confirmations per day, but it become we biggest pain in the ass if you do 100 transactions per day. It disrupts experience of Dragon Master. Cyb signing experience right now is much more pleasant, but in future will become even better. Reliability \u00b6 Usually gamers rely on admins to distribute the application itself. With chrome you rely on DNS. Cyb is built on top of IPFS: radically new way of file distribution across the globe. Using Cyb you will continue to play even if the site dragonerium.io one day disappears! There is nobody between you and the game! Wow! You only need to know content address of a game like this QmSGdNQFXvKhWpeGbDjWDF8hH8ujz3C5FyJhX3w7KLfk9a or use something like dragonereum.eth (to be implemented in future) and have connection to your Ethereum node! That is! you will be able to play without any exceptions. Okey, now we can explain how to do it. Please be patient. Technology is new and nothing works perfectly yet. C'mon, lets do it! 1. Launch Cyb \u00b6 First of all download and install the latest release of Cyb and don't forget about star ;) You should see something like this: 2. Create password \u00b6 Click on the wallet and create a password for Cyb. Remember this password to avoid balance missing. 3. Backup or import private key \u00b6 For playing in Dragonereum you need ETH account. Cyb created it already. You can use it or import yours. IF YOU DECIDE TO PLAY WITH PROVIDED ACCOUNT YOU MUST BACKUP PRIVATE KEY. IF NOT => FORGET ABOUT YOUR DRAGONS! YOU STORE IT, NOT CYB! For example: I want to import my account from Metamask. So I export private key from Metamask, here is manual how to do it. Then click import account button in Cyb, insert private key and after few second I can see my account: Don't worry about balance value! We'll fix it. Click on MAKE MAIN button to make this account active. 4. Establish connection \u00b6 Follow this articles: - IPFS node in Cyb - ETH node in cyb Don't forget about the UPDATE button. Click on the gear button at the right top part of the screen. You must see this: If 2 of 3 lighting green you made it! 5. Go back to your wallet. Now balances are valid. \u00b6 Play! \u00b6 It's Dragons time! Now put following hash QmSGdNQFXvKhWpeGbDjWDF8hH8ujz3C5FyJhX3w7KLfk9a.ipfs in the search field and press Enter . here is the Magic! Don't forget to click the heart to pin game to side menu. Good luck Dragon Master! P.S. Cyb in Ethereum Mainnet may not be secure yet. We recommend operating accounts with small balance at your own risk.","title":"How to play Dragonereum on Cyb"},{"location":"blog/dragons_with_cyb/dragons/#how-to-play-in-dragonereum-with-cyb","text":"by @savetheales and @xhipster This article for Dragonereum players who was faced with trouble around Chrome, Mozilla, Opera + Metamask using. We want to explain why and how to play Dragonereum with a pure web3 browser. The first question we want to address is why someone may need to use another browser instead of Chrome?","title":"How to play in Dragonereum with Cyb"},{"location":"blog/dragons_with_cyb/dragons/#speed","text":"The truth is that real blockchain gaming is brand new thing. We know that gaming require fast interactions. Blockchain interactions are slow. There is only one way to reduce issues of slow interactions in any ethereum-based application: to have a full Ethereum node It weight some gigs, it eat some bandwidth, it eats processor for verifications. But there is one very important thing: In games like this relation of write requests to read requests is roughly about 1/100. E.g. if you do 100 tx you will probably do 10000 request. That is a lot. Hence it is better do this read requests using local verified state privately. I promise that will save you a lot of time and bring joy, gameplay and security. For free you will have tough backend to web3 backbone right on your machine. Through the history amazing gaming required better computers. Dragonereum can not be cheap by design (not yet). So if you want to become kinda professional Dragonereum gamer its better you to have a good computer with full Ethereum node. Of course you will always be able to use some workarounds (like Infura or friends or some good folks from the game) but you always must understand that you can have better experience with better computer and broadband. I think that low comfort level is 512 GB SSD, 32 GB RAM and not so fast but stable 1 mBit connection. Average CPU and GPU is perfectly ok.","title":"Speed"},{"location":"blog/dragons_with_cyb/dragons/#signing-experience","text":"That ugly Metamask window. You perfectly can live with it if you do couple of confirmations per day, but it become we biggest pain in the ass if you do 100 transactions per day. It disrupts experience of Dragon Master. Cyb signing experience right now is much more pleasant, but in future will become even better.","title":"Signing experience"},{"location":"blog/dragons_with_cyb/dragons/#reliability","text":"Usually gamers rely on admins to distribute the application itself. With chrome you rely on DNS. Cyb is built on top of IPFS: radically new way of file distribution across the globe. Using Cyb you will continue to play even if the site dragonerium.io one day disappears! There is nobody between you and the game! Wow! You only need to know content address of a game like this QmSGdNQFXvKhWpeGbDjWDF8hH8ujz3C5FyJhX3w7KLfk9a or use something like dragonereum.eth (to be implemented in future) and have connection to your Ethereum node! That is! you will be able to play without any exceptions. Okey, now we can explain how to do it. Please be patient. Technology is new and nothing works perfectly yet. C'mon, lets do it!","title":"Reliability"},{"location":"blog/dragons_with_cyb/dragons/#1-launch-cyb","text":"First of all download and install the latest release of Cyb and don't forget about star ;) You should see something like this:","title":"1. Launch Cyb"},{"location":"blog/dragons_with_cyb/dragons/#2-create-password","text":"Click on the wallet and create a password for Cyb. Remember this password to avoid balance missing.","title":"2. Create password"},{"location":"blog/dragons_with_cyb/dragons/#3-backup-or-import-private-key","text":"For playing in Dragonereum you need ETH account. Cyb created it already. You can use it or import yours. IF YOU DECIDE TO PLAY WITH PROVIDED ACCOUNT YOU MUST BACKUP PRIVATE KEY. IF NOT => FORGET ABOUT YOUR DRAGONS! YOU STORE IT, NOT CYB! For example: I want to import my account from Metamask. So I export private key from Metamask, here is manual how to do it. Then click import account button in Cyb, insert private key and after few second I can see my account: Don't worry about balance value! We'll fix it. Click on MAKE MAIN button to make this account active.","title":"3. Backup or import private key"},{"location":"blog/dragons_with_cyb/dragons/#4-establish-connection","text":"Follow this articles: - IPFS node in Cyb - ETH node in cyb Don't forget about the UPDATE button. Click on the gear button at the right top part of the screen. You must see this: If 2 of 3 lighting green you made it!","title":"4. Establish connection"},{"location":"blog/dragons_with_cyb/dragons/#5-go-back-to-your-wallet-now-balances-are-valid","text":"","title":"5. Go back to your wallet. Now balances are valid."},{"location":"blog/dragons_with_cyb/dragons/#play","text":"It's Dragons time! Now put following hash QmSGdNQFXvKhWpeGbDjWDF8hH8ujz3C5FyJhX3w7KLfk9a.ipfs in the search field and press Enter . here is the Magic! Don't forget to click the heart to pin game to side menu. Good luck Dragon Master! P.S. Cyb in Ethereum Mainnet may not be secure yet. We recommend operating accounts with small balance at your own risk.","title":"Play!"},{"location":"blog/gitcoin_wf_announcement/announce/","text":">gitcoin lovers \u00b6 by @savetheales Hi everyone! In our agreement phrase \"open-source\" appears for six times! Not bad for 2 pages of agreement, isn't it? We believe in this mighty power and have no vision of evolution without it. Today I want to provide insights into our communication with open-source community and collaboration process. A little bit more than half of the year ago we learned gitcoin . For more details you can explore their platform. I just want to tell that we really excite with it. This is solution around incentive problem in open source and it really works! So after few tests we have developed gitcoin process where we try to define rules of the game where our team is motivated to involve and gitcoin contributers have incentive to jump the boat. This is not final solution. It must stand the test of time and iterations but we sure that it should work! What does it mean for our community? We want to pay you for your contribution! We constantly fund our issues on gitcoin and attach good description for them with project state and user stories. See the list below article as a proof. We try to answer to comments regular in issues and in our devChat . Honestly for now we are selective in issues that we fund. We are looking for organic evolution that is why our growth happens little by little. It's doesn't mean that we ban funds for all feature requests by community and concentrating on our issues only. Exactly no! We just leave prioritize with issues to us for now. But if you have abilities to fund feature request for your personal - do it! I believe that it will make great boost for our organic growth. :) Another important point is that we are looking for hiring through gitcoin. Yes we need passionate and young souls for our projects. But we refused to standard corporative hiring process. For us it is really long, boring and power-hungry. With gitcoin we kill two birds with one stone. Actually this is another killer feature from gitcoin :) and that is why we love it :))) Every two weeks I'll write about gitcoin and our states in our blogs. There will be short articles with good funded issues around all communities, short analytics new features observes and so on. As I promised... List of opened issues for 2018/11/16: - Decreasing Gas Consumption, Audit Our page on gitcoin with full list of issues So let's build our open-source community and let's do it with incentive :) original-cid: QmPQz9DTMTKrW3vBs19wt3xn2zaecq68VbUBfA5Nw7a88v signed-from: 0x00CA47db1BE92C1072e973fd8DC4A082f7d70214 proof-of-existence: 0xd7199550ba67bb5588489d747ec6c552554d8157c81fd0f607db774dda7f4329","title":"\\> gitcoin lovers"},{"location":"blog/gitcoin_wf_announcement/announce/#gitcoin-lovers","text":"by @savetheales Hi everyone! In our agreement phrase \"open-source\" appears for six times! Not bad for 2 pages of agreement, isn't it? We believe in this mighty power and have no vision of evolution without it. Today I want to provide insights into our communication with open-source community and collaboration process. A little bit more than half of the year ago we learned gitcoin . For more details you can explore their platform. I just want to tell that we really excite with it. This is solution around incentive problem in open source and it really works! So after few tests we have developed gitcoin process where we try to define rules of the game where our team is motivated to involve and gitcoin contributers have incentive to jump the boat. This is not final solution. It must stand the test of time and iterations but we sure that it should work! What does it mean for our community? We want to pay you for your contribution! We constantly fund our issues on gitcoin and attach good description for them with project state and user stories. See the list below article as a proof. We try to answer to comments regular in issues and in our devChat . Honestly for now we are selective in issues that we fund. We are looking for organic evolution that is why our growth happens little by little. It's doesn't mean that we ban funds for all feature requests by community and concentrating on our issues only. Exactly no! We just leave prioritize with issues to us for now. But if you have abilities to fund feature request for your personal - do it! I believe that it will make great boost for our organic growth. :) Another important point is that we are looking for hiring through gitcoin. Yes we need passionate and young souls for our projects. But we refused to standard corporative hiring process. For us it is really long, boring and power-hungry. With gitcoin we kill two birds with one stone. Actually this is another killer feature from gitcoin :) and that is why we love it :))) Every two weeks I'll write about gitcoin and our states in our blogs. There will be short articles with good funded issues around all communities, short analytics new features observes and so on. As I promised... List of opened issues for 2018/11/16: - Decreasing Gas Consumption, Audit Our page on gitcoin with full list of issues So let's build our open-source community and let's do it with incentive :) original-cid: QmPQz9DTMTKrW3vBs19wt3xn2zaecq68VbUBfA5Nw7a88v signed-from: 0x00CA47db1BE92C1072e973fd8DC4A082f7d70214 proof-of-existence: 0xd7199550ba67bb5588489d747ec6c552554d8157c81fd0f607db774dda7f4329","title":"&gt;gitcoin lovers"},{"location":"blog/port-forwarding-guide/port_forwarding_guide/","text":"Decentralization must be decentralized \u00b6 January 3, 2019, we've launched first public testnet Euler-3. Since this time we have 3 relaunches and much more we'll has in the future. Thanks to our testers and validators we're finding and fixing new bugs every day. But now one fundamental and critical bug is not fixed yet. Currently, we have just 2 seed nodes and they able to upload data and provide connection to other nodes. Unfortunately, this is not about decentralization. An obvious problem of decentralization is that no entity has a global vision of the system, and there is no central authority to direct nodes in making optimal decisions with regard to software updates, routing, or solving consensus. This makes the availability of a decentralized network more difficult to maintain, a factor significant enough to contribute to the failure of a system. By the way, a huge part of disconnections and, as result, validators jailing happens by this reason. Cyberd cli can\u2019t automatically configure your router to open port 26656 , you will need to manually configure your router. We\u2019ve can't make the following instructions to cover all router models; if you need specific help with your router, please ask for help on our devChat . Enabling inbound connections requires two steps: Giving your computer a static (unchanging) internal IP address by configuring the Dynamic Host Configuration Protocol (DHCP) on your router. Forwarding inbound connections from the Internet through your router to your computer where cyberd container can process them. Editing cyberd configuration file. Configuring DHCP \u00b6 In order for your router to direct incoming port 26656 connections to your computer, it needs to know your computer\u2019s internal IP address. However, routers usually give computers dynamic IP addresses that change frequently, so we need to ensure your router always gives your computer the same internal IP address. Start by logging into your router\u2019s administration interface. Most routers can be configured using one of the following URLs, so keep clicking links until you find one that works. If none work, consult your router\u2019s manual. http://192.168.0.1 (some Linksys/Cisco models) http://192.168.1.1 (some D-Link/Netgear models) http://192.168.2.1 (some Belkin/SMC models) http://192.168.123.254 (some US Robotics models) http://10.0.1.1 (some Apple models) Upon connecting, you will probably be prompted for a username and password. If you configured a password, enter it now. If not, the Router Passwords site provides a database of known default username and password pairs. After logging in, you want to search your router\u2019s menus for options related to DHCP, the Dynamic Host Configuration Protocol. These options may also be called Address Reservation. In the reservation configuration, some routers will display a list of computers and devices currently connected to your network, and then let you select a device to make its current IP address permanent. If that\u2019s the case, find the computer running cyberd container in the list, select it, and add it to the list of reserved addresses. Make a note of its current IP address\u2014we\u2019ll use the address in the next section. Other routers require a more manual configuration. For these routers, you will need to look up the fixed address (MAC address) for your computer\u2019s network card and add it to the list. Open a terminal and type ifconfig. Find the result that best matches your connection\u2014a result starting with wlan indicates a wireless connection. Find the field that starts with HWaddr and copy the immediately following field that looks like 01:23:45:67:89:ab . Use that value in the instructions below. Once you have the MAC address, you can fill it into to your router\u2019s manual DHCP assignment table. Also, choose an IP address and make a note of it for the instructions in the next subsection. After entering this information, click the Add or Save button. Then reboot your computer to ensure it gets assigned the address you selected and proceed to the Port Forwarding instructions below. Port Forwarding \u00b6 For this step, you need to know the local IP address of the computer running cyberd container. You should have this information from configuring the DHCP assignment table in the subsection above. Login to your router using the same steps described near the top of the DHCP subsection. Look for an option called Port Forwarding, Port Assignment, or anything with \u201cPort\u201d in its name. On some routers, this option is buried in an Applications & Gaming menu. The port forwarding settings should allow you to map an external port on your router to the \u201cinternal port\u201d of a device on your network. Both the external port and the internal port should be 26656 for cyberd container. Make sure the IP address you enter is the same one you configured in the previous subsection. After filling in the details for the mapping, save the entry. You should not need to restart anything. Just ask us in devChat about successful connection. If you still can\u2019t connect and you use a firewall, you probably need to change your firewall settings. Ubuntu comes with its firewall disabled by default, but if you have enabled it, see the Ubuntu wiki page for information about adding port forwarding rules. If something else went wrong, it\u2019s probably a problem with your router configuration. Re-read the instructions above to see if you missed anything, search the web for help with \u201cport forwarding\u201d, and ask for help on devChat . Configuring cyberd \u00b6 Go to cyberd daemon folder, then go to config folder and open config.toml file for editing. Find peer to peer configuration options section and edit external_address variable with your IP address and port 26656 Restart cyberd container. We call to you, validators, with a proposal to forwarding port 26656 and make you validator-nodes available to the incoming connection. Unfortunately, we can't provide all guides for port forwarding because of they different for each router. But if you faced on with some troubles feel free to contact us in our devChat .","title":"Decentralization must be decentralized"},{"location":"blog/port-forwarding-guide/port_forwarding_guide/#decentralization-must-be-decentralized","text":"January 3, 2019, we've launched first public testnet Euler-3. Since this time we have 3 relaunches and much more we'll has in the future. Thanks to our testers and validators we're finding and fixing new bugs every day. But now one fundamental and critical bug is not fixed yet. Currently, we have just 2 seed nodes and they able to upload data and provide connection to other nodes. Unfortunately, this is not about decentralization. An obvious problem of decentralization is that no entity has a global vision of the system, and there is no central authority to direct nodes in making optimal decisions with regard to software updates, routing, or solving consensus. This makes the availability of a decentralized network more difficult to maintain, a factor significant enough to contribute to the failure of a system. By the way, a huge part of disconnections and, as result, validators jailing happens by this reason. Cyberd cli can\u2019t automatically configure your router to open port 26656 , you will need to manually configure your router. We\u2019ve can't make the following instructions to cover all router models; if you need specific help with your router, please ask for help on our devChat . Enabling inbound connections requires two steps: Giving your computer a static (unchanging) internal IP address by configuring the Dynamic Host Configuration Protocol (DHCP) on your router. Forwarding inbound connections from the Internet through your router to your computer where cyberd container can process them. Editing cyberd configuration file.","title":"Decentralization must be decentralized"},{"location":"blog/port-forwarding-guide/port_forwarding_guide/#configuring-dhcp","text":"In order for your router to direct incoming port 26656 connections to your computer, it needs to know your computer\u2019s internal IP address. However, routers usually give computers dynamic IP addresses that change frequently, so we need to ensure your router always gives your computer the same internal IP address. Start by logging into your router\u2019s administration interface. Most routers can be configured using one of the following URLs, so keep clicking links until you find one that works. If none work, consult your router\u2019s manual. http://192.168.0.1 (some Linksys/Cisco models) http://192.168.1.1 (some D-Link/Netgear models) http://192.168.2.1 (some Belkin/SMC models) http://192.168.123.254 (some US Robotics models) http://10.0.1.1 (some Apple models) Upon connecting, you will probably be prompted for a username and password. If you configured a password, enter it now. If not, the Router Passwords site provides a database of known default username and password pairs. After logging in, you want to search your router\u2019s menus for options related to DHCP, the Dynamic Host Configuration Protocol. These options may also be called Address Reservation. In the reservation configuration, some routers will display a list of computers and devices currently connected to your network, and then let you select a device to make its current IP address permanent. If that\u2019s the case, find the computer running cyberd container in the list, select it, and add it to the list of reserved addresses. Make a note of its current IP address\u2014we\u2019ll use the address in the next section. Other routers require a more manual configuration. For these routers, you will need to look up the fixed address (MAC address) for your computer\u2019s network card and add it to the list. Open a terminal and type ifconfig. Find the result that best matches your connection\u2014a result starting with wlan indicates a wireless connection. Find the field that starts with HWaddr and copy the immediately following field that looks like 01:23:45:67:89:ab . Use that value in the instructions below. Once you have the MAC address, you can fill it into to your router\u2019s manual DHCP assignment table. Also, choose an IP address and make a note of it for the instructions in the next subsection. After entering this information, click the Add or Save button. Then reboot your computer to ensure it gets assigned the address you selected and proceed to the Port Forwarding instructions below.","title":"Configuring DHCP"},{"location":"blog/port-forwarding-guide/port_forwarding_guide/#port-forwarding","text":"For this step, you need to know the local IP address of the computer running cyberd container. You should have this information from configuring the DHCP assignment table in the subsection above. Login to your router using the same steps described near the top of the DHCP subsection. Look for an option called Port Forwarding, Port Assignment, or anything with \u201cPort\u201d in its name. On some routers, this option is buried in an Applications & Gaming menu. The port forwarding settings should allow you to map an external port on your router to the \u201cinternal port\u201d of a device on your network. Both the external port and the internal port should be 26656 for cyberd container. Make sure the IP address you enter is the same one you configured in the previous subsection. After filling in the details for the mapping, save the entry. You should not need to restart anything. Just ask us in devChat about successful connection. If you still can\u2019t connect and you use a firewall, you probably need to change your firewall settings. Ubuntu comes with its firewall disabled by default, but if you have enabled it, see the Ubuntu wiki page for information about adding port forwarding rules. If something else went wrong, it\u2019s probably a problem with your router configuration. Re-read the instructions above to see if you missed anything, search the web for help with \u201cport forwarding\u201d, and ask for help on devChat .","title":"Port Forwarding"},{"location":"blog/port-forwarding-guide/port_forwarding_guide/#configuring-cyberd","text":"Go to cyberd daemon folder, then go to config folder and open config.toml file for editing. Find peer to peer configuration options section and edit external_address variable with your IP address and port 26656 Restart cyberd container. We call to you, validators, with a proposal to forwarding port 26656 and make you validator-nodes available to the incoming connection. Unfortunately, we can't provide all guides for port forwarding because of they different for each router. But if you faced on with some troubles feel free to contact us in our devChat .","title":"Configuring cyberd"},{"location":"blog/sprint-19-report/sprint-19-report/","text":"The awaking of cyber\u2022Congress \u00b6 Start: 2018-09-17 End: 2018-09-28 \u0421onclusion \u00b6 Here is our first sprint report. We have a great reboot at our trip to Iceland in August 2018 and now we ready to new challenges. For this block we decide to focus on development our cyb , cyberd and chaingear projects. As result for this sprint we have first web3 browser release and first PoC of cyberd. We look forward for your feedback and feature request and bug issues. :) Changelog \u00b6 First PoC of cyberd \u00b6 First release of Cyb \u00b6 Developers metrics \u00b6 Epics done: \u00b6 CYB initial desktop release #9 Epics next sprint TODO: \u00b6 IPFS integration #40 in cyb Cyb navigation #41 Whitepaper 0.3 #25 of cyb Create cyberd PoC based on Cosmos SDK #37 Burndown Storypoints done 92 Stars Forks PRs KPI's \u00b6 cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #23 organization on gitcoin.co as at 2018/10/01; 30 of 1000 devs in devChat . Community: \u00b6 Telegram channel : 20 subscribers; Telegram devChat : 30 subscribers; Steemit : 2 subscribers; Reddit : 2 subscribers; Twitter : 9 subscribers;","title":"The awaking of cyber\u2022Congress"},{"location":"blog/sprint-19-report/sprint-19-report/#the-awaking-of-cybercongress","text":"Start: 2018-09-17 End: 2018-09-28","title":"The awaking of cyber\u2022Congress"},{"location":"blog/sprint-19-report/sprint-19-report/#onclusion","text":"Here is our first sprint report. We have a great reboot at our trip to Iceland in August 2018 and now we ready to new challenges. For this block we decide to focus on development our cyb , cyberd and chaingear projects. As result for this sprint we have first web3 browser release and first PoC of cyberd. We look forward for your feedback and feature request and bug issues. :)","title":"\u0421onclusion"},{"location":"blog/sprint-19-report/sprint-19-report/#changelog","text":"","title":"Changelog"},{"location":"blog/sprint-19-report/sprint-19-report/#first-poc-of-cyberd","text":"","title":"First PoC of cyberd"},{"location":"blog/sprint-19-report/sprint-19-report/#first-release-of-cyb","text":"","title":"First release of Cyb"},{"location":"blog/sprint-19-report/sprint-19-report/#developers-metrics","text":"","title":"Developers metrics"},{"location":"blog/sprint-19-report/sprint-19-report/#epics-done","text":"CYB initial desktop release #9","title":"Epics done:"},{"location":"blog/sprint-19-report/sprint-19-report/#epics-next-sprint-todo","text":"IPFS integration #40 in cyb Cyb navigation #41 Whitepaper 0.3 #25 of cyb Create cyberd PoC based on Cosmos SDK #37 Burndown Storypoints done 92 Stars Forks PRs","title":"Epics next sprint TODO:"},{"location":"blog/sprint-19-report/sprint-19-report/#kpis","text":"cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #23 organization on gitcoin.co as at 2018/10/01; 30 of 1000 devs in devChat .","title":"KPI's"},{"location":"blog/sprint-19-report/sprint-19-report/#community","text":"Telegram channel : 20 subscribers; Telegram devChat : 30 subscribers; Steemit : 2 subscribers; Reddit : 2 subscribers; Twitter : 9 subscribers;","title":"Community:"},{"location":"blog/sprint-20-report/sprint-20-report/","text":"Thorny path of open source development \u00b6 Start: 2018-10-01 End: 2018-10-11 \u0421onclusion \u00b6 Yet another sprint where we tried to fess up to. With our attempts to create cyberd PoC based on Cosmos SDK we hit at performance bug of Tendermint and Cosmos . Moreover it's huge problems with multithreading. For now we want to add current implementation to Cyb for tests. But in spite of performance problems we'll not give up the Cosmos SDK as a base for cyberd in the near future. We intend to use it for mechanic experience in first PoC. @xhipster analyzed 73 implementations consensus computers on a github so we have a chance to chose the best solution for us. Let's clean this list by following criteria: - highload - efficiency - public design PoS consensus - something about architecture Bottom line is: - EOS by Dan - Substrate by Gavin - Rchain by Greg - Solana by Anatoly - Cosmos by Buhman 1) I would eliminate EOS because is too lazy to redo consensus (DPOS is a piece of shit) and it cannot be over 5000 TPS. 2) Substrate is same thing. There is framework but there is no consensus. Possibility to conduct huge number of transactions is unknown. 3) Nothing bad about Rchain. Potential well thing. But there no info about performance. Need to learn new ver raw language. Remains only Solana what has none of the disadvantages. It very tiny, rapidly growing, quality designed and most importantly fast. Is not only fast as comparing with another platforms. It fast from a point of theoretical limits what possible on ONE chain [1]. As a next step we looking for Solana as base for cyberd PoC. Next release of Cyb was held . We added navigation for queries to cyb and cyberd. Also we added menu with apps for \"Settings\" button and made search bar redesign. Also fixed few bugs from previous version. In parallel we start to work on own version Cyb based on Electron. @Pechalka propose next 10 reasons to turn down Parity UI: 1) Huge codebase what need to support 2) Poor integration in web3. They have own library with entangled code 3) Slow app work 4) Working just with Parity node what required installation 5) All apps stored locally on an users machines. Where no integration with IPFS. In my version I propose to open app if it on IPFS. 6) Every new version of Parity not supported by Parity UI 7) Codebase is so complicated. It's more easy to write many things from scratch. 8) Where is no good tests for all we need. 9) Where is no browser logic. It was clearly view when I attach base navigation to IPFS: no load screen, no opening file processes as pdf, video, mp3 and obvious \"next\", \"previous\", \"refresh\" buttons. Parity UI haven't this features and they don't think about them. 10) No possibility to work with URL's without Parity and IPFS installation. I believe it's cool feature for web3 get started. This is not clearly how to do this with their library and clear with web3 library [2]. At the current sprint we are preparing for DevCon. We want to show our Cyb with navigation , new version of Whitepaper , built-in keystore and web3 positioning . Also we preparing to show built-in Chaingear in Cyb with updated UI. P.S. We had a kayaking at the last weekend! :) Changelog \u00b6 Next stage of cyberd \u00b6 Second release of Cyb \u00b6 Developers metrics \u00b6 Epics done: \u00b6 Epics next sprint TODO: \u00b6 Web3 positioning Cyb navigation #41 Whitepaper 0.3 #25 of cyb Create cyberd PoC based on Cosmos SDK #37 Built-in keystore Burndown Storypoints done 68 Stars Forks PRs KPI's \u00b6 cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #17 organization on gitcoin.co as at 2018/10/15; 30 of 1000 devs in devChat . Community: \u00b6 Telegram channel : 20 subscribers; Telegram devChat : 30 subscribers; Steemit : 2 subscribers; Reddit : 2 subscribers; Twitter : 9 subscribers; Links: \u00b6 @xhipster about situation with Cosmos SDK @pechalka about Parity UI","title":"Thorny path of open source development"},{"location":"blog/sprint-20-report/sprint-20-report/#thorny-path-of-open-source-development","text":"Start: 2018-10-01 End: 2018-10-11","title":"Thorny path of open source development"},{"location":"blog/sprint-20-report/sprint-20-report/#onclusion","text":"Yet another sprint where we tried to fess up to. With our attempts to create cyberd PoC based on Cosmos SDK we hit at performance bug of Tendermint and Cosmos . Moreover it's huge problems with multithreading. For now we want to add current implementation to Cyb for tests. But in spite of performance problems we'll not give up the Cosmos SDK as a base for cyberd in the near future. We intend to use it for mechanic experience in first PoC. @xhipster analyzed 73 implementations consensus computers on a github so we have a chance to chose the best solution for us. Let's clean this list by following criteria: - highload - efficiency - public design PoS consensus - something about architecture Bottom line is: - EOS by Dan - Substrate by Gavin - Rchain by Greg - Solana by Anatoly - Cosmos by Buhman 1) I would eliminate EOS because is too lazy to redo consensus (DPOS is a piece of shit) and it cannot be over 5000 TPS. 2) Substrate is same thing. There is framework but there is no consensus. Possibility to conduct huge number of transactions is unknown. 3) Nothing bad about Rchain. Potential well thing. But there no info about performance. Need to learn new ver raw language. Remains only Solana what has none of the disadvantages. It very tiny, rapidly growing, quality designed and most importantly fast. Is not only fast as comparing with another platforms. It fast from a point of theoretical limits what possible on ONE chain [1]. As a next step we looking for Solana as base for cyberd PoC. Next release of Cyb was held . We added navigation for queries to cyb and cyberd. Also we added menu with apps for \"Settings\" button and made search bar redesign. Also fixed few bugs from previous version. In parallel we start to work on own version Cyb based on Electron. @Pechalka propose next 10 reasons to turn down Parity UI: 1) Huge codebase what need to support 2) Poor integration in web3. They have own library with entangled code 3) Slow app work 4) Working just with Parity node what required installation 5) All apps stored locally on an users machines. Where no integration with IPFS. In my version I propose to open app if it on IPFS. 6) Every new version of Parity not supported by Parity UI 7) Codebase is so complicated. It's more easy to write many things from scratch. 8) Where is no good tests for all we need. 9) Where is no browser logic. It was clearly view when I attach base navigation to IPFS: no load screen, no opening file processes as pdf, video, mp3 and obvious \"next\", \"previous\", \"refresh\" buttons. Parity UI haven't this features and they don't think about them. 10) No possibility to work with URL's without Parity and IPFS installation. I believe it's cool feature for web3 get started. This is not clearly how to do this with their library and clear with web3 library [2]. At the current sprint we are preparing for DevCon. We want to show our Cyb with navigation , new version of Whitepaper , built-in keystore and web3 positioning . Also we preparing to show built-in Chaingear in Cyb with updated UI. P.S. We had a kayaking at the last weekend! :)","title":"\u0421onclusion"},{"location":"blog/sprint-20-report/sprint-20-report/#changelog","text":"","title":"Changelog"},{"location":"blog/sprint-20-report/sprint-20-report/#next-stage-of-cyberd","text":"","title":"Next stage of cyberd"},{"location":"blog/sprint-20-report/sprint-20-report/#second-release-of-cyb","text":"","title":"Second release of Cyb"},{"location":"blog/sprint-20-report/sprint-20-report/#developers-metrics","text":"","title":"Developers metrics"},{"location":"blog/sprint-20-report/sprint-20-report/#epics-done","text":"","title":"Epics done:"},{"location":"blog/sprint-20-report/sprint-20-report/#epics-next-sprint-todo","text":"Web3 positioning Cyb navigation #41 Whitepaper 0.3 #25 of cyb Create cyberd PoC based on Cosmos SDK #37 Built-in keystore Burndown Storypoints done 68 Stars Forks PRs","title":"Epics next sprint TODO:"},{"location":"blog/sprint-20-report/sprint-20-report/#kpis","text":"cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #17 organization on gitcoin.co as at 2018/10/15; 30 of 1000 devs in devChat .","title":"KPI's"},{"location":"blog/sprint-20-report/sprint-20-report/#community","text":"Telegram channel : 20 subscribers; Telegram devChat : 30 subscribers; Steemit : 2 subscribers; Reddit : 2 subscribers; Twitter : 9 subscribers;","title":"Community:"},{"location":"blog/sprint-20-report/sprint-20-report/#links","text":"@xhipster about situation with Cosmos SDK @pechalka about Parity UI","title":"Links:"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/","text":"Never had it before and there it is again \u00b6 Start: 2018-10-15 End: 2018-11-09 \u0421onclusion \u00b6 Such a productive sprint! Seriously. We combined 21 and 22 sprints because in a second one was too codeless. Also we got useful acquaintances but more about that later. First of all we update our web3 vision by @xhipster. It's early draft for web3 summit but we have choose direction to develop for now. Also this vision includes our DURA spec that must displace URLs. Secondly we clearly see two ways of web3 development: web3 around web3 foundation and web3 around ethereum foundation. We don't now exactly what to do with this but it's a fact :) Also we have nice cyb release and cyb whitepaper draft . Now it's available on desktop and include 3 nodes (ipfs, ethereum and cyberd). You can test searching by ipfs in wiki, connect local ipfs node, link hashes and try to install apps. Looks great actually. One more amazing thing happened on blockchain week in Prague! Cyber\u2022Academy made it first meetup in Europe! Also @xhipster had presentation on it and sent his regards to Zuckerberg. How it was you can see here . The most interesting part from 11:39 :))) Enjoy! Because Powers That Be already saw our cyb ^^ P.S. Yeah! We were at devcon iv with all team in Prague! It was awesome for real! Thanks a lot for Neptune room and for orgs! It was new level of conference! P.P.S. Part of our team was at web3 summit in Berlin and you know what? It was underground web3 movement. Why? Berlin Funkhous, devs presentation and really strong motivation to change modern web. Changelog \u00b6 Basic wiki cyberd indexer and first PoC on Cosmos SDK \u00b6 Cyb release with cyberd \u00b6 Developers metrics \u00b6 Epics done: \u00b6 Create cyberd PoC based on Cosmos SDK #37 Web3 positioning Epics next sprint TODO: \u00b6 Working on minor tasks & bug fixing. Burndown Storypoints done 158 Stars Forks PRs KPI's \u00b6 cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #20 organization on gitcoin.co as at 2018/11/08; 32 of 1000 devs in devChat . Community: \u00b6 Telegram channel : 20 subscribers; Telegram devChat : 32 subscribers; Steemit : 4 subscribers; Reddit : 2 subscribers; Twitter : 11 subscribers; Medium : 0 subscribers. Steemit Dev Chat Telegram Channel Twitter | Medium | Reddit :---:|:---:|:---:| | | |","title":"Never had it before and there it is again"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#never-had-it-before-and-there-it-is-again","text":"Start: 2018-10-15 End: 2018-11-09","title":"Never had it before and there it is again"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#onclusion","text":"Such a productive sprint! Seriously. We combined 21 and 22 sprints because in a second one was too codeless. Also we got useful acquaintances but more about that later. First of all we update our web3 vision by @xhipster. It's early draft for web3 summit but we have choose direction to develop for now. Also this vision includes our DURA spec that must displace URLs. Secondly we clearly see two ways of web3 development: web3 around web3 foundation and web3 around ethereum foundation. We don't now exactly what to do with this but it's a fact :) Also we have nice cyb release and cyb whitepaper draft . Now it's available on desktop and include 3 nodes (ipfs, ethereum and cyberd). You can test searching by ipfs in wiki, connect local ipfs node, link hashes and try to install apps. Looks great actually. One more amazing thing happened on blockchain week in Prague! Cyber\u2022Academy made it first meetup in Europe! Also @xhipster had presentation on it and sent his regards to Zuckerberg. How it was you can see here . The most interesting part from 11:39 :))) Enjoy! Because Powers That Be already saw our cyb ^^ P.S. Yeah! We were at devcon iv with all team in Prague! It was awesome for real! Thanks a lot for Neptune room and for orgs! It was new level of conference! P.P.S. Part of our team was at web3 summit in Berlin and you know what? It was underground web3 movement. Why? Berlin Funkhous, devs presentation and really strong motivation to change modern web.","title":"\u0421onclusion"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#changelog","text":"","title":"Changelog"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#basic-wiki-cyberd-indexer-and-first-poc-on-cosmos-sdk","text":"","title":"Basic wiki cyberd indexer and first PoC on Cosmos SDK"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#cyb-release-with-cyberd","text":"","title":"Cyb release with cyberd"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#developers-metrics","text":"","title":"Developers metrics"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#epics-done","text":"Create cyberd PoC based on Cosmos SDK #37 Web3 positioning","title":"Epics done:"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#epics-next-sprint-todo","text":"Working on minor tasks & bug fixing. Burndown Storypoints done 158 Stars Forks PRs","title":"Epics next sprint TODO:"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#kpis","text":"cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #20 organization on gitcoin.co as at 2018/11/08; 32 of 1000 devs in devChat .","title":"KPI's"},{"location":"blog/sprint-21-22-report/sprint-21-22-report/#community","text":"Telegram channel : 20 subscribers; Telegram devChat : 32 subscribers; Steemit : 4 subscribers; Reddit : 2 subscribers; Twitter : 11 subscribers; Medium : 0 subscribers. Steemit Dev Chat Telegram Channel Twitter | Medium | Reddit :---:|:---:|:---:| | | |","title":"Community:"},{"location":"blog/sprint-23-report/sprint-23-report/","text":"Organic growth \u00b6 Start: 2018-11-12 End: 2018-11-23 \u0421onclusion \u00b6 So, first of all, what are we looking for? We want a growth. Slowly, patiently, organic growth. Thats's we're looking for. That is why our focus now on Cyb. We start to support our first 3 rd -party app Dragonereum . Don't think it's all pleasure, there are a lot of troubles there. But we want to use Cyb at Dragonereum genesis, so the next couple of days will be hard ;) Also we need to add some security measures to make it more safer (not safe, sorry) in the mainnet. Actually you can try to add Dragonereum app to your Cyb just get the lay of the land. IPFS hash is attached QmYgxz2Tb74yBeF5ms4rN3N2QFy7cd27iJpYKq2bv6BmCn . Also you can install IPFS UI in our Cyb by following hash QmSDgpiHco5yXdyVTfhKxr3aiJ82ynz8V14QcGKicM3rVh . And finally we add custom web3 provider for ETH operation. On cyberd side we have made great strides with rank calculating with GPU . Now it's faster than CPU kind of 100x - 1000x. Validators must have GPUs in our network if they want to validate. Awesome, right? Also we had started Cyb tutorials in our blogs. It's purpose to help you to involve in our magic ;) Besides, we had started to blogging! Yeah, we exclude medium from our post channels. We don\u2019t endorse Medium\u2019s censorship policy and we cannot guaranty that everything we want to tell you we will be able to tell. Also Medium censors web3 links such as web3://, dura:// or cyb:// so posts on Medium are published without links. And finally... The great announcement about first decentralized search engine conference is coming! Growth for open source! ..organic ;) Changelog \u00b6 Minor fixes at cyberd \u00b6 Cyb release with chaingear and accounts import \u00b6 Developers metrics \u00b6 Epics done: \u00b6 Working on minor tasks & bug fixing. Custom web3 provider #6 cyb Epics next sprint TODO: \u00b6 Support of Dragonereum #35 cyb Custom web3 provider #6 cyb Launch testnet Euler #73 cyberd Whitepaper 0.3 #25 cyberd Distribution #27 cyberd Update UI for chaingear app #1029 chaingear Burndown Storypoints done 84 Stars Forks PRs KPI's as at 2018/11/26 \u00b6 cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #26 organization on gitcoin.co; 36 of 1000 devs in devChat . Community: \u00b6 Telegram channel : 28 subscribers; Telegram devChat : 36 subscribers; Steemit : 7 subscribers; Reddit : 6 subscribers; Twitter : 16 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":"Organic growth"},{"location":"blog/sprint-23-report/sprint-23-report/#organic-growth","text":"Start: 2018-11-12 End: 2018-11-23","title":"Organic growth"},{"location":"blog/sprint-23-report/sprint-23-report/#onclusion","text":"So, first of all, what are we looking for? We want a growth. Slowly, patiently, organic growth. Thats's we're looking for. That is why our focus now on Cyb. We start to support our first 3 rd -party app Dragonereum . Don't think it's all pleasure, there are a lot of troubles there. But we want to use Cyb at Dragonereum genesis, so the next couple of days will be hard ;) Also we need to add some security measures to make it more safer (not safe, sorry) in the mainnet. Actually you can try to add Dragonereum app to your Cyb just get the lay of the land. IPFS hash is attached QmYgxz2Tb74yBeF5ms4rN3N2QFy7cd27iJpYKq2bv6BmCn . Also you can install IPFS UI in our Cyb by following hash QmSDgpiHco5yXdyVTfhKxr3aiJ82ynz8V14QcGKicM3rVh . And finally we add custom web3 provider for ETH operation. On cyberd side we have made great strides with rank calculating with GPU . Now it's faster than CPU kind of 100x - 1000x. Validators must have GPUs in our network if they want to validate. Awesome, right? Also we had started Cyb tutorials in our blogs. It's purpose to help you to involve in our magic ;) Besides, we had started to blogging! Yeah, we exclude medium from our post channels. We don\u2019t endorse Medium\u2019s censorship policy and we cannot guaranty that everything we want to tell you we will be able to tell. Also Medium censors web3 links such as web3://, dura:// or cyb:// so posts on Medium are published without links. And finally... The great announcement about first decentralized search engine conference is coming! Growth for open source! ..organic ;)","title":"\u0421onclusion"},{"location":"blog/sprint-23-report/sprint-23-report/#changelog","text":"","title":"Changelog"},{"location":"blog/sprint-23-report/sprint-23-report/#minor-fixes-at-cyberd","text":"","title":"Minor fixes at cyberd"},{"location":"blog/sprint-23-report/sprint-23-report/#cyb-release-with-chaingear-and-accounts-import","text":"","title":"Cyb release with chaingear and accounts import"},{"location":"blog/sprint-23-report/sprint-23-report/#developers-metrics","text":"","title":"Developers metrics"},{"location":"blog/sprint-23-report/sprint-23-report/#epics-done","text":"Working on minor tasks & bug fixing. Custom web3 provider #6 cyb","title":"Epics done:"},{"location":"blog/sprint-23-report/sprint-23-report/#epics-next-sprint-todo","text":"Support of Dragonereum #35 cyb Custom web3 provider #6 cyb Launch testnet Euler #73 cyberd Whitepaper 0.3 #25 cyberd Distribution #27 cyberd Update UI for chaingear app #1029 chaingear Burndown Storypoints done 84 Stars Forks PRs","title":"Epics next sprint TODO:"},{"location":"blog/sprint-23-report/sprint-23-report/#kpis-as-at-20181126","text":"cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #26 organization on gitcoin.co; 36 of 1000 devs in devChat .","title":"KPI's as at 2018/11/26"},{"location":"blog/sprint-23-report/sprint-23-report/#community","text":"Telegram channel : 28 subscribers; Telegram devChat : 36 subscribers; Steemit : 7 subscribers; Reddit : 6 subscribers; Twitter : 16 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":"Community:"},{"location":"blog/sprint-24-report/sprint-24-report/","text":"Sacred Rave \u00b6 Start: 2018-11-26 End: 2018-12-17 \u0421onclusion \u00b6 We have a rich and crazy sprint. A lot of things happened during the last three weeks. And... You know what? We want to collect just good things among the array of events. First of all, let's speak about our products state. Soon, on Bitcoin genesis block 10 th year anniversary, 2019.01.03, we'll launch cyberd first testnet - Euler, Cyb 0.1.0 Euler release, and Chaingear mainnet with updated UI. It should be a great step to the new world. Cyb serves as the rabbit hole of Web3 World with decentralized search, games, services, storage, databases and so on. So far, Cyb shows the best user experience in playing a Web3 game which is Dragonereum. It is a good sign. Few words about Dragonereum as a first Cyb game. Eggs distribution is almost over and I believe that in two weeks I'll write about Gladiators Battles launch. And finally, about cyberc0n . It was our first conference around Web3 and decentralized search. We're very proud of this event from cyber\u2022Congress side and cyber\u2022Academy. Firstly it was an almost Web3-organized conference on Ethereum smart contract. More details about a conference will be in my next post. Secondly... We thrilled with people who came to us. Be well aware of new decentralized world building difficulty we were happy to understand that we are not alone, but with a strong community. Not so huge, but really strong. Thanks to all who came! And sure, if you want to join the discussion around decentralized search, welcome to our telegram dev chats :) Changelog \u00b6 Minor fixes at cyberd \u00b6 Cyb Euler pre-release \u00b6 Developers metrics \u00b6 Epics done: \u00b6 Support of Dragonereum #35 cyb Simple history.cyb #62 cyb Cyb shell design update #9 cyberdesign Epics next sprint TODO: \u00b6 Basic .help app #44 cyb Launch registry of apps #998 chaingear Launch testnet Euler #73 cyberd Whitepaper 0.3 #25 cyberd Distribution #27 cyberd Update UI for chaingear app #1029 chaingear Burndown Storypoints done 191 Stars Forks PRs KPI's as at 2018/12/17 \u00b6 cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #34 organization on gitcoin.co; 39 of 1000 devs in devChat . Community: \u00b6 Telegram channel : 27 subscribers; Telegram devChat : 39 subscribers; Steemit : 9 subscribers; Reddit : 6 subscribers; Twitter : 22 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":"Sacred Rave"},{"location":"blog/sprint-24-report/sprint-24-report/#sacred-rave","text":"Start: 2018-11-26 End: 2018-12-17","title":"Sacred Rave"},{"location":"blog/sprint-24-report/sprint-24-report/#onclusion","text":"We have a rich and crazy sprint. A lot of things happened during the last three weeks. And... You know what? We want to collect just good things among the array of events. First of all, let's speak about our products state. Soon, on Bitcoin genesis block 10 th year anniversary, 2019.01.03, we'll launch cyberd first testnet - Euler, Cyb 0.1.0 Euler release, and Chaingear mainnet with updated UI. It should be a great step to the new world. Cyb serves as the rabbit hole of Web3 World with decentralized search, games, services, storage, databases and so on. So far, Cyb shows the best user experience in playing a Web3 game which is Dragonereum. It is a good sign. Few words about Dragonereum as a first Cyb game. Eggs distribution is almost over and I believe that in two weeks I'll write about Gladiators Battles launch. And finally, about cyberc0n . It was our first conference around Web3 and decentralized search. We're very proud of this event from cyber\u2022Congress side and cyber\u2022Academy. Firstly it was an almost Web3-organized conference on Ethereum smart contract. More details about a conference will be in my next post. Secondly... We thrilled with people who came to us. Be well aware of new decentralized world building difficulty we were happy to understand that we are not alone, but with a strong community. Not so huge, but really strong. Thanks to all who came! And sure, if you want to join the discussion around decentralized search, welcome to our telegram dev chats :)","title":"\u0421onclusion"},{"location":"blog/sprint-24-report/sprint-24-report/#changelog","text":"","title":"Changelog"},{"location":"blog/sprint-24-report/sprint-24-report/#minor-fixes-at-cyberd","text":"","title":"Minor fixes at cyberd"},{"location":"blog/sprint-24-report/sprint-24-report/#cyb-euler-pre-release","text":"","title":"Cyb Euler pre-release"},{"location":"blog/sprint-24-report/sprint-24-report/#developers-metrics","text":"","title":"Developers metrics"},{"location":"blog/sprint-24-report/sprint-24-report/#epics-done","text":"Support of Dragonereum #35 cyb Simple history.cyb #62 cyb Cyb shell design update #9 cyberdesign","title":"Epics done:"},{"location":"blog/sprint-24-report/sprint-24-report/#epics-next-sprint-todo","text":"Basic .help app #44 cyb Launch registry of apps #998 chaingear Launch testnet Euler #73 cyberd Whitepaper 0.3 #25 cyberd Distribution #27 cyberd Update UI for chaingear app #1029 chaingear Burndown Storypoints done 191 Stars Forks PRs","title":"Epics next sprint TODO:"},{"location":"blog/sprint-24-report/sprint-24-report/#kpis-as-at-20181217","text":"cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #34 organization on gitcoin.co; 39 of 1000 devs in devChat .","title":"KPI's as at 2018/12/17"},{"location":"blog/sprint-24-report/sprint-24-report/#community","text":"Telegram channel : 27 subscribers; Telegram devChat : 39 subscribers; Steemit : 9 subscribers; Reddit : 6 subscribers; Twitter : 22 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":"Community:"},{"location":"blog/sprint-25-report/sprint-25-report/","text":"42 \u00b6 Start: 2018-12-17 End: 2018-12-28 \u0421onclusion \u00b6 42 . This number has haunted us. I'm not kidding. 42 participants came to our conference, cyberc0n, and now there are 42 members in our dev chat. Mystic... However it was a new year sprint! We have done quite a lot in this sprint and are proud of that! What exactly we are proud of? First public testnet . What does it mean for you? You can do your best for the future Internet with testing our chain as a validator. Follow full explanation here and join our dev Chat finally! Future of browsers has it first serious release :) Welcome to Cyb 0.1.0 - Euler ! For us, it's the best way to experience web3 at this moment. Try Chaingear in Kovan with Cyb, explore IPFS content and finally play Dragonereum with Cyb! We're waiting for your bug reports and feature requests as soon as possible! We have tutorials for you, so don't hesitate to contact us. Good news is that Chaingear has deployed to mainnet, but we need some more polishments before you can actually use it. Finally, we're glad to announce our substance! It guarantees everyone a warm place in Genesis of Cyber protocol. This substance called CBD and is accounted here . This substance is not the final product and serves as transparency tool for Genesis and decision-making in cyberFoundation. Oh yeah. Yeeeeeh! Now we have cyberFoundation - the Aragon organization ! The purpose of this organization is to empower community around Cyber protocol. The upcoming golas are: - distribution of CBD substance - formation of community in Aragon organization around cyber:// protocol development - boost utility of CBD tokens through integration with current Ethereum projects of cyberCongress That is it! :) One sprint left before the current block and we'll departure to Thailand for brainstorming, planning, and development. It just got a few loose ends to tie up and... continue to work :) Changelog \u00b6 Cyberd release 0.1.0 - Euler \u00b6 Cyb release 0.1.0 - Euler \u00b6 Developers metrics \u00b6 Epics done: \u00b6 Launch testnet Euler #73 cyberd Release notes for 0.1 #109 cyb Epics next sprint TODO: \u00b6 Deploy to mainnet #997 chaingear Basic .help app #44 cyb Whitepaper 0.3 #25 cyberd Distribution #27 cyberd Update UI for chaingear app #1029 chaingear Design refactoring #18 cyberdesign Landing pages for key projects #36 congress Simple .txqueue app #67 cyb Burndown Storypoints done 163 Stars Forks PRs KPI's as at 2019/01/08 \u00b6 cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #41 organization on gitcoin.co; 42 of 1000 devs in devChat . Community: \u00b6 Telegram channel : 29 subscribers; Telegram devChat : 42 subscribers; Steemit : 8 subscribers; Reddit : 6 subscribers; Twitter : 22 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":42},{"location":"blog/sprint-25-report/sprint-25-report/#42","text":"Start: 2018-12-17 End: 2018-12-28","title":"42"},{"location":"blog/sprint-25-report/sprint-25-report/#onclusion","text":"42 . This number has haunted us. I'm not kidding. 42 participants came to our conference, cyberc0n, and now there are 42 members in our dev chat. Mystic... However it was a new year sprint! We have done quite a lot in this sprint and are proud of that! What exactly we are proud of? First public testnet . What does it mean for you? You can do your best for the future Internet with testing our chain as a validator. Follow full explanation here and join our dev Chat finally! Future of browsers has it first serious release :) Welcome to Cyb 0.1.0 - Euler ! For us, it's the best way to experience web3 at this moment. Try Chaingear in Kovan with Cyb, explore IPFS content and finally play Dragonereum with Cyb! We're waiting for your bug reports and feature requests as soon as possible! We have tutorials for you, so don't hesitate to contact us. Good news is that Chaingear has deployed to mainnet, but we need some more polishments before you can actually use it. Finally, we're glad to announce our substance! It guarantees everyone a warm place in Genesis of Cyber protocol. This substance called CBD and is accounted here . This substance is not the final product and serves as transparency tool for Genesis and decision-making in cyberFoundation. Oh yeah. Yeeeeeh! Now we have cyberFoundation - the Aragon organization ! The purpose of this organization is to empower community around Cyber protocol. The upcoming golas are: - distribution of CBD substance - formation of community in Aragon organization around cyber:// protocol development - boost utility of CBD tokens through integration with current Ethereum projects of cyberCongress That is it! :) One sprint left before the current block and we'll departure to Thailand for brainstorming, planning, and development. It just got a few loose ends to tie up and... continue to work :)","title":"\u0421onclusion"},{"location":"blog/sprint-25-report/sprint-25-report/#changelog","text":"","title":"Changelog"},{"location":"blog/sprint-25-report/sprint-25-report/#cyberd-release-010-euler","text":"","title":"Cyberd release 0.1.0 - Euler"},{"location":"blog/sprint-25-report/sprint-25-report/#cyb-release-010-euler","text":"","title":"Cyb release 0.1.0 - Euler"},{"location":"blog/sprint-25-report/sprint-25-report/#developers-metrics","text":"","title":"Developers metrics"},{"location":"blog/sprint-25-report/sprint-25-report/#epics-done","text":"Launch testnet Euler #73 cyberd Release notes for 0.1 #109 cyb","title":"Epics done:"},{"location":"blog/sprint-25-report/sprint-25-report/#epics-next-sprint-todo","text":"Deploy to mainnet #997 chaingear Basic .help app #44 cyb Whitepaper 0.3 #25 cyberd Distribution #27 cyberd Update UI for chaingear app #1029 chaingear Design refactoring #18 cyberdesign Landing pages for key projects #36 congress Simple .txqueue app #67 cyb Burndown Storypoints done 163 Stars Forks PRs","title":"Epics next sprint TODO:"},{"location":"blog/sprint-25-report/sprint-25-report/#kpis-as-at-20190108","text":"cyberd: 1 of the 7 PoC iteration; cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #41 organization on gitcoin.co; 42 of 1000 devs in devChat .","title":"KPI's as at 2019/01/08"},{"location":"blog/sprint-25-report/sprint-25-report/#community","text":"Telegram channel : 29 subscribers; Telegram devChat : 42 subscribers; Steemit : 8 subscribers; Reddit : 6 subscribers; Twitter : 22 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":"Community:"},{"location":"blog/sprint-26-report/sprint-26-report/","text":"Let's code in paradise \u00b6 Start: 2019-01-08 End: 2019-01-21 \u0421onclusion \u00b6 Briefly. After a successful launch we have faced a few problems with our blockchain: - not enough validators - rapid blocks generation - confused naming Good news: we have solved it already, but validators are still welcome ! Secondly, we've prepared a whitepaper 0.4 . It's still immature, but for launched testnet with economic incentives it makes sense. I need to remind once again for all who care about web3 and decentralized search engine to join the discussion in our telegram dev chat . Thirdly we've updated Chaingear UI and soon it will be deployed to mainnet, so probably at my next report, I'll glad to announce you the most expensive database! For sure it will be available in our Cyb . Finally, our Block is near to the end and we're ready to plan new achievements for the next Block 3. The last sprint of the Block 2 has started. We are on Samui now :) Changelog \u00b6 Cyberd bugs fixing, import private keys from Ethereum with CLI \u00b6 Cyb release 0.1.1 bugs fixing, UPD frontend \u00b6 Developers metrics \u00b6 Epics done: \u00b6 Update UI for chaingear app #1029 chaingear Landing pages for key projects #36 congress Whitepaper 0.3 #25 cyberd Epics next sprint TODO: \u00b6 Deploy to mainnet #997 chaingear Basic articles for help.cyb #44 cyb Simple .txqueue app #67 cyb Bandwidth Specification Change #177 cyberd Web3 blog of cybercongress #162 congress Burndown Storypoints done 141 Stars Forks PRs KPI's as at 2019/01/22 \u00b6 cyberd: 3 of 146 active validators (+1 jailed) cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #39 organization on gitcoin.co; 43 of 1000 devs in devChat . Community: \u00b6 Telegram channel : 30 subscribers; Telegram devChat : 43 subscribers; Steemit : 8 subscribers; Reddit : 6 subscribers; Twitter : 23 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":"Let's code in paradise"},{"location":"blog/sprint-26-report/sprint-26-report/#lets-code-in-paradise","text":"Start: 2019-01-08 End: 2019-01-21","title":"Let's code in paradise"},{"location":"blog/sprint-26-report/sprint-26-report/#onclusion","text":"Briefly. After a successful launch we have faced a few problems with our blockchain: - not enough validators - rapid blocks generation - confused naming Good news: we have solved it already, but validators are still welcome ! Secondly, we've prepared a whitepaper 0.4 . It's still immature, but for launched testnet with economic incentives it makes sense. I need to remind once again for all who care about web3 and decentralized search engine to join the discussion in our telegram dev chat . Thirdly we've updated Chaingear UI and soon it will be deployed to mainnet, so probably at my next report, I'll glad to announce you the most expensive database! For sure it will be available in our Cyb . Finally, our Block is near to the end and we're ready to plan new achievements for the next Block 3. The last sprint of the Block 2 has started. We are on Samui now :)","title":"\u0421onclusion"},{"location":"blog/sprint-26-report/sprint-26-report/#changelog","text":"","title":"Changelog"},{"location":"blog/sprint-26-report/sprint-26-report/#cyberd-bugs-fixing-import-private-keys-from-ethereum-with-cli","text":"","title":"Cyberd bugs fixing, import private keys from Ethereum with CLI"},{"location":"blog/sprint-26-report/sprint-26-report/#cyb-release-011-bugs-fixing-upd-frontend","text":"","title":"Cyb release 0.1.1 bugs fixing, UPD frontend"},{"location":"blog/sprint-26-report/sprint-26-report/#developers-metrics","text":"","title":"Developers metrics"},{"location":"blog/sprint-26-report/sprint-26-report/#epics-done","text":"Update UI for chaingear app #1029 chaingear Landing pages for key projects #36 congress Whitepaper 0.3 #25 cyberd","title":"Epics done:"},{"location":"blog/sprint-26-report/sprint-26-report/#epics-next-sprint-todo","text":"Deploy to mainnet #997 chaingear Basic articles for help.cyb #44 cyb Simple .txqueue app #67 cyb Bandwidth Specification Change #177 cyberd Web3 blog of cybercongress #162 congress Burndown Storypoints done 141 Stars Forks PRs","title":"Epics next sprint TODO:"},{"location":"blog/sprint-26-report/sprint-26-report/#kpis-as-at-20190122","text":"cyberd: 3 of 146 active validators (+1 jailed) cyb: yes release ; chaingear: 0 of 100 ETH take from chaingear; #39 organization on gitcoin.co; 43 of 1000 devs in devChat .","title":"KPI's as at 2019/01/22"},{"location":"blog/sprint-26-report/sprint-26-report/#community","text":"Telegram channel : 30 subscribers; Telegram devChat : 43 subscribers; Steemit : 8 subscribers; Reddit : 6 subscribers; Twitter : 23 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":"Community:"},{"location":"blog/sprint-27-report/sprint-27-report/","text":"The show must go on \u00b6 Start: 2019-01-21 End: 2019-02-01 \u0421onclusion \u00b6 This sprint was not easy for us. We had worked on bug fixing and improvements, and, also, adapted to the new climate. What exactly is ready? Testnet Euler drives like hell. It's too easy now to launch own node or validator and start linking principally new Internet. Is it hard to? Alright! Testnet Euler is now available in cyb . So you can link the new Internet with great UX. And finally, Chaingear was deployed to Mainnet . This is a good reason to register some popular domain as someone already made. So .com and .porn are busy already :) But what am I going to say? Today, exactly today we can say: \"cyber\u2022Search destined to be\"! Our 3 repos in the complex formed sustainable entrance point to web3. We have started winter round of private donates from friends because in search we trust! Releases \u00b6 Cyberd release 0.1.1: 19 features, 10 bugs, 1 epic \u00b6 Cyb release 0.1.2: 4 features, 5 bugs, 1 epic \u00b6 Chaingear release 0.1.1 in Mainnet: 1 epic \u00b6 Developers metrics \u00b6 Epics done: \u00b6 Deploy to mainnet #997 chaingear Basic articles for help.cyb #44 cyb Bandwidth Specification Change #177 cyberd Epics next sprint TODO: \u00b6 Simple .txqueue app #67 cyb Landing pages for key projects #36 congress Smart secret storage Burndown Storypoints done 139 Stars Forks PRs KPI's as at 2019/02/03 \u00b6 cyberd: 9 of 146 active validators (+1 jailed) cyb: yes release ; chaingear: 20 of 100 ETH take from chaingear; #34 organization on gitcoin.co; 59 of 1000 devs in devChat . Community: \u00b6 Telegram channel : 32 subscribers; Telegram devChat : 59 subscribers; Steemit : 9 subscribers; Reddit : 6 subscribers; Twitter : 26 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":"The show must go on"},{"location":"blog/sprint-27-report/sprint-27-report/#the-show-must-go-on","text":"Start: 2019-01-21 End: 2019-02-01","title":"The show must go on"},{"location":"blog/sprint-27-report/sprint-27-report/#onclusion","text":"This sprint was not easy for us. We had worked on bug fixing and improvements, and, also, adapted to the new climate. What exactly is ready? Testnet Euler drives like hell. It's too easy now to launch own node or validator and start linking principally new Internet. Is it hard to? Alright! Testnet Euler is now available in cyb . So you can link the new Internet with great UX. And finally, Chaingear was deployed to Mainnet . This is a good reason to register some popular domain as someone already made. So .com and .porn are busy already :) But what am I going to say? Today, exactly today we can say: \"cyber\u2022Search destined to be\"! Our 3 repos in the complex formed sustainable entrance point to web3. We have started winter round of private donates from friends because in search we trust!","title":"\u0421onclusion"},{"location":"blog/sprint-27-report/sprint-27-report/#releases","text":"","title":"Releases"},{"location":"blog/sprint-27-report/sprint-27-report/#cyberd-release-011-19-features-10-bugs-1-epic","text":"","title":"Cyberd release 0.1.1: 19 features, 10 bugs, 1 epic"},{"location":"blog/sprint-27-report/sprint-27-report/#cyb-release-012-4-features-5-bugs-1-epic","text":"","title":"Cyb release 0.1.2: 4 features, 5 bugs, 1 epic"},{"location":"blog/sprint-27-report/sprint-27-report/#chaingear-release-011-in-mainnet-1-epic","text":"","title":"Chaingear release 0.1.1 in Mainnet: 1 epic"},{"location":"blog/sprint-27-report/sprint-27-report/#developers-metrics","text":"","title":"Developers metrics"},{"location":"blog/sprint-27-report/sprint-27-report/#epics-done","text":"Deploy to mainnet #997 chaingear Basic articles for help.cyb #44 cyb Bandwidth Specification Change #177 cyberd","title":"Epics done:"},{"location":"blog/sprint-27-report/sprint-27-report/#epics-next-sprint-todo","text":"Simple .txqueue app #67 cyb Landing pages for key projects #36 congress Smart secret storage Burndown Storypoints done 139 Stars Forks PRs","title":"Epics next sprint TODO:"},{"location":"blog/sprint-27-report/sprint-27-report/#kpis-as-at-20190203","text":"cyberd: 9 of 146 active validators (+1 jailed) cyb: yes release ; chaingear: 20 of 100 ETH take from chaingear; #34 organization on gitcoin.co; 59 of 1000 devs in devChat .","title":"KPI's as at 2019/02/03"},{"location":"blog/sprint-27-report/sprint-27-report/#community","text":"Telegram channel : 32 subscribers; Telegram devChat : 59 subscribers; Steemit : 9 subscribers; Reddit : 6 subscribers; Twitter : 26 subscribers. Steemit Dev Chat Telegram Channel Twitter | Reddit :---:|:---:| |","title":"Community:"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/","text":"Ultimate cyberd CLI guide. Testnet: Euler-1. \u00b6 Glossary \u00b6 Bandwidth - The recovered unit of your account. Used to complete transactions in the cyberd blockchain. The amount of your bandwidth calculates like: your_cyb_tokens / all_cyb_tokens_in_cyberd * 2000*1000*100 . Messages cost is 500 (exclude link). Transaction consists of one or more messages m_1, m_2, ..., m_n . Transaction cost is 300 + c_1 + c_2 ... + c_n , where c_i - cost of m_i message. Full bandwidth regeneration time is 86400 blocks (24 hours) commission - tokens that you've earned with validation. You can take them at any time. illiquid tokens - non-transferable tokens that you've delegated to the validator. Delegation process duration - 1 block. Unbonding process, or taking back share - 3 weeks. link - reference between CID key and CID value. Link message cost is 100*n , where n is quantity of links in message. Link finalization time is 1 block. New rank for CIDs of link will be recalculated at period from 100 to 200 blocks (from 100 to 200 seconds). liquid tokens - transferable tokens in cyberd blockchain local keystore - store with keys in you local machine rewards - tokens that you've earned with the delegation. To reduce network loads all rewards storing in a pool. You can take your part of bounty at any time by commands at delegator section. - the commission that validator get for the work. Must be fraction >0 and <=1 - delegator address. Starts with cyber most often coinciding with - account address. Starts with cyber - name of account in cybercli - validator address. Starts with cybervaloper - the part of illiquid tokens that you want to unbonding or redelegate. Must be fraction >0 and <=1 - version of testnet. General commands \u00b6 Show all validators \u00b6 Return set of all active and jailed validators. docker exec cyberd cyberdcli query staking validators --trust-node Show chain status \u00b6 Return general chain information docker exec cyberd cyberdcli status --indent Distribution params \u00b6 docker exec cyberd cyberdcli query distr params --trust-node The amount of outstanding rewards \u00b6 Return the sum of rewards in a pool docker exec cyberd cyberdcli query distr outstanding-rewards --trust-node Staking params \u00b6 Chain staking info docker exec cyberd cyberdcli query staking params --trust-node Staking pool \u00b6 docker exec cyberd cyberdcli query staking pool --trust-node Account management \u00b6 Import an account by seed phrase and store it in local keystore \u00b6 docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover Import an account by private key and store it in local keystore (private key could be your ETH private key) \u00b6 docker exec -ti cyberd cyberdcli keys add import_private <your_key_name> Create a new account \u00b6 docker exec -ti cyberd cyberdcli keys add <your_key_name> Show account information \u00b6 Name, address and public key of current account docker exec cyberd cyberdcli keys show <your_key_name> Show account balance. \u00b6 Return account number, balance, public key in 16 and sequence. Don't work if from current account no outgoing transactions. Issue in progress docker exec cyberd cyberdcli query account <your_key_address> List existing keys \u00b6 Return all keys in cyberdcli docker exec cyberd cyberdcli keys list Delete account from cybercli \u00b6 docker exec -ti cyberd cyberdcli keys delete <deleting_key_name> Update account password \u00b6 docker exec -ti cyberd cyberdcli keys update <your_key_name> Send tokens \u00b6 docker exec -ti cyberd cyberdcli tx send \\ --from = <your_key_name> \\ --to = <key_address_to_send_tokens> \\ --amount = <amount>cyb \\ --chain-id = <testnet_chain_id> Linking content \u00b6 Just ipfs hashes available as a CID docker exec -ti cyberd cyberdcli link \\ --from = <your_key_name> \\ --cid-from = <key_phrase_to_link> \\ --cid-to = <content_that_you_want_to_link> \\ --chain-id = <testnet_chain_id> Validator commands \u00b6 Get all validators \u00b6 docker exec cyberd cyberdcli query staking validators \\ --trust-node The amount of commission \u00b6 Available to withdraw validator comission. docker exec cyberd cyberdcli query distr commission <operator_address> State of current validator \u00b6 docker exec cyberd cyberdcli query staking validator <operator_address> Return all delegations to validator \u00b6 docker exec cyberd cyberdcli query staking delegations-to <operator_address> Edit commission in existing validator account \u00b6 docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --commission-rate = <new_comission_rate_percentage> \\ --chain-id = <testnet_chain_id> Withdraw comission for either a delegation \u00b6 docker exec -ti cyberd cyberdcli tx distr withdraw-rewards \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> \\ --is-validator Edit site and description in existing validator account \u00b6 Will be available at description section docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --details = \"<description>\" \\ --website = <your_website> \\ --chain-id = <testnet_chain_id> Unjail validator previously jailed for downtime \u00b6 docker exec -ti cyberd cyberdcli tx slashing unjail \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Get info about redelegation process from validator \u00b6 docker exec -ti cyberd cyberdcli query staking redelegations-from <operator_address> Delegator commands \u00b6 Return distribution delegator rewards according current validator \u00b6 docker exec -ti cyberd cyberdcli query distr rewards <delegator_address> <operator_address> Return delegator shares with current validator \u00b6 docker exec -ti cyberd cyberdcli query staking delegation <delegator_address> <operator_address> Return all delegations made from one delegator \u00b6 docker exec -ti cyberd cyberdcli query staking delegations <delegator_address> Return all unbonding delegatations from a validator \u00b6 docker exec -ti cyberd cyberdcli query staking unbonding-delegations-from <operator_address> Withdraw rewards for either a delegation \u00b6 docker exec -ti cyberd cyberdcli tx distr withdraw-rewards \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> \\ --only-from-validator = <operator_address> Change the default withdraw address for rewards associated with an address \u00b6 docker exec -ti cyberd cyberdcli tx distr set-withdraw-addr <your_new_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Delegate liquid tokens to a validator \u00b6 docker exec -ti cyberd cyberdcli tx staking delegate \\ --from = <your_key_name> \\ --amount = <amount>cyb \\ --validator = <operator_address> \\ --chain-id = <testnet_chain_id> Redelegate illiquid tokens from one validator to another in absolute cyb value \u00b6 3 weeks for redelegation. Amount must be less than already delegated. docker exec -ti cyberd cyberdcli tx staking redelegate --from = <your_key_name> \\ --addr-validator-dest = <new_operator_address> \\ --addr-validator-source = <old_operator_address> \\ --shares-amount = <amount>cyb --chain-id = <testnet_chain_id> Redelegate illiquid tokens from one validator to another in percentages \u00b6 3 weeks for redelegation. docker exec -ti cyberd cyberdcli tx staking redelegate --from = <your_key_name> \\ --addr-validator-dest = <new_operator_address> \\ --addr-validator-source = <old_operator_address> \\ --shares-fraction = <shares_percentage> \\ --chain-id = <testnet_chain_id> Unbond shares from a validator in absolute cyb value \u00b6 3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond --from = <your_key_name> \\ --shares-amount = <amount>cyb --validator == <operator_address> \\ --chain-id = <testnet_chain_id> Unbond shares from a validator in percentages \u00b6 3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond --from = <your_key_name> \\ --shares-fraction = <shares_percentage> \\ --validator == <operator_address> \\ --chain-id = <testnet_chain_id> Get info about unbonding delegation process to current validator \u00b6 docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address> <operator_address> Get info about unbonding delegation process to all unbonded validators \u00b6 docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address> Get info about redelegation process from to current validator \u00b6 docker exec -ti cyberd cyberdcli query staking redelegation <delegator_address> <old_operator_address> <new_operator_address> Get info about all redelegation processes by one delegator \u00b6 docker exec -ti cyberd cyberdcli query staking redelegations <delegator_address>","title":"Ultimate cyberd CLI guide. Testnet Euler-1"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#ultimate-cyberd-cli-guide-testnet-euler-1","text":"","title":"Ultimate cyberd CLI guide. Testnet: Euler-1."},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#glossary","text":"Bandwidth - The recovered unit of your account. Used to complete transactions in the cyberd blockchain. The amount of your bandwidth calculates like: your_cyb_tokens / all_cyb_tokens_in_cyberd * 2000*1000*100 . Messages cost is 500 (exclude link). Transaction consists of one or more messages m_1, m_2, ..., m_n . Transaction cost is 300 + c_1 + c_2 ... + c_n , where c_i - cost of m_i message. Full bandwidth regeneration time is 86400 blocks (24 hours) commission - tokens that you've earned with validation. You can take them at any time. illiquid tokens - non-transferable tokens that you've delegated to the validator. Delegation process duration - 1 block. Unbonding process, or taking back share - 3 weeks. link - reference between CID key and CID value. Link message cost is 100*n , where n is quantity of links in message. Link finalization time is 1 block. New rank for CIDs of link will be recalculated at period from 100 to 200 blocks (from 100 to 200 seconds). liquid tokens - transferable tokens in cyberd blockchain local keystore - store with keys in you local machine rewards - tokens that you've earned with the delegation. To reduce network loads all rewards storing in a pool. You can take your part of bounty at any time by commands at delegator section. - the commission that validator get for the work. Must be fraction >0 and <=1 - delegator address. Starts with cyber most often coinciding with - account address. Starts with cyber - name of account in cybercli - validator address. Starts with cybervaloper - the part of illiquid tokens that you want to unbonding or redelegate. Must be fraction >0 and <=1 - version of testnet.","title":"Glossary"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#general-commands","text":"","title":"General commands"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#show-all-validators","text":"Return set of all active and jailed validators. docker exec cyberd cyberdcli query staking validators --trust-node","title":"Show all validators"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#show-chain-status","text":"Return general chain information docker exec cyberd cyberdcli status --indent","title":"Show chain status"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#distribution-params","text":"docker exec cyberd cyberdcli query distr params --trust-node","title":"Distribution params"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#the-amount-of-outstanding-rewards","text":"Return the sum of rewards in a pool docker exec cyberd cyberdcli query distr outstanding-rewards --trust-node","title":"The amount of outstanding rewards"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#staking-params","text":"Chain staking info docker exec cyberd cyberdcli query staking params --trust-node","title":"Staking params"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#staking-pool","text":"docker exec cyberd cyberdcli query staking pool --trust-node","title":"Staking pool"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#account-management","text":"","title":"Account management"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#import-an-account-by-seed-phrase-and-store-it-in-local-keystore","text":"docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover","title":"Import an account by seed phrase and store it in local keystore"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#import-an-account-by-private-key-and-store-it-in-local-keystore-private-key-could-be-your-eth-private-key","text":"docker exec -ti cyberd cyberdcli keys add import_private <your_key_name>","title":"Import an account by private key and store it in local keystore (private key could be your ETH private key)"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#create-a-new-account","text":"docker exec -ti cyberd cyberdcli keys add <your_key_name>","title":"Create a new account"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#show-account-information","text":"Name, address and public key of current account docker exec cyberd cyberdcli keys show <your_key_name>","title":"Show account information"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#show-account-balance","text":"Return account number, balance, public key in 16 and sequence. Don't work if from current account no outgoing transactions. Issue in progress docker exec cyberd cyberdcli query account <your_key_address>","title":"Show account balance."},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#list-existing-keys","text":"Return all keys in cyberdcli docker exec cyberd cyberdcli keys list","title":"List existing keys"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#delete-account-from-cybercli","text":"docker exec -ti cyberd cyberdcli keys delete <deleting_key_name>","title":"Delete account from cybercli"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#update-account-password","text":"docker exec -ti cyberd cyberdcli keys update <your_key_name>","title":"Update account password"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#send-tokens","text":"docker exec -ti cyberd cyberdcli tx send \\ --from = <your_key_name> \\ --to = <key_address_to_send_tokens> \\ --amount = <amount>cyb \\ --chain-id = <testnet_chain_id>","title":"Send tokens"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#linking-content","text":"Just ipfs hashes available as a CID docker exec -ti cyberd cyberdcli link \\ --from = <your_key_name> \\ --cid-from = <key_phrase_to_link> \\ --cid-to = <content_that_you_want_to_link> \\ --chain-id = <testnet_chain_id>","title":"Linking content"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#validator-commands","text":"","title":"Validator commands"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#get-all-validators","text":"docker exec cyberd cyberdcli query staking validators \\ --trust-node","title":"Get all validators"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#the-amount-of-commission","text":"Available to withdraw validator comission. docker exec cyberd cyberdcli query distr commission <operator_address>","title":"The amount of commission"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#state-of-current-validator","text":"docker exec cyberd cyberdcli query staking validator <operator_address>","title":"State of current validator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#return-all-delegations-to-validator","text":"docker exec cyberd cyberdcli query staking delegations-to <operator_address>","title":"Return all delegations to validator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#edit-commission-in-existing-validator-account","text":"docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --commission-rate = <new_comission_rate_percentage> \\ --chain-id = <testnet_chain_id>","title":"Edit commission in existing validator account"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#withdraw-comission-for-either-a-delegation","text":"docker exec -ti cyberd cyberdcli tx distr withdraw-rewards \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> \\ --is-validator","title":"Withdraw comission for either a delegation"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#edit-site-and-description-in-existing-validator-account","text":"Will be available at description section docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --details = \"<description>\" \\ --website = <your_website> \\ --chain-id = <testnet_chain_id>","title":"Edit site and description in existing validator account"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#unjail-validator-previously-jailed-for-downtime","text":"docker exec -ti cyberd cyberdcli tx slashing unjail \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Unjail validator previously jailed for downtime"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#get-info-about-redelegation-process-from-validator","text":"docker exec -ti cyberd cyberdcli query staking redelegations-from <operator_address>","title":"Get info about redelegation process from validator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#delegator-commands","text":"","title":"Delegator commands"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#return-distribution-delegator-rewards-according-current-validator","text":"docker exec -ti cyberd cyberdcli query distr rewards <delegator_address> <operator_address>","title":"Return distribution delegator rewards according current validator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#return-delegator-shares-with-current-validator","text":"docker exec -ti cyberd cyberdcli query staking delegation <delegator_address> <operator_address>","title":"Return delegator shares with current validator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#return-all-delegations-made-from-one-delegator","text":"docker exec -ti cyberd cyberdcli query staking delegations <delegator_address>","title":"Return all delegations made from one delegator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#return-all-unbonding-delegatations-from-a-validator","text":"docker exec -ti cyberd cyberdcli query staking unbonding-delegations-from <operator_address>","title":"Return all unbonding delegatations from a validator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#withdraw-rewards-for-either-a-delegation","text":"docker exec -ti cyberd cyberdcli tx distr withdraw-rewards \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> \\ --only-from-validator = <operator_address>","title":"Withdraw rewards for either a delegation"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#change-the-default-withdraw-address-for-rewards-associated-with-an-address","text":"docker exec -ti cyberd cyberdcli tx distr set-withdraw-addr <your_new_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Change the default withdraw address for rewards associated with an address"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#delegate-liquid-tokens-to-a-validator","text":"docker exec -ti cyberd cyberdcli tx staking delegate \\ --from = <your_key_name> \\ --amount = <amount>cyb \\ --validator = <operator_address> \\ --chain-id = <testnet_chain_id>","title":"Delegate liquid tokens to a validator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#redelegate-illiquid-tokens-from-one-validator-to-another-in-absolute-cyb-value","text":"3 weeks for redelegation. Amount must be less than already delegated. docker exec -ti cyberd cyberdcli tx staking redelegate --from = <your_key_name> \\ --addr-validator-dest = <new_operator_address> \\ --addr-validator-source = <old_operator_address> \\ --shares-amount = <amount>cyb --chain-id = <testnet_chain_id>","title":"Redelegate illiquid tokens from one validator to another in absolute cyb value"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#redelegate-illiquid-tokens-from-one-validator-to-another-in-percentages","text":"3 weeks for redelegation. docker exec -ti cyberd cyberdcli tx staking redelegate --from = <your_key_name> \\ --addr-validator-dest = <new_operator_address> \\ --addr-validator-source = <old_operator_address> \\ --shares-fraction = <shares_percentage> \\ --chain-id = <testnet_chain_id>","title":"Redelegate illiquid tokens from one validator to another in percentages"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#unbond-shares-from-a-validator-in-absolute-cyb-value","text":"3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond --from = <your_key_name> \\ --shares-amount = <amount>cyb --validator == <operator_address> \\ --chain-id = <testnet_chain_id>","title":"Unbond shares from a validator in absolute cyb value"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#unbond-shares-from-a-validator-in-percentages","text":"3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond --from = <your_key_name> \\ --shares-fraction = <shares_percentage> \\ --validator == <operator_address> \\ --chain-id = <testnet_chain_id>","title":"Unbond shares from a validator in percentages"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#get-info-about-unbonding-delegation-process-to-current-validator","text":"docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address> <operator_address>","title":"Get info about unbonding delegation process to current validator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#get-info-about-unbonding-delegation-process-to-all-unbonded-validators","text":"docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address>","title":"Get info about unbonding delegation process to all unbonded validators"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#get-info-about-redelegation-process-from-to-current-validator","text":"docker exec -ti cyberd cyberdcli query staking redelegation <delegator_address> <old_operator_address> <new_operator_address>","title":"Get info about redelegation process from to current validator"},{"location":"blog/ultimate-commands-guide/ultimate-commands-guide/#get-info-about-all-redelegation-processes-by-one-delegator","text":"docker exec -ti cyberd cyberdcli query staking redelegations <delegator_address>","title":"Get info about all redelegation processes by one delegator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/","text":"Ultimate cyberd CLI guide. Testnet: Euler-3 \u00b6 If something wrong... \u00b6 First of all I would like to encourage you to use --help feature if you want to get better experience of using cyberdcli. This is really easy way to find all necessary commands with options and flags. For example you can enter: docker exec cyberd cyberdcli --help You should see this message: Command line interface for interacting with cyberd Usage: cyberdcli [ command ] Available Commands: status Query remote node for status query Querying subcommands tx Transactions subcommands keys Add or view local private keys rest-server Start LCD ( light-client daemon ) , a local REST server version Print the app version link Create and sign a link tx help Help about any command Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding ( hex | b64 | btc ) ( default \"hex\" ) -h, --help help for cyberdcli --home string directory for config and data ( default \"/root/.cyberdcli\" ) -o, --output string Output format ( text | json ) ( default \"text\" ) --trace print out full stack trace on errors Help feature working as a stairs - you can use it with any command to find available options, subcommands and flags. For example lets explore query subcommands: docker exec cyberd cyberdcli query --help now, you can see subcommand structure: Usage: cyberdcli query [ command ] and available subcommands and flags: Available Commands: tendermint-validator-set Get the full tendermint validator set at given height block Get verified data for a the block at given height txs Search for all transactions that match the given tags. tx Matches this txhash over all committed blocks account Query account balance gov Querying commands for the governance module distr Querying commands for the distribution module staking Querying commands for the staking module slashing Querying commands for the slashing module Flags: -h, --help help for query Global Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding ( hex | b64 | btc ) ( default \"hex\" ) --home string directory for config and data ( default \"/root/.cyberdcli\" ) -o, --output string Output format ( text | json ) ( default \"text\" ) --trace print out full stack trace on errors Alright, lets explore account subcommand: docker exec cyberd cyberdcli query account --help Now we see all options available at this subcommands, namely, account address and flags: Usage: cyberdcli query account [ address ] [ flags ] In most cases you need just two extra flags: --from = <your_key_name> \\ --chain-id = <testnet_chain_id> That it. This is very useful ability for using cyberdcli and troubleshooting. Glossary \u00b6 Bandwidth - The recovered unit of your account. Used to complete transactions in the cyberd blockchain. The amount of your bandwidth calculates like: your_cyb_tokens / all_cyb_tokens_in_cyberd * 2000*1000*100 . Messages cost is 500 (exclude link). Transaction consists of one or more messages m_1, m_2, ..., m_n . Transaction cost is 300 + c_1 + c_2 ... + c_n , where c_i - cost of m_i message. Full bandwidth regeneration time is 86400 blocks (24 hours) commission - tokens that you've earned with validation. You can take them at any time. illiquid tokens - non-transferable tokens that you've delegated to the validator. Delegation process duration - 1 block. Unbonding process, or taking back share - 3 weeks. link - reference between CID key and CID value. Link message cost is 100*n , where n is quantity of links in message. Link finalization time is 1 block. New rank for CIDs of link will be recalculated at period from 100 to 200 blocks (from 100 to 200 seconds). liquid tokens - transferable tokens in cyberd blockchain local keystore - store with keys in you local machine rewards - tokens that you've earned with the delegation. To reduce network loads all rewards storing in a pool. You can take your part of bounty at any time by commands at delegator section. - the commission that validator get for the work. Must be fraction >0 and <=1 - delegator address. Starts with cyber most often coinciding with - account address. Starts with cyber - name of account in cybercli - validator address. Starts with cybervaloper - the part of illiquid tokens that you want to unbonding or redelegate. Must be fraction >0 and <=1 - version of testnet. General commands \u00b6 Show all validators \u00b6 Return set of all active and jailed validators. docker exec cyberd cyberdcli query staking validators --trust-node Show chain status \u00b6 Return general chain information docker exec cyberd cyberdcli status --indent Distribution params \u00b6 docker exec cyberd cyberdcli query distr params --trust-node The amount of outstanding rewards \u00b6 Return the sum of rewards in a pool docker exec cyberd cyberdcli query distr outstanding-rewards --trust-node Staking params \u00b6 Chain staking info docker exec cyberd cyberdcli query staking params --trust-node Staking pool \u00b6 docker exec cyberd cyberdcli query staking pool --trust-node Account management \u00b6 Import an account by seed phrase and store it in local keystore \u00b6 docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover Import an account by private key and store it in local keystore (private key could be your ETH private key) \u00b6 docker exec -ti cyberd cyberdcli keys add import_private <your_key_name> Create a new account \u00b6 docker exec -ti cyberd cyberdcli keys add <your_key_name> Show account information \u00b6 Name, address and public key of current account docker exec cyberd cyberdcli keys show <your_key_name> Show account balance. \u00b6 Return account number, balance, public key in 16 and sequence. Don't work if from current account no outgoing transactions. Issue in progress docker exec cyberd cyberdcli query account <your_key_address> List existing keys \u00b6 Return all keys in cyberdcli docker exec cyberd cyberdcli keys list Delete account from cybercli \u00b6 docker exec -ti cyberd cyberdcli keys delete <deleting_key_name> Update account password \u00b6 docker exec -ti cyberd cyberdcli keys update <your_key_name> Send tokens \u00b6 docker exec -ti cyberd cyberdcli tx send <to_address> <amount_cyb> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Linking content \u00b6 Just ipfs hashes available as a CID docker exec -ti cyberd cyberdcli link \\ --from = <your_key_name> \\ --cid-from = <key_phrase_to_link> \\ --cid-to = <content_that_you_want_to_link> \\ --chain-id = <testnet_chain_id> Validator commands \u00b6 Get all validators \u00b6 docker exec cyberd cyberdcli query staking validators \\ --trust-node The amount of commission \u00b6 Available to withdraw validator commission. docker exec cyberd cyberdcli query distr commission <operator_address> State of current validator \u00b6 docker exec cyberd cyberdcli query staking validator <operator_address> Return all delegations to validator \u00b6 docker exec cyberd cyberdcli query staking delegations-to <operator_address> Edit commission in existing validator account \u00b6 docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --commission-rate = <new_comission_rate_percentage> \\ --chain-id = <testnet_chain_id> Withdraw commission for either a delegation \u00b6 docker exec -ti cyberd cyberdcli tx distr withdraw-rewards <operator_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> \\ --commission Edit site and description in existing validator account \u00b6 Will be available at description section docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --details = \"<description>\" \\ --website = <your_website> \\ --chain-id = <testnet_chain_id> Unjail validator previously jailed for downtime \u00b6 docker exec -ti cyberd cyberdcli tx slashing unjail \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Get info about redelegation process from validator \u00b6 docker exec -ti cyberd cyberdcli query staking redelegations-from <operator_address> Delegator commands \u00b6 Return distribution delegator rewards according current validator \u00b6 docker exec -ti cyberd cyberdcli query distr rewards <delegator_address> <operator_address> Return delegator shares with current validator \u00b6 docker exec -ti cyberd cyberdcli query staking delegation <delegator_address> <operator_address> Return all delegations made from one delegator \u00b6 docker exec -ti cyberd cyberdcli query staking delegations <delegator_address> Return all unbonding delegatations from a validator \u00b6 docker exec -ti cyberd cyberdcli query staking unbonding-delegations-from <operator_address> Withdraw rewards for either a delegation \u00b6 docker exec -ti cyberd cyberdcli tx distr withdraw-rewards <operator_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Withdraw all delegation rewards \u00b6 docker exec -ti cyberd cyberdcli tx distr withdraw-all-rewards \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Change the default withdraw address for rewards associated with an address \u00b6 docker exec -ti cyberd cyberdcli tx distr set-withdraw-addr <your_new_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Delegate liquid tokens to a validator \u00b6 docker exec -ti cyberd cyberdcli tx staking delegate <operator_address> <amount_cyb> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Redelegate illiquid tokens from one validator to another in absolute cyb value \u00b6 3 weeks for redelegation. Amount must be less than already delegated. docker exec -ti cyberd cyberdcli tx staking redelegate <old_operator_address> <new_operator_address> <amount_cyb> --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Redelegate illiquid tokens from one validator to another in percentages \u00b6 3 weeks for redelegation. docker exec -ti cyberd cyberdcli tx staking redelegate <old_operator_address> <new_operator_address> <shares_percentage> --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Unbond shares from a validator in absolute cyb value \u00b6 3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond <operator_address> <amount_cyb> --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Unbond shares from a validator in percentages \u00b6 3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond <operator_address> <shares_percentage> --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Get info about unbonding delegation process to current validator \u00b6 docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address> <operator_address> Get info about unbonding delegation process to all unbonded validators \u00b6 docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address> Get info about redelegation process from to current validator \u00b6 docker exec -ti cyberd cyberdcli query staking redelegation <delegator_address> <old_operator_address> <new_operator_address> Get info about all redelegation processes by one delegator \u00b6 docker exec -ti cyberd cyberdcli query staking redelegations <delegator_address>","title":"Ultimate cyberd CLI guide. Testnet Euler-3"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#ultimate-cyberd-cli-guide-testnet-euler-3","text":"","title":"Ultimate cyberd CLI guide. Testnet: Euler-3"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#if-something-wrong","text":"First of all I would like to encourage you to use --help feature if you want to get better experience of using cyberdcli. This is really easy way to find all necessary commands with options and flags. For example you can enter: docker exec cyberd cyberdcli --help You should see this message: Command line interface for interacting with cyberd Usage: cyberdcli [ command ] Available Commands: status Query remote node for status query Querying subcommands tx Transactions subcommands keys Add or view local private keys rest-server Start LCD ( light-client daemon ) , a local REST server version Print the app version link Create and sign a link tx help Help about any command Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding ( hex | b64 | btc ) ( default \"hex\" ) -h, --help help for cyberdcli --home string directory for config and data ( default \"/root/.cyberdcli\" ) -o, --output string Output format ( text | json ) ( default \"text\" ) --trace print out full stack trace on errors Help feature working as a stairs - you can use it with any command to find available options, subcommands and flags. For example lets explore query subcommands: docker exec cyberd cyberdcli query --help now, you can see subcommand structure: Usage: cyberdcli query [ command ] and available subcommands and flags: Available Commands: tendermint-validator-set Get the full tendermint validator set at given height block Get verified data for a the block at given height txs Search for all transactions that match the given tags. tx Matches this txhash over all committed blocks account Query account balance gov Querying commands for the governance module distr Querying commands for the distribution module staking Querying commands for the staking module slashing Querying commands for the slashing module Flags: -h, --help help for query Global Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding ( hex | b64 | btc ) ( default \"hex\" ) --home string directory for config and data ( default \"/root/.cyberdcli\" ) -o, --output string Output format ( text | json ) ( default \"text\" ) --trace print out full stack trace on errors Alright, lets explore account subcommand: docker exec cyberd cyberdcli query account --help Now we see all options available at this subcommands, namely, account address and flags: Usage: cyberdcli query account [ address ] [ flags ] In most cases you need just two extra flags: --from = <your_key_name> \\ --chain-id = <testnet_chain_id> That it. This is very useful ability for using cyberdcli and troubleshooting.","title":"If something wrong..."},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#glossary","text":"Bandwidth - The recovered unit of your account. Used to complete transactions in the cyberd blockchain. The amount of your bandwidth calculates like: your_cyb_tokens / all_cyb_tokens_in_cyberd * 2000*1000*100 . Messages cost is 500 (exclude link). Transaction consists of one or more messages m_1, m_2, ..., m_n . Transaction cost is 300 + c_1 + c_2 ... + c_n , where c_i - cost of m_i message. Full bandwidth regeneration time is 86400 blocks (24 hours) commission - tokens that you've earned with validation. You can take them at any time. illiquid tokens - non-transferable tokens that you've delegated to the validator. Delegation process duration - 1 block. Unbonding process, or taking back share - 3 weeks. link - reference between CID key and CID value. Link message cost is 100*n , where n is quantity of links in message. Link finalization time is 1 block. New rank for CIDs of link will be recalculated at period from 100 to 200 blocks (from 100 to 200 seconds). liquid tokens - transferable tokens in cyberd blockchain local keystore - store with keys in you local machine rewards - tokens that you've earned with the delegation. To reduce network loads all rewards storing in a pool. You can take your part of bounty at any time by commands at delegator section. - the commission that validator get for the work. Must be fraction >0 and <=1 - delegator address. Starts with cyber most often coinciding with - account address. Starts with cyber - name of account in cybercli - validator address. Starts with cybervaloper - the part of illiquid tokens that you want to unbonding or redelegate. Must be fraction >0 and <=1 - version of testnet.","title":"Glossary"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#general-commands","text":"","title":"General commands"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#show-all-validators","text":"Return set of all active and jailed validators. docker exec cyberd cyberdcli query staking validators --trust-node","title":"Show all validators"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#show-chain-status","text":"Return general chain information docker exec cyberd cyberdcli status --indent","title":"Show chain status"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#distribution-params","text":"docker exec cyberd cyberdcli query distr params --trust-node","title":"Distribution params"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#the-amount-of-outstanding-rewards","text":"Return the sum of rewards in a pool docker exec cyberd cyberdcli query distr outstanding-rewards --trust-node","title":"The amount of outstanding rewards"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#staking-params","text":"Chain staking info docker exec cyberd cyberdcli query staking params --trust-node","title":"Staking params"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#staking-pool","text":"docker exec cyberd cyberdcli query staking pool --trust-node","title":"Staking pool"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#account-management","text":"","title":"Account management"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#import-an-account-by-seed-phrase-and-store-it-in-local-keystore","text":"docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover","title":"Import an account by seed phrase and store it in local keystore"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#import-an-account-by-private-key-and-store-it-in-local-keystore-private-key-could-be-your-eth-private-key","text":"docker exec -ti cyberd cyberdcli keys add import_private <your_key_name>","title":"Import an account by private key and store it in local keystore (private key could be your ETH private key)"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#create-a-new-account","text":"docker exec -ti cyberd cyberdcli keys add <your_key_name>","title":"Create a new account"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#show-account-information","text":"Name, address and public key of current account docker exec cyberd cyberdcli keys show <your_key_name>","title":"Show account information"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#show-account-balance","text":"Return account number, balance, public key in 16 and sequence. Don't work if from current account no outgoing transactions. Issue in progress docker exec cyberd cyberdcli query account <your_key_address>","title":"Show account balance."},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#list-existing-keys","text":"Return all keys in cyberdcli docker exec cyberd cyberdcli keys list","title":"List existing keys"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#delete-account-from-cybercli","text":"docker exec -ti cyberd cyberdcli keys delete <deleting_key_name>","title":"Delete account from cybercli"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#update-account-password","text":"docker exec -ti cyberd cyberdcli keys update <your_key_name>","title":"Update account password"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#send-tokens","text":"docker exec -ti cyberd cyberdcli tx send <to_address> <amount_cyb> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Send tokens"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#linking-content","text":"Just ipfs hashes available as a CID docker exec -ti cyberd cyberdcli link \\ --from = <your_key_name> \\ --cid-from = <key_phrase_to_link> \\ --cid-to = <content_that_you_want_to_link> \\ --chain-id = <testnet_chain_id>","title":"Linking content"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#validator-commands","text":"","title":"Validator commands"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#get-all-validators","text":"docker exec cyberd cyberdcli query staking validators \\ --trust-node","title":"Get all validators"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#the-amount-of-commission","text":"Available to withdraw validator commission. docker exec cyberd cyberdcli query distr commission <operator_address>","title":"The amount of commission"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#state-of-current-validator","text":"docker exec cyberd cyberdcli query staking validator <operator_address>","title":"State of current validator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#return-all-delegations-to-validator","text":"docker exec cyberd cyberdcli query staking delegations-to <operator_address>","title":"Return all delegations to validator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#edit-commission-in-existing-validator-account","text":"docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --commission-rate = <new_comission_rate_percentage> \\ --chain-id = <testnet_chain_id>","title":"Edit commission in existing validator account"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#withdraw-commission-for-either-a-delegation","text":"docker exec -ti cyberd cyberdcli tx distr withdraw-rewards <operator_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> \\ --commission","title":"Withdraw commission for either a delegation"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#edit-site-and-description-in-existing-validator-account","text":"Will be available at description section docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --details = \"<description>\" \\ --website = <your_website> \\ --chain-id = <testnet_chain_id>","title":"Edit site and description in existing validator account"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#unjail-validator-previously-jailed-for-downtime","text":"docker exec -ti cyberd cyberdcli tx slashing unjail \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Unjail validator previously jailed for downtime"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#get-info-about-redelegation-process-from-validator","text":"docker exec -ti cyberd cyberdcli query staking redelegations-from <operator_address>","title":"Get info about redelegation process from validator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#delegator-commands","text":"","title":"Delegator commands"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#return-distribution-delegator-rewards-according-current-validator","text":"docker exec -ti cyberd cyberdcli query distr rewards <delegator_address> <operator_address>","title":"Return distribution delegator rewards according current validator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#return-delegator-shares-with-current-validator","text":"docker exec -ti cyberd cyberdcli query staking delegation <delegator_address> <operator_address>","title":"Return delegator shares with current validator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#return-all-delegations-made-from-one-delegator","text":"docker exec -ti cyberd cyberdcli query staking delegations <delegator_address>","title":"Return all delegations made from one delegator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#return-all-unbonding-delegatations-from-a-validator","text":"docker exec -ti cyberd cyberdcli query staking unbonding-delegations-from <operator_address>","title":"Return all unbonding delegatations from a validator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#withdraw-rewards-for-either-a-delegation","text":"docker exec -ti cyberd cyberdcli tx distr withdraw-rewards <operator_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Withdraw rewards for either a delegation"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#withdraw-all-delegation-rewards","text":"docker exec -ti cyberd cyberdcli tx distr withdraw-all-rewards \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Withdraw all delegation rewards"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#change-the-default-withdraw-address-for-rewards-associated-with-an-address","text":"docker exec -ti cyberd cyberdcli tx distr set-withdraw-addr <your_new_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Change the default withdraw address for rewards associated with an address"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#delegate-liquid-tokens-to-a-validator","text":"docker exec -ti cyberd cyberdcli tx staking delegate <operator_address> <amount_cyb> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Delegate liquid tokens to a validator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#redelegate-illiquid-tokens-from-one-validator-to-another-in-absolute-cyb-value","text":"3 weeks for redelegation. Amount must be less than already delegated. docker exec -ti cyberd cyberdcli tx staking redelegate <old_operator_address> <new_operator_address> <amount_cyb> --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Redelegate illiquid tokens from one validator to another in absolute cyb value"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#redelegate-illiquid-tokens-from-one-validator-to-another-in-percentages","text":"3 weeks for redelegation. docker exec -ti cyberd cyberdcli tx staking redelegate <old_operator_address> <new_operator_address> <shares_percentage> --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Redelegate illiquid tokens from one validator to another in percentages"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#unbond-shares-from-a-validator-in-absolute-cyb-value","text":"3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond <operator_address> <amount_cyb> --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Unbond shares from a validator in absolute cyb value"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#unbond-shares-from-a-validator-in-percentages","text":"3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond <operator_address> <shares_percentage> --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Unbond shares from a validator in percentages"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#get-info-about-unbonding-delegation-process-to-current-validator","text":"docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address> <operator_address>","title":"Get info about unbonding delegation process to current validator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#get-info-about-unbonding-delegation-process-to-all-unbonded-validators","text":"docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address>","title":"Get info about unbonding delegation process to all unbonded validators"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#get-info-about-redelegation-process-from-to-current-validator","text":"docker exec -ti cyberd cyberdcli query staking redelegation <delegator_address> <old_operator_address> <new_operator_address>","title":"Get info about redelegation process from to current validator"},{"location":"blog/ultimate-commands-guide_v2/ultimate-commands-guide_v2/#get-info-about-all-redelegation-processes-by-one-delegator","text":"docker exec -ti cyberd cyberdcli query staking redelegations <delegator_address>","title":"Get info about all redelegation processes by one delegator"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/","text":"Ultimate cyberd validator setup. Testnet: Euler-1. \u00b6 What is this \u00b6 The cyberd is a public Delegated Proof-of-Stake (DPoS) protocol based on Tendermint Byzantine Fault-Tolerant consensus, meaning that validator's weight is determined by the amount of staking tokens bonded as collateral. These tokens can be staked directly by the validator or delegated to them by token holders. The weight (i.e. total stake) of a validator determines whether or not it is an active validator, and also how frequently this node will have to propose a block and how much revenue it will obtain. Validators \u00b6 The maximum number of validators is 146. If number of active validators is less than 146 all of them take a part of signing blocks. If more - top 146 with staked tokens will in a active validators set. Validators requirements \u00b6 Rank calculation on a cyberd is benefit GPU computation. They easy to parallelize that why is the best way is to use GPU. Minimal requirements for the next two weeks (until the middle of February): CPU: 4 cores RAM: 16 GB SSD: 256 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS Recommended requirements: CPU: 6 cores RAM: 64 GB SSD: 512 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS Validator setup \u00b6 Third-party software \u00b6 Cyberd main distribution unit is a docker container. All images are located in default Dockerhub registry . In order to access GPU from the container, Nvidia drivers version 410+ and Nvidia docker runtime should be installed on the host system. For great user experience, we propose you to use portainer - docker containers manager. You can skip any subsection of this if you already had and configured necessary software. Docker installation \u00b6 Update the apt package index: sudo apt-get update Install packages to allow apt to use a repository over HTTPS: sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common May require curl installation apt-get install curl Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" Update the apt package index. sudo apt-get update Install the latest version of Docker CE and containerd, or go to the next step to install a specific version: sudo apt-get install docker-ce docker-ce-cli containerd.io If you don\u2019t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group. Create the docker group. sudo groupadd docker Add your user to the docker group. sudo usermod -aG docker $USER 8. Reboot the system for the changes to take effect. Portainer installation \u00b6 Before installing Portainer, download the Portainer image from the DockerHub using the docker pull command below. docker pull portainer/portainer Now run Portainer using the simple docker command below. docker run -d --restart always -p 9000 :9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer Open your browser and go to: localhost:9000 Set password, chose local tab and click connect . All containers will be available at containers tab. Nvidia drivers installation \u00b6 To proceed first add the ppa:graphics-drivers/ppa repository into your system: sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt update Next, identify your graphic card model and recommended driver: ubuntu-drivers devices You should see something like this: == /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00001BA1sv00001462sd000011E4bc03sc00i00 vendor : NVIDIA Corporation model : GP104M [ GeForce GTX 1070 Mobile ] driver : nvidia-driver-390 - third-party free driver : nvidia-driver-410 - third-party free driver : nvidia-driver-396 - third-party free driver : nvidia-driver-415 - third-party free recommended driver : xserver-xorg-video-nouveau - distro free builtin 3. We need 410+ drivers release. As we see v415 is recommended. The command below will install the recommended version of drivers. sudo ubuntu-drivers autoinstall Drivers will install due approximately 10 minutes. DKMS: install completed. Setting up libxdamage1:i386 ( 1 :1.1.4-3 ) ... Setting up libxext6:i386 ( 2 :1.3.3-1 ) ... Setting up libxfixes3:i386 ( 1 :5.0.3-1 ) ... Setting up libnvidia-decode-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up build-essential ( 12 .4ubuntu1 ) ... Setting up libnvidia-gl-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libnvidia-encode-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up nvidia-driver-415 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libxxf86vm1:i386 ( 1 :1.1.4-1 ) ... Setting up libglx-mesa0:i386 ( 18 .0.5-0ubuntu0~18.04.1 ) ... Setting up libglx0:i386 ( 1 .0.0-2ubuntu2.2 ) ... Setting up libgl1:i386 ( 1 .0.0-2ubuntu2.2 ) ... Setting up libnvidia-ifr1-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libnvidia-fbc1-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Processing triggers for libc-bin ( 2 .27-3ubuntu1 ) ... Processing triggers for initramfs-tools ( 0 .130ubuntu3.1 ) ... update-initramfs: Generating /boot/initrd.img-4.15.0-45-generic Reboot the system for the changes to take effect. Check installed drivers nvidia-smi You should see this: +-----------------------------------------------------------------------------+ | NVIDIA-SMI 415.27 Driver Version: 415.27 CUDA Version: 10.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 On | N/A | | N/A 54C P0 36W / N/A | 445MiB / 8117MiB | 0% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 882 G /usr/lib/xorg/Xorg 302MiB | | 0 1046 G /usr/bin/gnome-shell 139MiB | +-----------------------------------------------------------------------------+ Install Nvidia container runtime for docker \u00b6 Add the package repositories curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\ sudo apt-key add - distribution = $( . /etc/os-release ; echo $ID$VERSION_ID ) curl -s -L https://nvidia.github.io/nvidia-docker/ $distribution /nvidia-docker.list | \\ sudo tee /etc/apt/sources.list.d/nvidia-docker.list You should see this: deb https://nvidia.github.io/libnvidia-container/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-container-runtime/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-docker/ubuntu18.04/$(ARCH) / Install nvidia-docker2 and reload the Docker daemon configuration sudo apt-get update sudo apt-get install -y nvidia-docker2 sudo pkill -SIGHUP dockerd Test nvidia-smi with the latest official CUDA image docker run --runtime = nvidia --rm nvidia/cuda:10.0-base nvidia-smi Output logs must should coincide as earlier: Unable to find image 'nvidia/cuda:10.0-base' locally 10.0-base: Pulling from nvidia/cuda 38e2e6cd5626: Pull complete 705054bc3f5b: Pull complete c7051e069564: Pull complete 7308e914506c: Pull complete 5260e5fce42c: Pull complete 8e2b19e62adb: Pull complete Digest: sha256:625491db7e15efcc78a529d3a2e41b77ffb5b002015983fdf90bf28955277d68 Status: Downloaded newer image for nvidia/cuda:10.0-base Fri Feb 1 05:41:12 2019 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 415.27 Driver Version: 415.27 CUDA Version: 10.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 On | N/A | | N/A 55C P0 31W / N/A | 445MiB / 8117MiB | 38% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| +-----------------------------------------------------------------------------+ Your machine is ready to launch fullnode. Cyberd fullnode launching \u00b6 Create folders for keys and data storing where you want: mkdir cyberd mkdir cyberdcli Run fullnode docker run -d --name = cyberd --restart always --runtime = nvidia -p 26656 :26656 -p 26657 :26657 -p 26660 :26660 -v /<path_to_cyberd>/cyberd:/root/.cyberd -v /<path_to_cyberdcli>/cyberdcli:/root/.cyberdcli cyberd/cyberd:euler-1 3. After successful container pulling and launch run to check if your node is connected to the testnet: docker exec cyberd cyberdcli status The possible output looks like this: {\"node_info\":{\"protocol_version\":{\"p2p\":\"6\",\"block\":\"9\",\"app\":\"0\"},\"id\":\"93b776d3eb3f3ce9d9bda7164bc8af3acacff7b6\",\"listen_addr\":\"tcp://0.0.0.0:26656\",\"network\":\"euler-1\",\"version\":\"0.29.1\",\"channels\":\"4020212223303800\",\"moniker\":\"anonymous\",\"other\":{\"tx_index\":\"on\",\"rpc_address\":\"tcp://0.0.0.0:26657\"}},\"sync_info\":{\"latest_block_hash\":\"686B4E65415D4E56D3B406153C965C0897D0CE27004E9CABF65064B6A0ED4240\",\"latest_app_hash\":\"0A1F6D260945FD6E926785F07D41049B8060C60A132F5BA49DD54F7B1C5B2522\",\"latest_block_height\":\"45533\",\"latest_block_time\":\"2019-02-01T09:49:19.771375108Z\",\"catching_up\":false},\"validator_info\":{\"address\":\"66098853CF3B61C4313DD487BA21EDF8DECACDF0\",\"pub_key\":{\"type\":\"tendermint/PubKeyEd25519\",\"value\":\"uZrCCdZTJoHE1/v+EvhtZufJgA3zAm1bN4uZA3RyvoY=\"},\"voting_power\":\"0\"}} Your node has started to sync. The syncing process you can see in the terminal. Open a new tab and run following command: docker logs cyberd --follow Or go to localhost:9000 and open logs at cyberd container: Syncing has started. Syncing time depends on your internet bandwidth, connection and blockchain height. As at 2019/02/03 syncing time approximately 15-20 minutes. Once you see in logs that blocks syncing for 1 second your node is synced. Additional information available by API endpoint at localhost:26657 f.e. the number of active validators available here localhost:26657/validators Validator start \u00b6 After your node successful synced you can run validator. Prepare stake address \u00b6 If you already have address with CYB and know seed phrase or private key just restore it into your local keystore. docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover docker exec cyberd cyberdcli keys show <your_key_name> If you have been lucky enought and your Ethereum address has been included in genesis you can import ethereum private key Please, do not import high value Ethereum accounts. This can not be safe! cyberd software is a new software and is not battle tested yet. docker exec -ti cyberd cyberdcli keys add import_private <your_key_name> docker exec cyberd cyberdcli keys show <your_key_name> If you want to create new acccount use the command below. Also, you should send coins to that address to bound them later during validator submitting. docker exec -ti cyberd cyberdcli keys add <your_key_name> docker exec cyberd cyberdcli keys show <your_key_name> is any name you pick to represent this key pair. You have to refer to this later when you use the keys to sign transactions. It will ask you to enter your password twice to encrypt the key. You also need to enter your password when you use your key to sign any transaction. The command returns the address, public key and a seed phrase which you can use it to recover your account if you forget your password later. Keep the seed phrase in a safe place in case you have to use them. The address showing here is your account address. Let\u2019s call this . It stores your assets. Send create validator transaction \u00b6 Validators are actors on the network committing new blocks by submitting their votes. It refers to the node itself, not a single person or a single account. Therefore, the public key here is referring to the node public key, not the public key of the address you have just created. To get the node public key, run the following command: docker exec cyberd cyberd tendermint show-validator It will return a bech32 public key. Let\u2019s call it . The next step you have to declare a validator candidate. The validator candidate is the account which stake the coins. So the validator candidate is an account this time. To declare a validator candidate, run the following command adjusting stake amount and other fields. docker exec -ti cyberd cyberdcli tx staking create-validator \\ --amount = 10000000cyb \\ --pubkey = <your_node_pubkey> \\ --moniker = <your_node_nickname> \\ --trust-node \\ --from = <your_key_name> \\ --commission-rate = \"0.10\" \\ --commission-max-rate = \"0.20\" \\ --commission-max-change-rate = \"0.01\" \\ --chain-id = euler-1 Verify that you validating \u00b6 docker exec -ti cyberd cyberdcli query staking validators --trust-node = true If you see your <your_node_nickname> with status Bonded and Jailed false everything must be good. You are validating the network. Maintenance of validator \u00b6 jailing \u00b6 If your validator go under slashing conditions it first go to jail. After this event operator must unjail it manually. docker exec -ti cyberd cyberdcli tx slashing unjail --from = <your_key_name> --chain-id = euler-1 Upgrading of validator \u00b6 Updating is easy as pulling the new docker container and launching it again docker stop cyberd docker rm cyberd docker pull cyberd/cyberd:<testnet_chain_id> docker run -d --name = cyberd --restart always --runtime = nvidia \\ -p 26656 :26656 -p 26657 :26657 -p 26660 :26660 \\ -v /root/cyberd:/root/.cyberd \\ -v /root/cyberdcli:/root/.cyberdcli \\ cyberd/cyberd:euler-1 Don't forget to unjail if you was jailed during update. The rank calculation has a linear relationship between GPU memory usage and links quantity. A number of links indefinitely increasing, but the potential of vertical scaling is limited. Understanding this, we are looking for solutions to calculate the same amount of links with fewer capacity. Call to you, validator \u00b6 For now it is time and opportunity go up against blackbox search engines. Obviously, a cryptoeconomic approach can change beneficiaries in this game effectively removing possible sybil attack vectors and removing the necessity to make a decision on example crawling and meaning extraction from one entity to the whole world. Learning sybil-resistant model will probably lead to orders of magnitude more predictive results. As at 2019/02/04 there 9 active validators and 1 jailed. This is enough to support net, but this is not enough for quality grow. We looking for validators. Join us! Connect to us, #fuckgoogle \u00b6 Subscribe at Steemit , Reddit , Twitter , Telegram channel and join our community in @fuckgoogle","title":"Ultimate cyberd validator setup. Testnet Euler-1"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#ultimate-cyberd-validator-setup-testnet-euler-1","text":"","title":"Ultimate cyberd validator setup. Testnet: Euler-1."},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#what-is-this","text":"The cyberd is a public Delegated Proof-of-Stake (DPoS) protocol based on Tendermint Byzantine Fault-Tolerant consensus, meaning that validator's weight is determined by the amount of staking tokens bonded as collateral. These tokens can be staked directly by the validator or delegated to them by token holders. The weight (i.e. total stake) of a validator determines whether or not it is an active validator, and also how frequently this node will have to propose a block and how much revenue it will obtain.","title":"What is this"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#validators","text":"The maximum number of validators is 146. If number of active validators is less than 146 all of them take a part of signing blocks. If more - top 146 with staked tokens will in a active validators set.","title":"Validators"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#validators-requirements","text":"Rank calculation on a cyberd is benefit GPU computation. They easy to parallelize that why is the best way is to use GPU. Minimal requirements for the next two weeks (until the middle of February): CPU: 4 cores RAM: 16 GB SSD: 256 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS Recommended requirements: CPU: 6 cores RAM: 64 GB SSD: 512 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS","title":"Validators requirements"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#validator-setup","text":"","title":"Validator setup"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#third-party-software","text":"Cyberd main distribution unit is a docker container. All images are located in default Dockerhub registry . In order to access GPU from the container, Nvidia drivers version 410+ and Nvidia docker runtime should be installed on the host system. For great user experience, we propose you to use portainer - docker containers manager. You can skip any subsection of this if you already had and configured necessary software.","title":"Third-party software"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#docker-installation","text":"Update the apt package index: sudo apt-get update Install packages to allow apt to use a repository over HTTPS: sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common May require curl installation apt-get install curl Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" Update the apt package index. sudo apt-get update Install the latest version of Docker CE and containerd, or go to the next step to install a specific version: sudo apt-get install docker-ce docker-ce-cli containerd.io If you don\u2019t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group. Create the docker group. sudo groupadd docker Add your user to the docker group. sudo usermod -aG docker $USER 8. Reboot the system for the changes to take effect.","title":"Docker installation"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#portainer-installation","text":"Before installing Portainer, download the Portainer image from the DockerHub using the docker pull command below. docker pull portainer/portainer Now run Portainer using the simple docker command below. docker run -d --restart always -p 9000 :9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer Open your browser and go to: localhost:9000 Set password, chose local tab and click connect . All containers will be available at containers tab.","title":"Portainer installation"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#nvidia-drivers-installation","text":"To proceed first add the ppa:graphics-drivers/ppa repository into your system: sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt update Next, identify your graphic card model and recommended driver: ubuntu-drivers devices You should see something like this: == /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00001BA1sv00001462sd000011E4bc03sc00i00 vendor : NVIDIA Corporation model : GP104M [ GeForce GTX 1070 Mobile ] driver : nvidia-driver-390 - third-party free driver : nvidia-driver-410 - third-party free driver : nvidia-driver-396 - third-party free driver : nvidia-driver-415 - third-party free recommended driver : xserver-xorg-video-nouveau - distro free builtin 3. We need 410+ drivers release. As we see v415 is recommended. The command below will install the recommended version of drivers. sudo ubuntu-drivers autoinstall Drivers will install due approximately 10 minutes. DKMS: install completed. Setting up libxdamage1:i386 ( 1 :1.1.4-3 ) ... Setting up libxext6:i386 ( 2 :1.3.3-1 ) ... Setting up libxfixes3:i386 ( 1 :5.0.3-1 ) ... Setting up libnvidia-decode-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up build-essential ( 12 .4ubuntu1 ) ... Setting up libnvidia-gl-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libnvidia-encode-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up nvidia-driver-415 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libxxf86vm1:i386 ( 1 :1.1.4-1 ) ... Setting up libglx-mesa0:i386 ( 18 .0.5-0ubuntu0~18.04.1 ) ... Setting up libglx0:i386 ( 1 .0.0-2ubuntu2.2 ) ... Setting up libgl1:i386 ( 1 .0.0-2ubuntu2.2 ) ... Setting up libnvidia-ifr1-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libnvidia-fbc1-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Processing triggers for libc-bin ( 2 .27-3ubuntu1 ) ... Processing triggers for initramfs-tools ( 0 .130ubuntu3.1 ) ... update-initramfs: Generating /boot/initrd.img-4.15.0-45-generic Reboot the system for the changes to take effect. Check installed drivers nvidia-smi You should see this: +-----------------------------------------------------------------------------+ | NVIDIA-SMI 415.27 Driver Version: 415.27 CUDA Version: 10.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 On | N/A | | N/A 54C P0 36W / N/A | 445MiB / 8117MiB | 0% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 882 G /usr/lib/xorg/Xorg 302MiB | | 0 1046 G /usr/bin/gnome-shell 139MiB | +-----------------------------------------------------------------------------+","title":"Nvidia drivers installation"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#install-nvidia-container-runtime-for-docker","text":"Add the package repositories curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\ sudo apt-key add - distribution = $( . /etc/os-release ; echo $ID$VERSION_ID ) curl -s -L https://nvidia.github.io/nvidia-docker/ $distribution /nvidia-docker.list | \\ sudo tee /etc/apt/sources.list.d/nvidia-docker.list You should see this: deb https://nvidia.github.io/libnvidia-container/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-container-runtime/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-docker/ubuntu18.04/$(ARCH) / Install nvidia-docker2 and reload the Docker daemon configuration sudo apt-get update sudo apt-get install -y nvidia-docker2 sudo pkill -SIGHUP dockerd Test nvidia-smi with the latest official CUDA image docker run --runtime = nvidia --rm nvidia/cuda:10.0-base nvidia-smi Output logs must should coincide as earlier: Unable to find image 'nvidia/cuda:10.0-base' locally 10.0-base: Pulling from nvidia/cuda 38e2e6cd5626: Pull complete 705054bc3f5b: Pull complete c7051e069564: Pull complete 7308e914506c: Pull complete 5260e5fce42c: Pull complete 8e2b19e62adb: Pull complete Digest: sha256:625491db7e15efcc78a529d3a2e41b77ffb5b002015983fdf90bf28955277d68 Status: Downloaded newer image for nvidia/cuda:10.0-base Fri Feb 1 05:41:12 2019 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 415.27 Driver Version: 415.27 CUDA Version: 10.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 On | N/A | | N/A 55C P0 31W / N/A | 445MiB / 8117MiB | 38% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| +-----------------------------------------------------------------------------+ Your machine is ready to launch fullnode.","title":"Install Nvidia container runtime for docker"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#cyberd-fullnode-launching","text":"Create folders for keys and data storing where you want: mkdir cyberd mkdir cyberdcli Run fullnode docker run -d --name = cyberd --restart always --runtime = nvidia -p 26656 :26656 -p 26657 :26657 -p 26660 :26660 -v /<path_to_cyberd>/cyberd:/root/.cyberd -v /<path_to_cyberdcli>/cyberdcli:/root/.cyberdcli cyberd/cyberd:euler-1 3. After successful container pulling and launch run to check if your node is connected to the testnet: docker exec cyberd cyberdcli status The possible output looks like this: {\"node_info\":{\"protocol_version\":{\"p2p\":\"6\",\"block\":\"9\",\"app\":\"0\"},\"id\":\"93b776d3eb3f3ce9d9bda7164bc8af3acacff7b6\",\"listen_addr\":\"tcp://0.0.0.0:26656\",\"network\":\"euler-1\",\"version\":\"0.29.1\",\"channels\":\"4020212223303800\",\"moniker\":\"anonymous\",\"other\":{\"tx_index\":\"on\",\"rpc_address\":\"tcp://0.0.0.0:26657\"}},\"sync_info\":{\"latest_block_hash\":\"686B4E65415D4E56D3B406153C965C0897D0CE27004E9CABF65064B6A0ED4240\",\"latest_app_hash\":\"0A1F6D260945FD6E926785F07D41049B8060C60A132F5BA49DD54F7B1C5B2522\",\"latest_block_height\":\"45533\",\"latest_block_time\":\"2019-02-01T09:49:19.771375108Z\",\"catching_up\":false},\"validator_info\":{\"address\":\"66098853CF3B61C4313DD487BA21EDF8DECACDF0\",\"pub_key\":{\"type\":\"tendermint/PubKeyEd25519\",\"value\":\"uZrCCdZTJoHE1/v+EvhtZufJgA3zAm1bN4uZA3RyvoY=\"},\"voting_power\":\"0\"}} Your node has started to sync. The syncing process you can see in the terminal. Open a new tab and run following command: docker logs cyberd --follow Or go to localhost:9000 and open logs at cyberd container: Syncing has started. Syncing time depends on your internet bandwidth, connection and blockchain height. As at 2019/02/03 syncing time approximately 15-20 minutes. Once you see in logs that blocks syncing for 1 second your node is synced. Additional information available by API endpoint at localhost:26657 f.e. the number of active validators available here localhost:26657/validators","title":"Cyberd fullnode launching"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#validator-start","text":"After your node successful synced you can run validator.","title":"Validator start"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#prepare-stake-address","text":"If you already have address with CYB and know seed phrase or private key just restore it into your local keystore. docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover docker exec cyberd cyberdcli keys show <your_key_name> If you have been lucky enought and your Ethereum address has been included in genesis you can import ethereum private key Please, do not import high value Ethereum accounts. This can not be safe! cyberd software is a new software and is not battle tested yet. docker exec -ti cyberd cyberdcli keys add import_private <your_key_name> docker exec cyberd cyberdcli keys show <your_key_name> If you want to create new acccount use the command below. Also, you should send coins to that address to bound them later during validator submitting. docker exec -ti cyberd cyberdcli keys add <your_key_name> docker exec cyberd cyberdcli keys show <your_key_name> is any name you pick to represent this key pair. You have to refer to this later when you use the keys to sign transactions. It will ask you to enter your password twice to encrypt the key. You also need to enter your password when you use your key to sign any transaction. The command returns the address, public key and a seed phrase which you can use it to recover your account if you forget your password later. Keep the seed phrase in a safe place in case you have to use them. The address showing here is your account address. Let\u2019s call this . It stores your assets.","title":"Prepare stake address"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#send-create-validator-transaction","text":"Validators are actors on the network committing new blocks by submitting their votes. It refers to the node itself, not a single person or a single account. Therefore, the public key here is referring to the node public key, not the public key of the address you have just created. To get the node public key, run the following command: docker exec cyberd cyberd tendermint show-validator It will return a bech32 public key. Let\u2019s call it . The next step you have to declare a validator candidate. The validator candidate is the account which stake the coins. So the validator candidate is an account this time. To declare a validator candidate, run the following command adjusting stake amount and other fields. docker exec -ti cyberd cyberdcli tx staking create-validator \\ --amount = 10000000cyb \\ --pubkey = <your_node_pubkey> \\ --moniker = <your_node_nickname> \\ --trust-node \\ --from = <your_key_name> \\ --commission-rate = \"0.10\" \\ --commission-max-rate = \"0.20\" \\ --commission-max-change-rate = \"0.01\" \\ --chain-id = euler-1","title":"Send create validator transaction"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#verify-that-you-validating","text":"docker exec -ti cyberd cyberdcli query staking validators --trust-node = true If you see your <your_node_nickname> with status Bonded and Jailed false everything must be good. You are validating the network.","title":"Verify that you validating"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#maintenance-of-validator","text":"","title":"Maintenance of validator"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#jailing","text":"If your validator go under slashing conditions it first go to jail. After this event operator must unjail it manually. docker exec -ti cyberd cyberdcli tx slashing unjail --from = <your_key_name> --chain-id = euler-1","title":"jailing"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#upgrading-of-validator","text":"Updating is easy as pulling the new docker container and launching it again docker stop cyberd docker rm cyberd docker pull cyberd/cyberd:<testnet_chain_id> docker run -d --name = cyberd --restart always --runtime = nvidia \\ -p 26656 :26656 -p 26657 :26657 -p 26660 :26660 \\ -v /root/cyberd:/root/.cyberd \\ -v /root/cyberdcli:/root/.cyberdcli \\ cyberd/cyberd:euler-1 Don't forget to unjail if you was jailed during update. The rank calculation has a linear relationship between GPU memory usage and links quantity. A number of links indefinitely increasing, but the potential of vertical scaling is limited. Understanding this, we are looking for solutions to calculate the same amount of links with fewer capacity.","title":"Upgrading of validator"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#call-to-you-validator","text":"For now it is time and opportunity go up against blackbox search engines. Obviously, a cryptoeconomic approach can change beneficiaries in this game effectively removing possible sybil attack vectors and removing the necessity to make a decision on example crawling and meaning extraction from one entity to the whole world. Learning sybil-resistant model will probably lead to orders of magnitude more predictive results. As at 2019/02/04 there 9 active validators and 1 jailed. This is enough to support net, but this is not enough for quality grow. We looking for validators. Join us!","title":"Call to you, validator"},{"location":"blog/ultimate-validator-guide/ultimate-validator-guide/#connect-to-us-fuckgoogle","text":"Subscribe at Steemit , Reddit , Twitter , Telegram channel and join our community in @fuckgoogle","title":"Connect to us, #fuckgoogle"},{"location":"chaingear/Changelog/","text":"Change Log \u00b6 Unreleased \u00b6 Full Changelog Closed issues: Create awesome gif for readme #1067 Consensus around basic chaingear utility in Cyb #1066 Remove linter warnings from console #1057 New fee splitting contracts #1055 Check and update cross contract interfaces for contracts #1054 Rewrite beneficiary contract frontend interfaces #1053 Root registry structure #1047 Make .chaingear frontend work with Main Ethereum network #1044 Release first iteration of chaingear paper #1030 Master audit #1001 Deploy to mainnet #997 Decreasing gas consumption, audit #993 0.1 chaingear release #974 Merged pull requests: edit docs org and config.yml in CI #1068 ( SaveTheAles ) UPD CI job docs upd #1033 ( SaveTheAles ) 0.1.0 (2019-01-28) \u00b6 Closed issues: Verification of databases on Etherscan #1046 Add favicon for chaingear landing #1045 Create components for chaingear #1043 Polish design of new chaingear #1042 New registry UI #1041 Delete registry only when it is paused #1040 Multistep registry creation on UI #1039 Save registry ABI into the blockchain. \u041a\u0430\u0442\u0435\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0438 #1038 Signing account do not chooses properly #1037 ABI do not resolve given ipfs hash #1036 Cannot add records if registry fee has been changed from non zero ETH #1035 Add registryID as field of registry contract #1034 Add stand-alone initialization of schema to registry #1031 Update UI for chaingear app #1029 Add shares logic for registry #1027 Add entry creation policy logic to registry #1025 Split registry creation and deploy in 3 stagess #1024 Sprint 20 report #1023 Upgrade migration for async/await and add migrations for schemas #1020 Fix burning/deletion of token/entry in chaingear/registry contracts #1019 Upgrade docs for 0.1 Euler release #1018 Upgrade application with more contracts data #1017 Fix application logic for most compatibility with contracts #1016 Refactoring of chaingear's web3 app #1015 Gitcoin minutes first post #1014 Upgrade project after code review #1012 Upgrade project after code review #1011 Update Chaingear UI concepts #1008 Prepare project to audit #996 Security audit of chaingear's contracts #994 Random tests failing with raw truffle test command #992 Update NatSpec in all contracts #990 Allow change of Registry name #989 Create issues for community in gitcoin #988 Add EntryCore example with field uniqueness check #987 Check funds before deleting entry in Registry #986 Display registry symbol in registry list #985 Chaingear kovan unstable deployment #984 Publish sprint 12 Changelog #983 Integrate initial chaingear app with cyb #982 Review chainger initial release by ha #981 Draw logo and patern for Chaingear #979 Upgrade web3 app with initial release #978 Create a landing page for chaingear project #977 Integrate Etherscan verification #975 First side code review of chaingear #972 Integration of whitelist entry policy to Registry #971 Integration of IPFSeable to Registry #970 Integration of IPFSeable to Chaingear #969 get contracts for address #966 unical record field in array #965 Deploy chaingear contracts to Kovan testnet #962 Add Changelog for Sprint 9 #961 Initial release of chaingear #960 Initial gas tests for Chaingear/Rs and evaluation of cost #959 Refactoring for Chaingear/Rs #958 Improve access logic for Registry #957 Improve access logic for Chaingear #956 Write basic tests for Chaingear #955 Write basic tests for Registry #954 Perfomance testing scenario for cyberd #953 Perfomance testing of PoA networks #952 Update Library #951 Distinct field for registry constructor as option #948 Implement funding for chaingear/Rs #947 Add entries funding to registries base #946 Implement 721's cross-integration between chaingear and registries #945 Integrate ERC721 to Registry base #944 Integrate ERC721 to chaingear #943 Provide documentation for Chaingear contracts in NatSpec #942 Provide documentation for Registry contracts in NatSpec #941 Reduce js file size #940 Code generation base validation #939 Save abi to ipfs node not only local cache #938 Setup truffle's documentation for chaingear/Rs #937 Develop App Registry for CYB #936 Research on ERC 721 integration to chaingear/Rs entries #935 Improve docs for Chaingear project #934 Setup Registry with basic logic #933 Add registration to RR for basic logic of Registry contract base #932 Setup documentation for Registry and Entries CRUD pipeline #931 Setup chaingear RoR RoR contract with basic logic #930 Migrate old chaingear to a new project #927 Change Button Placement Put to the Header Put to the Header #919 Integrate with Etherscan #916 Create decentralized data storage #914 Develop new frontend #913 Develop new centralized data storage #912 Finalize data structure #911 Finalize application form development #910 Develop an administration interface #909 Invalid toml file #884 Invalid toml file #883 Setup CI with data validation #871 Invalid toml file #859 Invalid toml file #858 Invalid toml file #857 Invalid toml file #856 Invalid toml file #855 Invalid toml file #854 Invalid toml file #853 Invalid toml file #852 Invalid toml file #848 Invalid toml file #812 Invalid toml file #811 Initial version of registries #792 Invalid toml file #783 Invalid toml file #782 Invalid toml file #781 Invalid toml file #780 Invalid toml file #779 Invalid toml file #778 Invalid toml file #777 http://toastycoin.com/ #776 https://www.citadel.ink/ #775 https://cyber.fund/system/Oracles _Network #760 omega.one - 2018 #742 Nebulas - TBA #740 https://cyber.fund/system/Solar _Bankers #734 https://github.com/TokenBnk/ #733 Solarbankers - 21/11 #732 Tokenbnk - 30/11 #731 Metronome.io #730 https://bitcoingold.org/ #729 MakerDAO - Dec 17 #718 Truebit #717 https://www.sweetbridge.com - 17.11 #714 Metronome - March 2018 #713 http://fragmented.world - TBA #712 http://quickblocks.io - TBA #711 http://lightstreams.network/ - Q2 2018 #710 https://wepower.network/ #709 https://dharma.io ICO date TBA #708 Pre-Sale add please from 30 th October to 3 rd November #705 Blockstack - 13 Nov - open-source, contract to come #685 Mobius - 8 Nov Open source/contract to come #684 FundRequest - 20 Nov #683 Add navigation to Active, Upcoming, Anticipated and Successful on Radar page #682 Resolve why some projects are displayed twice on Radar #681 Find transformation manager for Chaingear #674 Ocean protocol #660 Develop scripts for export Chaingear to Google Spreadsheet #637 Move data from Google Spreadsheet to Chaingear #636 Kill submit form on site #635 Monthly report \"Decrypted\" or \"Unfiated\" #634 Raiden Network - 18 Oct #614 Andaction #610 True Flip Markets #603 EAS #601 Publica - 25 Oct #580 Quantstamp - 12/11 #579 True Flip #529 Remove all ICO data for Contingency on website #511 Raiden Network Oct - ? #510 FansUnite #509 PROPS project - 20 Nov #508 Leverj - 7 Nov - Open source/contract to come #507 https://decent.ch/ #506 ICON 20 Oct #505 Livepeer #504 https://protos.tokenhub.com/ 25 Sept pre-ICO / 17 Oct ICO #503 https://biocoin.bio/ru 9 Nov #502 Climatecoin 1 Nov #501 Kyber Network ICO over #483 Verif-y - 25 Oct #481 Brickblock 31 Oct #476 ChainLink #475 Solidified #472 Moneypot 17 Sept #471 Zephyr 6 Oct #470 Correct ICO time for Paragon #466 WePower Network - ICO planned on February 1 st , 2018 #457 Render 5 Oct #456 Mercury Protocol - 25 Oct - open code, contract to come soon #455 Zen Protocol #454 plasma.io #453 dharma.io - 2018 #452 WanChain 3 Oct #451 ChainLink 19 Sept #450 ties.network 21 Sept #449 Sweetbridge #448 Aventus - closed #447 DOVU.io #446 Airswap - 10 Oct - code partially closed #445 BitJob ICO ongoing #444 Graft.network #443 Gimli 18 Sept #442 The cyber Fund website does not display any changes #440 Starbase 27 Sept #435 Resolve comments to submissions #434 Grid+ / 30 Oct #433 FaceCoin #432 AirToken 19 Sept #428 Flovio #427 Goldmint 17 Sept #426 Atlant.io ongoing #425 Streamr - 12 Oct - code partially closed #424 Doc.ai 28 Sept #417 ** https://databrokerdao.com/ 18 Sept pre-ICO #416 **swap.tech #415 Lendroid #414 Bloom #413 Etherparty 1 Oct #412 AutoNomic #411 Aidos Kunen #410 QRL #409 Metaverse #408 FunFair #407 Paragon 15 Sept #406 Zeppelin OS #405 Polkadot #404 https://neo.org/ #403 Aion #402 Filecoin #239 0x project #226 Migrate escrow and proof from Stats to escrow in Ballances #214 rexmls.com #213 Create google excel sheet with all tokens with their decimals #212 Move ICO Submit to ICO Stats #203 Concept first post-ICO report #201 propy.com #200 coindash.io #198 MyBit #197 district0x #196 \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043e\u0442\u0447\u0435\u0442\u0430 \u0437\u0430 \u0438\u044e\u043d\u044c #195 Update Post-ICO data #183 DAO Casino #176 EOS #167 Finish Aeternity Crowdsale #165 Tezos #164 AdChain #163 OmiseGo #162 Civic #158 Status #138 SONM #137 Bancor draft #136 Cofound.it #122 Starbase #117 Final fraft Starbase #108 BAT #103 Pre-draft BAT #102 Setup link checker #98 Add data label #97 https://cyber.fund/EMC #96 Bancor #94 Pre-draft Bancor #93 Mysterium #92 \u041d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e \u043a\u0430\u043a \u043e\u043d\u0438 \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u0432 \u0420\u0430\u0434\u0430\u0440\u0435 \u0432\u043d\u0438\u0437\u0443 \u0432\u043d\u0438\u0437\u0443 #89 Fix first price and date #74 add missing icons #68 crowdsale times #46 Fix incorrect Storj cap calculation #42 Quality report calculation #32 Move aliases.CurrencyName to a token.token_name #31 Links for Stellar #29 Clean up API and source data #28 Clear garbage systems #27 Fix incorrect Cap due to wrong supply #26 Chaingear Init #25 Sync users with dev #24 Autoupdated assets don't star system #23 How to add tokenless protocols? #22 List of systems to rename #21 Change address/path for generated API #20 Regeps for systems in Satoshi\u2022Fund #16 Fix currencies names #15 BitBTC icon #14 Add icons for BitAssets #13 Blockchain IDs for rated systems #12 Chaingear landing #11 Chaingear docs #10 Fix rating for \u272a\u272a systems #9 Reconsile Coinmarketcap names #8 Rename Objects and Arrays #7 Update rating #6 Merge dublicates #4 One chain - one folder #3 Switch to TOML #2 Merged pull requests: Chaingear's EVM 0.1 Euler Release #1056 ( litvintech ) Rebuild chaingear #1021 ( litvintech ) UPD config.yml knowledge -> wiki #1013 ( SaveTheAles ) Review by anton #1009 ( AnthonyAkentiev ) Update landing according to new design #1007 ( SaveTheAles ) landing remaking #1006 ( SaveTheAles ) 996 refactoring before audit #1004 ( litvintech ) remove debugger #1003 ( vstavetski ) 996 refactoring before audit #1002 ( litvintech ) fixes #992 #995 ( rsercano ) Setup landing page for Chaingear #991 ( SaveTheAles ) Initial release #980 ( litvintech ) Improved docs for chaingear #976 ( litvintech ) 954 basic tests for registry #968 ( hleb-albau ) NatSpec descriptions for .chaingear and .registry #967 ( SaveTheAles ) Chaingear and Registry tokenized linking #964 ( litvintech ) Add class diagramm of Chaingear.sol #950 ( SaveTheAles ) ENSF noties #949 ( SaveTheAles ) Update chaingear.json #929 ( ninjascant ) Add: Lightstreams #928 ( ninjascant ) Block #926 ( ninjascant ) Add: Marcelo #925 ( ninjascant ) Add: Kryll_io #924 ( ninjascant ) Update: KERBEROS #923 ( ninjascant ) Add: KERBEROS #922 ( ninjascant ) Add: Block #921 ( ninjascant ) Add: BharathTrade #920 ( ninjascant ) Add: OnLive #917 ( ninjascant ) Add: PlayBets #897 ( goloschaingear ) Add: Naviaddress #896 ( goloschaingear ) Update Dether.toml #892 ( mohdether ) Add: ADAMANT #890 ( ninjascant ) Add: Neunet #889 ( ninjascant ) Add: MyWish #888 ( ninjascant ) Add: MyTrackNet #887 ( ninjascant ) Add: Movement App #886 ( ninjascant ) Update: ATFS Project; convert to new data structure #885 ( ninjascant ) Add: MindSports #882 ( ninjascant ) Add: MediBloc #881 ( ninjascant ) Add: e-Chat ICO #880 ( ninjascant ) Add: Lockcoin #879 ( ninjascant ) Add: GraphGrail Ai #878 ( ninjascant ) Add: GOALBONANZA #877 ( ninjascant ) Add: DropDeck #876 ( ninjascant ) Fix headline #875 ( ninjascant ) Fix chaingear.json #874 ( ninjascant ) Add: VRTworld #873 ( goloschaingear ) Add CI and data validation #872 ( abitrolly ) Add: BlockNum #869 ( goloschaingear ) Update Adshares ICO end date #868 ( jzemlo ) Blockarray #867 ( ninjascant ) Update: BANKEX #866 ( goloschaingear ) Update: BANKEX #865 ( goloschaingear ) Add Karbo logo #860 ( ninjascant ) Add: TrakInvest #851 ( goloschaingear ) Update Cryptics.toml #850 ( halsoi ) Update Dether.toml #849 ( mohdether ) Add new data structure #847 ( ninjascant ) Add new structure template #846 ( ninjascant ) Add: new data structture template #845 ( ninjascant ) Add: TrakInvest #844 ( goloschaingear ) Add: MARK.SPACE #843 ( ninjascant ) Add: Legacy #842 ( ninjascant ) Add: Kr8os #841 ( ninjascant ) Add: JibrelNetwork #840 ( ninjascant ) Add: iungo #839 ( ninjascant ) Add: InsurePal #838 ( ninjascant ) Add: HOQU #837 ( ninjascant ) Add: GraftNetwork #836 ( ninjascant ) Add: DFS #835 ( ninjascant ) Add: DAXT #834 ( ninjascant ) Add: SOLA #833 ( ninjascant ) Add: DADI #832 ( ninjascant ) Add: CycloShieldCoin #831 ( ninjascant ) Add: Cryptopus #830 ( ninjascant ) Add: CryptoAlias #829 ( ninjascant ) Blockarray #828 ( ninjascant ) Blockarray #827 ( ninjascant ) Add: Chainium #825 ( ninjascant ) Add: Cardstack #824 ( ninjascant ) Add: Bottos #823 ( ninjascant ) Add: Blockmesh #822 ( ninjascant ) Add: Blocklancer #821 ( ninjascant ) Add: BankEx #820 ( ninjascant ) Add: ATFS Project #819 ( ninjascant ) Add: AdMine #818 ( ninjascant ) Add: Aditus #817 ( ninjascant ) Add: Karbo #816 ( goloschaingear ) Add: TradePlayz #815 ( goloschaingear ) Add: TokenGo #810 ( goloschaingear ) Add: DAXT #809 ( goloschaingear ) Add: RaidenNetwork #790 ( goloschaingear ) Add: DCX #785 ( goloschaingear ) Add: CLN #774 ( ninjascant ) Add: DCX #773 ( ninjascant ) Add: Volk #772 ( ninjascant ) Add: Polkadot #771 ( goloschaingear ) Change dates #770 ( Bilous4singree ) Add: xChange logo #769 ( ninjascant ) Add: xChange #768 ( ninjascant ) Add: xChange #767 ( goloschaingear ) BitClave TokenSale Update #766 ( mike-tih ) Add: TSSToken #765 ( goloschaingear ) Add: SophiaTX #763 ( goloschaingear ) Add: SMMarket #762 ( goloschaingear ) Add: ParetoNetwork #761 ( goloschaingear ) Update: chaingear.json #759 ( ninjascant ) Add: WePower #758 ( ninjascant ) Add Experty logo #757 ( ninjascant ) Update: chaingear.json #756 ( ninjascant ) Add: TokenBnk #755 ( ninjascant ) Update: chaingear.json #754 ( ninjascant ) Add: Game Machine #753 ( ninjascant ) Add: DaoPlayMarket 2.0 #752 ( ninjascant ) Add: Blockarray #751 ( ninjascant ) Update: chaingear.json #750 ( Protectorofcode ) Add: Expert #748 ( goloschaingear ) Add: Debitum #747 ( ninjascant ) Add: BitcoinGold #746 ( ninjascant ) Update: chaingear.json #744 ( ninjascant ) Update: chaingear.json #743 ( ninjascant ) Add: Neuromation #741 ( goloschaingear ) Add: Rentberry #739 ( ninjascant ) Add: RightMesh #738 ( ninjascant ) Add: SelfKey #737 ( ninjascant ) Add: StopTheFakes #736 ( ninjascant ) Add: VinChainToken #735 ( ninjascant ) Update: chaingear.json #728 ( Protectorofcode ) Update: chaingear.json #727 ( Protectorofcode ) Update: chaingear.json #726 ( Protectorofcode ) Update: chaingear.json #725 ( Protectorofcode ) Update: chaingear #724 ( Protectorofcode ) Update: chaingear.json #722 ( Protectorofcode ) Update Opporty.toml #721 ( Protectorofcode ) Add: wysToken #720 ( ninjascant ) Add: Bloom #719 ( goloschaingear ) Update: chaingear.json #716 ( ninjascant ) Add: NAU #715 ( ninjascant ) Update: chaingear.json #707 ( ninjascant ) Update: chaingear.json #706 ( ninjascant ) Add: Dogezer #704 ( ninjascant ) Add: BitClave #703 ( ninjascant ) Add: AppCoins #702 ( ninjascant ) Add: Blockstack #701 ( ninjascant ) Update: chaingear.json #700 ( ninjascant ) Update: chaingear #699 ( Protectorofcode ) Add: Confideal #695 ( ninjascant ) Update toml. #693 ( Bilous4singree ) Update: chaingear.son #692 ( ninjascant ) Rega #691 ( ninjascant ) Delete: Bitnation #690 ( Protectorofcode ) Update: Gizer #689 ( Protectorofcode ) Rega #688 ( ninjascant ) Rega #687 ( ninjascant ) Add: Leverj #686 ( ninjascant ) Add: FansUnite #680 ( ninjascant ) Add: IACCrowdsale #679 ( ninjascant ) Add: SimpleToken #678 ( ninjascant ) Add: MBCH #677 ( ninjascant ) Add: Universa #676 ( ninjascant ) Add: AntiBureaucracy #675 ( ninjascant ) Add: Lamden #673 ( ninjascant ) Add: Rega #672 ( ninjascant ) Update: chaingear.json #671 ( ninjascant ) Update: Polkadot #670 ( ninjascant ) Update: RaidenNetwork logo #669 ( ninjascant ) Update: chaingear.json #668 ( Protectorofcode ) Update: chaingear.json #667 ( Protectorofcode ) Update: chaingear.json #666 ( Protectorofcode ) Raiden2 #664 ( ninjascant ) Add: RaidenNetwork #662 ( ninjascant ) Add: E4ROW #661 ( Protectorofcode ) Add: chaingear.json #659 ( Protectorofcode ) Update Fidcom.toml #658 ( Bolikus ) Add: Sense #657 ( ninjascant ) Add: DalaToken #656 ( ninjascant ) Add: Prizm #655 ( Protectorofcode ) Add: Nimiq #654 ( Protectorofcode ) Add: Real #653 ( Protectorofcode ) Add: Propy #652 ( Protectorofcode ) Add: Qointum #651 ( Protectorofcode ) Update: chaingear.json #650 ( Protectorofcode ) Add: Equibit #649 ( Protectorofcode ) Add: Vega Fund #648 ( Protectorofcode ) Update: chaingear.json #647 ( Protectorofcode ) Add: Leviar Coin #646 ( Protectorofcode ) Add: TrueBit #645 ( Protectorofcode ) Add: Agrello #644 ( Protectorofcode ) Update: chaingear.json #643 ( Protectorofcode ) Update: chaingear.json #642 ( Protectorofcode ) Add: Dether #641 ( Protectorofcode ) Update: chaingear.json #639 ( Protectorofcode ) Update: chaingear.json #638 ( Protectorofcode ) Update: chaingear.json #633 ( Protectorofcode ) Update: ARToken #632 ( Protectorofcode ) Update: chaingear.json #631 ( Protectorofcode ) Add: ARToken #630 ( Protectorofcode ) Add: KredX #629 ( ninjascant ) Add: Gimli #628 ( Protectorofcode ) Add: Ties Network #627 ( Protectorofcode ) Update: chaingear.json #626 ( Protectorofcode ) Update: Wanchain #625 ( Protectorofcode ) Add: Chimaera #624 ( ninjascant ) Update: Brickblock #623 ( Protectorofcode ) Update: chaingear.json #622 ( Protectorofcode ) Add: Divi Project #621 ( Protectorofcode ) Add: Gizer #620 ( Protectorofcode ) Update: chaingear.json #619 ( Protectorofcode ) Update: chaingear.json #618 ( Protectorofcode ) Add: Enigma #617 ( Protectorofcode ) Update: chaingear.json #616 ( Protectorofcode ) Add: Lendroid #615 ( Protectorofcode ) Add: FortySevenBank #613 ( ninjascant ) Update: chaingear.json #612 ( Protectorofcode ) Add: Pangea #611 ( ninjascant ) Update: chaingear.json #608 ( Protectorofcode ) Add: HeroCoin #607 ( Protectorofcode ) Add: ARToken #606 ( Protectorofcode ) Update: chaingear.json #605 ( Protectorofcode ) Update: Mercury Protocol #604 ( Protectorofcode ) Add: Dream Team #602 ( Protectorofcode ) Update: DMarket #600 ( Protectorofcode ) Add: Gaze Coin #599 ( Protectorofcode ) Add: MatchPay #598 ( Protectorofcode ) Add: Ripio Credit Network #597 ( Protectorofcode ) Add: Jibrel Network #596 ( Protectorofcode ) Add: Stimus #595 ( Protectorofcode ) Update: chaingear.json #594 ( Protectorofcode ) Add: Dome Platform #593 ( Protectorofcode ) Add: Rhea #592 ( Protectorofcode ) Add: Genesis Vision #591 ( Protectorofcode ) Add: Opporty #590 ( Protectorofcode ) Update: chaingear.json #589 ( Protectorofcode ) Fix True Flip Lottery Markets #588 ( gamedevsam ) Update: chaingear.json #587 ( Protectorofcode ) Update: Jincor #586 ( Protectorofcode ) Update: chaingear.json #585 ( Protectorofcode ) Add: Crypto Improvement Fund #584 ( Protectorofcode ) Update: chaingear.json #583 ( Protectorofcode ) Add: Zenome #582 ( Protectorofcode ) Update Privatix.toml #581 ( devalexandr ) Update Crypto 20.toml #578 ( skolobov ) Update: chaingear.json #577 ( Protectorofcode ) Add: MingoCoin #576 ( Protectorofcode ) Add: BioPayCoin #575 ( Protectorofcode ) Add: Sparc #574 ( Protectorofcode ) Add: DarfChain #573 ( Protectorofcode ) Add: Harbor #572 ( Protectorofcode ) Add: Udiar #571 ( Protectorofcode ) Add: Quantstamp #570 ( Protectorofcode ) Add: Fidcom #569 ( Protectorofcode ) Update Papyrus.toml #568 ( ashwets ) Add: Databroker DAO #567 ( Protectorofcode ) Add: Dinnerful Network #566 ( Protectorofcode ) Add: TripAlly #565 ( Protectorofcode ) Add: Lescoin #564 ( Protectorofcode ) Add: Hirematch #563 ( Protectorofcode ) Update: chaingear.json #562 ( Protectorofcode ) Add: CoinDrive #561 ( Protectorofcode ) Add: Auctus #560 ( Protectorofcode ) Add: Snip #559 ( Protectorofcode ) Update: chaingear.json #558 ( Protectorofcode ) Add: Papyrus #557 ( Protectorofcode ) Add: CarTaxi #556 ( Protectorofcode ) Add: Crypto 20 #555 ( Protectorofcode ) Add: SRG-Play&Earn #554 ( Protectorofcode ) Update: chaingear.json #553 ( Protectorofcode ) Add: Hacken #552 ( Protectorofcode ) Add: DLS Academy #551 ( Protectorofcode ) Add: Snovio #550 ( Protectorofcode ) Add: Acebusters #549 ( Protectorofcode ) Add: Relest #548 ( Protectorofcode ) Add: Soma #547 ( Protectorofcode ) Add: Ethbet #546 ( Protectorofcode ) Add: Stash #545 ( Protectorofcode ) Add: Privatix #544 ( Protectorofcode ) Add: Etch #543 ( Protectorofcode ) Add: Galactikka #542 ( Protectorofcode ) Add: Icon #541 ( Protectorofcode ) Update: chaingear.json #540 ( Protectorofcode ) Update: chaingear.json #539 ( Protectorofcode ) Update: Aion #538 ( Protectorofcode ) Update: chaingear.json #537 ( Protectorofcode ) Add: Crypto.tickets #536 ( Protectorofcode ) Add: Polkadot #535 ( Protectorofcode ) Add: Wanchain #534 ( Protectorofcode ) Update: chaingear.json #533 ( Protectorofcode ) Update: True Flip Lottery #532 ( Protectorofcode ) Update: chaingear.json #531 ( Protectorofcode ) Add: True Flip Lottery #530 ( Protectorofcode ) Update: Brickblock #528 ( Protectorofcode ) Update: Etherparty #527 ( Protectorofcode ) Update: Chaingear.json #526 ( Protectorofcode ) Add: Zen Protocol #525 ( Protectorofcode ) Update: Kyber #524 ( Protectorofcode ) Add: Livepeer #523 ( Protectorofcode ) Add: Internxt #522 ( Protectorofcode ) Add: Evr #521 ( Protectorofcode ) Add: Cove Identity #520 ( Protectorofcode ) Add: Alloy #519 ( Protectorofcode ) Update: chaingear.json #518 ( Protectorofcode ) Update: Cointingency #517 ( Protectorofcode ) Update: chaingear.json #516 ( Protectorofcode ) Update: ChainLink #515 ( Protectorofcode ) Update: Cointingency #513 ( Protectorofcode ) Update: Contingency #512 ( Protectorofcode ) Update: chaingear.json #500 ( Protectorofcode ) Add: Atlant #499 ( Protectorofcode ) Update: Crystal Clear #498 ( Protectorofcode ) Update: chaingear.json #497 ( Protectorofcode ) Add: Verif-y #496 ( Protectorofcode ) Add: AirSwap #495 ( Protectorofcode ) Add: ChainLink #493 ( Protectorofcode ) Add: Grid+ #492 ( Protectorofcode ) Update: Metaverse #491 ( Protectorofcode ) Update: Aira #490 ( Protectorofcode ) Update: Omega One #489 ( Protectorofcode ) Update: Adchain #488 ( Protectorofcode ) Update: Loopring #487 ( Protectorofcode ) Add: Loopring #486 ( Protectorofcode ) Add: Mercury Protocol #485 ( Protectorofcode ) Update: chaingear.json #484 ( Protectorofcode ) Add: RockChain #482 ( Protectorofcode ) Add: Mito #480 ( Protectorofcode ) Add: Hagglin #479 ( Protectorofcode ) Add: Flip Coin #478 ( Protectorofcode ) Add: VoteCoin #477 ( Protectorofcode ) Update: chaingear.json #474 ( Protectorofcode ) Update: Electroneum #473 ( Protectorofcode ) Please change the end date to 2017 10 31. #469 ( asanezz7 ) Update: chaingear.json #468 ( Protectorofcode ) Update: Paragon ICO #467 ( Protectorofcode ) Update: chaingear.json #465 ( Protectorofcode ) Update: AntShares -> NEO #464 ( Protectorofcode ) Add: Quantum Resistant Ledger #463 ( Protectorofcode ) Update: BOScoin #462 ( Protectorofcode ) Add: Metaverse #461 ( Protectorofcode ) Update: Aidos Kuneen #460 ( Protectorofcode ) Add: Aidos Kuneen #459 ( Protectorofcode ) Add: Aion #458 ( Protectorofcode ) Add: OpenZeppelin #441 ( Protectorofcode ) Add: FaceCoin #439 ( Protectorofcode ) Update: chaingear.json #438 ( Protectorofcode ) Update: Starbase #437 ( Protectorofcode ) Update: chaingear.json #436 ( Protectorofcode ) Update: FunFair #431 ( Protectorofcode ) Update: chaingear.json #430 ( Protectorofcode ) Add: Funfair #429 ( Protectorofcode ) Update: chaingear.json #423 ( Protectorofcode ) Add: Cash Poker Pro #422 ( Protectorofcode ) Add: EventChain #421 ( Protectorofcode ) Add: LAToken #420 ( Protectorofcode ) Add: Rouge Project #419 ( Protectorofcode ) Add: Detector #418 ( Protectorofcode ) Add: Spheris #401 ( Protectorofcode ) Add: Graft #400 ( Protectorofcode ) Add: DomRaider #399 ( Protectorofcode ) Add: Crystal Clear #398 ( Protectorofcode ) Add: Matryx #397 ( Protectorofcode ) Delete: Kin #396 ( Protectorofcode ) Add CombiCoin #395 ( Protectorofcode ) Add: Paragon #394 ( Protectorofcode ) Update: chaingear.json #392 ( Protectorofcode ) Update: Kin #391 ( Protectorofcode ) Update: chaingear.json #390 ( Protectorofcode ) Update: Decentraland #389 ( Protectorofcode ) Update: Filecoin #388 ( Protectorofcode ) Update: chaingear.json #387 ( Protectorofcode ) Update: chaingear.json #386 ( Protectorofcode ) Add: Urbit #385 ( Protectorofcode ) Add: Streamr #384 ( Protectorofcode ) Add: Solar Bankers #383 ( Protectorofcode ) Add: Oracles Network #382 ( Protectorofcode ) Add: Omega One #381 ( Protectorofcode ) Add: Kyber #380 ( Protectorofcode ) Add: Etherparty #379 ( Protectorofcode ) Add: Doc.ai #378 ( Protectorofcode ) Add: Aira #377 ( Protectorofcode ) Update: Adshares #376 ( Protectorofcode ) Update: Indorse #375 ( Protectorofcode ) Update: Cindicator #374 ( Protectorofcode ) Pylon Network #373 ( klenergy ) Update: chaingear.json #372 ( Protectorofcode ) Add: AirToken #371 ( Protectorofcode ) Add: Modum #370 ( Protectorofcode ) Update: Viberate #369 ( Protectorofcode ) Update: chaingear.json #368 ( Protectorofcode ) Update: Mybit #367 ( Protectorofcode ) Update: Rex #366 ( Protectorofcode ) Update: chaingear.json #365 ( Protectorofcode ) Update: Filecoin #364 ( Protectorofcode ) Update: Dimcoin #363 ( Protectorofcode ) Update: Presearch #362 ( Protectorofcode ) Update: Jincor #361 ( Protectorofcode ) Update: Vibe #360 ( Protectorofcode ) Update: Stable #359 ( Protectorofcode ) Update: Everex #358 ( Protectorofcode ) Update: Enjin Coin #357 ( Protectorofcode ) Update: Tieron #356 ( Protectorofcode ) Update: chaingear.json #355 ( Protectorofcode ) Update: Indorse #354 ( Protectorofcode ) Update: chaingear.json #353 ( Protectorofcode ) Update: Gilgam #352 ( Protectorofcode ) Add: TenX #351 ( Protectorofcode ) Add: Stox #350 ( Protectorofcode ) Add: Pillar #349 ( Protectorofcode ) Add: Opus #348 ( Protectorofcode ) Add: OpenAnx #347 ( Protectorofcode ) Add: Make It Viral #346 ( Protectorofcode ) Update: IO Coin #345 ( Protectorofcode ) Add: Digital Developers Fund #344 ( Protectorofcode ) Add: Decentraland #343 ( Protectorofcode ) Add: Crypviser #342 ( Protectorofcode ) Add: Bitjob #341 ( Protectorofcode ) Add: Asch #340 ( Protectorofcode ) Add: adToken #339 ( Protectorofcode ) Add: AdEx #338 ( Protectorofcode ) Add: Disledger #337 ( Protectorofcode ) Update: chaingear.js #336 ( Protectorofcode ) Update: 0x #335 ( Protectorofcode ) Update: chaingear.json #334 ( Protectorofcode ) Add: Umbrella Coin #333 ( Protectorofcode ) Add: Trackr #332 ( Protectorofcode ) Update: Solar DAO #331 ( Protectorofcode ) Add: Solar DAO #330 ( Protectorofcode ) Add: Slot N Slot #329 ( Protectorofcode ) Add: Pylon Network #328 ( Protectorofcode ) Add: OpenZen #327 ( Protectorofcode ) Add: Neblio #326 ( Protectorofcode ) Add: Magos #325 ( Protectorofcode ) Add: Lordmancer #324 ( Protectorofcode ) Add: Lampix #323 ( Protectorofcode ) Add: Fijinto #322 ( Protectorofcode ) Add: Fluence #321 ( Protectorofcode ) Add: Electroneum #319 ( Protectorofcode ) Add: DMarket #318 ( Protectorofcode ) Add: Dimcoin #317 ( Protectorofcode ) Add: Crowdholding #316 ( Protectorofcode ) Add: Cindicator #315 ( Protectorofcode ) Add: aventus #314 ( Protectorofcode ) Add: Anryze #313 ( Protectorofcode ) Updating Indorse links & token sale details #310 ( avadhootkulkarni ) Update: chaingear.json #309 ( Protectorofcode ) Update: FileCoin #308 ( Protectorofcode ) Update: chaingear.json #307 ( Protectorofcode ) Update: Filecoin #306 ( Protectorofcode ) Update: chaingear.json #305 ( Protectorofcode ) Add: Spectiv #304 ( Protectorofcode ) Add: Presearch #303 ( Protectorofcode ) Add: Poet #302 ( Protectorofcode ) Add: Indorse #301 ( Protectorofcode ) Add: CoinDash #300 ( Protectorofcode ) Add: Adshares #299 ( Protectorofcode ) Add: 8 Curcuit Studios #298 ( Protectorofcode ) Update: chaingear.json #297 ( Protectorofcode ) Add: U.CASH #296 ( Protectorofcode ) Add: Silent Notary #295 ( Protectorofcode ) Add: MooseCoin #294 ( Protectorofcode ) Add: Kairos #293 ( Protectorofcode ) Add: Jincor #292 ( Protectorofcode ) Add: Gluon #291 ( Protectorofcode ) Add: DigiCoinMaker #290 ( Protectorofcode ) Add: Blocklancer #289 ( Protectorofcode ) Update: chaingear.json #288 ( Protectorofcode ) Update: Kickico #287 ( Protectorofcode ) Update: chaingear.json #286 ( Protectorofcode ) Update: Starbase #285 ( Protectorofcode ) Update: Starbase #284 ( Protectorofcode ) Update: 0x #283 ( Protectorofcode ) Add: Vibe Hub #282 ( Protectorofcode ) Add: Stable #281 ( Protectorofcode ) Add: Sift #280 ( Protectorofcode ) Add: Gamerbits #279 ( Protectorofcode ) Add: Coss #278 ( Protectorofcode ) Add: Centra #277 ( Protectorofcode ) Add: Bitsdigit #276 ( Protectorofcode ) We've updated some info. Please, update Kickico.toml #275 ( KICKICOPR ) Update: chaingear.json #274 ( Protectorofcode ) Update: Bitcoin Cash #273 ( Protectorofcode ) Update: chaingear.json #272 ( Protectorofcode ) Update: Bitcoin Cash #271 ( Protectorofcode ) Add: Bitcoin Cash #270 ( Protectorofcode ) Update: chaingear.json #269 ( Protectorofcode ) Update: Kuna #268 ( Protectorofcode ) Update: chaingear.json #267 ( Protectorofcode ) Cha #266 ( Protectorofcode ) Update: chaingear.json #264 ( Protectorofcode ) Update: Kuna #263 ( Protectorofcode ) Update: chaingear.json #262 ( Protectorofcode ) Update: Brickblock #261 ( Protectorofcode ) Add: Brickblock #260 ( Protectorofcode ) Add: Nimfamoney #259 ( Protectorofcode ) Add: Monkey Capital #258 ( Protectorofcode ) Add: Kuna #257 ( Protectorofcode ) Add: Enjin Coin #256 ( Protectorofcode ) Update: chaingear.js #255 ( Protectorofcode ) Update: chaingear.js #254 ( Protectorofcode ) Update: Kickico #253 ( Protectorofcode ) Update: Skycoin #251 ( Protectorofcode ) update logo skycoin #250 ( Protectorofcode ) Add: Prospectors #248 ( Protectorofcode ) Add: Nexxus Parthers #247 ( Protectorofcode ) Add: Embermine #246 ( Protectorofcode ) Add: BOScoin #245 ( Protectorofcode ) Add: Viberate #243 ( Protectorofcode ) Add: Kickico #242 ( Protectorofcode ) Update: Skycoin #238 ( LucianMincu ) Delete Scam: Kibo #237 ( Protectorofcode ) Add: FundYourSelf #236 ( Protectorofcode ) Add: Apptrade #235 ( Protectorofcode ) Add: Encryptotel #234 ( Protectorofcode ) Add: Veritaseum #233 ( Protectorofcode ) Add: ZrCoin #232 ( Protectorofcode ) Add: Chain of Points #231 ( Protectorofcode ) Add: Everex #230 ( Protectorofcode ) Add: Kibo Platform #229 ( Protectorofcode ) Update: Blockfreight #228 ( Protectorofcode ) Add: SlognCoin #227 ( Protectorofcode ) Add: Ziber #224 ( Protectorofcode ) Add: Tieron #223 ( Protectorofcode ) Add: Rex #222 ( Protectorofcode ) Add: 0x #221 ( Protectorofcode ) Add: Ethbits iTrade #220 ( Protectorofcode ) Add: Lunyr #219 ( Protectorofcode ) Add: CreativeChain #218 ( Protectorofcode ) Add: Suretly #217 ( Protectorofcode ) Update: Tezos #216 ( Protectorofcode ) Update: Mybit #215 ( Protectorofcode ) Update: TokenCard #211 ( Protectorofcode ) Update: Mysterium #210 ( Protectorofcode ) Update: Bat #209 ( Protectorofcode ) Update: Cofound #208 ( Protectorofcode ) Update: Bancor #207 ( Protectorofcode ) Update: Civic #206 ( Protectorofcode ) Update: Status #205 ( Protectorofcode ) Update: Mybit #202 ( Protectorofcode ) Add: District0x #199 ( Protectorofcode ) Add: Edgeless #194 ( Protectorofcode ) Add: LeoCoin #193 ( Protectorofcode ) Add: Ubiq #192 ( Protectorofcode ) Add: Numeraire #191 ( Protectorofcode ) Add: ZCoin #190 ( Protectorofcode ) Add: Nexus #189 ( Protectorofcode ) Add: MobileGo #188 ( Protectorofcode ) Add: MCAP #187 ( Protectorofcode ) Add: Komodo #186 ( Protectorofcode ) Update : Tezos #185 ( Protectorofcode ) Update: DaoCasino #184 ( Protectorofcode ) Update Time: Omise #182 ( Protectorofcode ) Update: Tezos #173 ( Protectorofcode ) Update: Sonm #170 ( Protectorofcode ) Add: Eos #168 ( Protectorofcode ) Update: Civic #166 ( Protectorofcode ) Update: Status #161 ( Protectorofcode ) Update fundrequest ico date #160 ( karelstriegel ) Update: Sonm #159 ( Protectorofcode ) Update: bancor #157 ( Protectorofcode ) Update: Bancor #156 ( Protectorofcode ) Update: Storjcoin X #155 ( Protectorofcode ) Add: OmiseGO #154 ( Protectorofcode ) Add: Populous #153 ( Protectorofcode ) Slight update to time +4h +4h #152 ( Razaberry ) Update: Bancor #151 ( Protectorofcode ) Add: Kin #150 ( Protectorofcode ) Add: Bitquence #149 ( Protectorofcode ) Add: Monaco #148 ( Protectorofcode ) Update: Cofound #147 ( Protectorofcode ) Add: Ecobit #146 ( Protectorofcode ) Update: Aeternity #145 ( Protectorofcode ) Add: MyBit #144 ( Protectorofcode ) Update: Bat #143 ( Protectorofcode ) Add: 21Million #142 ( Protectorofcode ) Updated BNT sale date as per twitter annoucement #141 ( Razaberry ) Update: Bat #140 ( Protectorofcode ) Add: Cofound #139 ( Protectorofcode ) Update: DaoCasino #132 ( Protectorofcode ) Update: DaoCasino #130 ( Protectorofcode ) Add: Starbase #129 ( Protectorofcode ) Add: Civic #128 ( Protectorofcode ) New Bancor ICO start date: June 15 #127 ( Razaberry ) Add: Sonm #126 ( Protectorofcode ) Update: Voise #125 ( Protectorofcode ) Update: Tezos #124 ( Protectorofcode ) Add: Beth #123 ( Protectorofcode ) Add: Polybius #121 ( Protectorofcode ) Update: Status #120 ( Protectorofcode ) Update: Bancor #119 ( Protectorofcode ) Add: DCORP #118 ( Protectorofcode ) Add: Starta #116 ( Protectorofcode ) Add: Gilgam.es #115 ( Protectorofcode ) Add: Ark #114 ( Protectorofcode ) Add: Lykke #113 ( Protectorofcode ) Add: Bat #112 ( Protectorofcode ) Update: Mysterium #111 ( Protectorofcode ) Update: Storj #110 ( Protectorofcode ) Add: DaoCasino #109 ( Protectorofcode ) Fix link to Ripple web site #107 ( abitrolly ) Add: Mysterium #106 ( Protectorofcode ) Update: Storj #105 ( Protectorofcode ) BTCD - fix some links #99 ( abitrolly ) add bitworldvip #87 ( bitworldvip ) Update: Btsr, MassNetwork, Synereo, vDice #86 ( Protectorofcode ) add : Veltor, Voise, TokenCard #85 ( Protectorofcode ) add: Veltor #84 ( Protectorofcode ) Add: Tezos #83 ( Protectorofcode ) Bancor #82 ( Protectorofcode ) Add GBG #79 ( xhipster ) project update to seven blockchain systems #78 ( agent725 ) adjusted end-date for fundraiser, and subtle changes #77 ( agent725 ) Upcoming Musicoin Genesis #76 ( musicoiner ) Internet of Coins TOML specification #75 ( agent725 ) Add FundRequest Dapp #73 ( karelstriegel ) logo change #72 ( jamesgroton ) Update vDice.toml #70 ( jamesgroton ) Inchain`s ICO dates changed #69 ( trummax ) Big mistakes about the starting date. #66 ( zikilemini ) Added Beyond The Void #64 ( zikilemini ) Total Supply Update #63 ( chris4210 ) Update AntShares.toml from the Antshares Team #60 ( PeterLinX ) Update AntShares.toml from Antshares team #59 ( DavidthePangwaer ) Add files via upload #58 ( JasonMcz ) creating HONG profile #56 ( hongcoiner ) Add AntShares #55 ( PeterLinX ) Okcash Integration #54 ( oktoshi ) Add EnergyCoin #53 ( coin1hub ) Adding BTSR and ICOO assets #52 ( OpenLedgerDev ) Gh pages #51 ( ElephantDevelopment ) We are using Bitbucket instead of Github now. #50 ( justindonnaruma ) Add Rise.Vision Foundation #49 ( justindonnaruma ) Add MINEUM #48 ( antho281 ) Dash Forum migrated to new link #47 ( thelazier ) fix link name, hashtag #45 ( thelazier ) Fix some consensus descriptions #43 ( xhipster ) Add a Gitter chat badge to README.md #41 ( gitter-badger ) Update: Consensus data #40 ( xhipster ) Update: Consensus data for 6 systems #39 ( xhipster ) Update: Consensus data for 10 systems #38 ( xhipster ) Update: Consensus data for 10 systems #37 ( xhipster ) Update: All consensus data #36 ( xhipster ) Update Dash Whitepaper #34 ( thelazier ) Update Dash.toml #33 ( thelazier ) Update github link and remove redundancies #30 ( johansten ) Update NuBits.toml #19 ( CoinGame ) Update NuShares.toml #18 ( CoinGame ) Link updates #17 ( phideas ) aliases #1 ( ghost ) * This Change Log was automatically generated by github_changelog_generator","title":"Change Log"},{"location":"chaingear/Changelog/#change-log","text":"","title":"Change Log"},{"location":"chaingear/Changelog/#unreleased","text":"Full Changelog Closed issues: Create awesome gif for readme #1067 Consensus around basic chaingear utility in Cyb #1066 Remove linter warnings from console #1057 New fee splitting contracts #1055 Check and update cross contract interfaces for contracts #1054 Rewrite beneficiary contract frontend interfaces #1053 Root registry structure #1047 Make .chaingear frontend work with Main Ethereum network #1044 Release first iteration of chaingear paper #1030 Master audit #1001 Deploy to mainnet #997 Decreasing gas consumption, audit #993 0.1 chaingear release #974 Merged pull requests: edit docs org and config.yml in CI #1068 ( SaveTheAles ) UPD CI job docs upd #1033 ( SaveTheAles )","title":"Unreleased"},{"location":"chaingear/Changelog/#010-2019-01-28","text":"Closed issues: Verification of databases on Etherscan #1046 Add favicon for chaingear landing #1045 Create components for chaingear #1043 Polish design of new chaingear #1042 New registry UI #1041 Delete registry only when it is paused #1040 Multistep registry creation on UI #1039 Save registry ABI into the blockchain. \u041a\u0430\u0442\u0435\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0438 #1038 Signing account do not chooses properly #1037 ABI do not resolve given ipfs hash #1036 Cannot add records if registry fee has been changed from non zero ETH #1035 Add registryID as field of registry contract #1034 Add stand-alone initialization of schema to registry #1031 Update UI for chaingear app #1029 Add shares logic for registry #1027 Add entry creation policy logic to registry #1025 Split registry creation and deploy in 3 stagess #1024 Sprint 20 report #1023 Upgrade migration for async/await and add migrations for schemas #1020 Fix burning/deletion of token/entry in chaingear/registry contracts #1019 Upgrade docs for 0.1 Euler release #1018 Upgrade application with more contracts data #1017 Fix application logic for most compatibility with contracts #1016 Refactoring of chaingear's web3 app #1015 Gitcoin minutes first post #1014 Upgrade project after code review #1012 Upgrade project after code review #1011 Update Chaingear UI concepts #1008 Prepare project to audit #996 Security audit of chaingear's contracts #994 Random tests failing with raw truffle test command #992 Update NatSpec in all contracts #990 Allow change of Registry name #989 Create issues for community in gitcoin #988 Add EntryCore example with field uniqueness check #987 Check funds before deleting entry in Registry #986 Display registry symbol in registry list #985 Chaingear kovan unstable deployment #984 Publish sprint 12 Changelog #983 Integrate initial chaingear app with cyb #982 Review chainger initial release by ha #981 Draw logo and patern for Chaingear #979 Upgrade web3 app with initial release #978 Create a landing page for chaingear project #977 Integrate Etherscan verification #975 First side code review of chaingear #972 Integration of whitelist entry policy to Registry #971 Integration of IPFSeable to Registry #970 Integration of IPFSeable to Chaingear #969 get contracts for address #966 unical record field in array #965 Deploy chaingear contracts to Kovan testnet #962 Add Changelog for Sprint 9 #961 Initial release of chaingear #960 Initial gas tests for Chaingear/Rs and evaluation of cost #959 Refactoring for Chaingear/Rs #958 Improve access logic for Registry #957 Improve access logic for Chaingear #956 Write basic tests for Chaingear #955 Write basic tests for Registry #954 Perfomance testing scenario for cyberd #953 Perfomance testing of PoA networks #952 Update Library #951 Distinct field for registry constructor as option #948 Implement funding for chaingear/Rs #947 Add entries funding to registries base #946 Implement 721's cross-integration between chaingear and registries #945 Integrate ERC721 to Registry base #944 Integrate ERC721 to chaingear #943 Provide documentation for Chaingear contracts in NatSpec #942 Provide documentation for Registry contracts in NatSpec #941 Reduce js file size #940 Code generation base validation #939 Save abi to ipfs node not only local cache #938 Setup truffle's documentation for chaingear/Rs #937 Develop App Registry for CYB #936 Research on ERC 721 integration to chaingear/Rs entries #935 Improve docs for Chaingear project #934 Setup Registry with basic logic #933 Add registration to RR for basic logic of Registry contract base #932 Setup documentation for Registry and Entries CRUD pipeline #931 Setup chaingear RoR RoR contract with basic logic #930 Migrate old chaingear to a new project #927 Change Button Placement Put to the Header Put to the Header #919 Integrate with Etherscan #916 Create decentralized data storage #914 Develop new frontend #913 Develop new centralized data storage #912 Finalize data structure #911 Finalize application form development #910 Develop an administration interface #909 Invalid toml file #884 Invalid toml file #883 Setup CI with data validation #871 Invalid toml file #859 Invalid toml file #858 Invalid toml file #857 Invalid toml file #856 Invalid toml file #855 Invalid toml file #854 Invalid toml file #853 Invalid toml file #852 Invalid toml file #848 Invalid toml file #812 Invalid toml file #811 Initial version of registries #792 Invalid toml file #783 Invalid toml file #782 Invalid toml file #781 Invalid toml file #780 Invalid toml file #779 Invalid toml file #778 Invalid toml file #777 http://toastycoin.com/ #776 https://www.citadel.ink/ #775 https://cyber.fund/system/Oracles _Network #760 omega.one - 2018 #742 Nebulas - TBA #740 https://cyber.fund/system/Solar _Bankers #734 https://github.com/TokenBnk/ #733 Solarbankers - 21/11 #732 Tokenbnk - 30/11 #731 Metronome.io #730 https://bitcoingold.org/ #729 MakerDAO - Dec 17 #718 Truebit #717 https://www.sweetbridge.com - 17.11 #714 Metronome - March 2018 #713 http://fragmented.world - TBA #712 http://quickblocks.io - TBA #711 http://lightstreams.network/ - Q2 2018 #710 https://wepower.network/ #709 https://dharma.io ICO date TBA #708 Pre-Sale add please from 30 th October to 3 rd November #705 Blockstack - 13 Nov - open-source, contract to come #685 Mobius - 8 Nov Open source/contract to come #684 FundRequest - 20 Nov #683 Add navigation to Active, Upcoming, Anticipated and Successful on Radar page #682 Resolve why some projects are displayed twice on Radar #681 Find transformation manager for Chaingear #674 Ocean protocol #660 Develop scripts for export Chaingear to Google Spreadsheet #637 Move data from Google Spreadsheet to Chaingear #636 Kill submit form on site #635 Monthly report \"Decrypted\" or \"Unfiated\" #634 Raiden Network - 18 Oct #614 Andaction #610 True Flip Markets #603 EAS #601 Publica - 25 Oct #580 Quantstamp - 12/11 #579 True Flip #529 Remove all ICO data for Contingency on website #511 Raiden Network Oct - ? #510 FansUnite #509 PROPS project - 20 Nov #508 Leverj - 7 Nov - Open source/contract to come #507 https://decent.ch/ #506 ICON 20 Oct #505 Livepeer #504 https://protos.tokenhub.com/ 25 Sept pre-ICO / 17 Oct ICO #503 https://biocoin.bio/ru 9 Nov #502 Climatecoin 1 Nov #501 Kyber Network ICO over #483 Verif-y - 25 Oct #481 Brickblock 31 Oct #476 ChainLink #475 Solidified #472 Moneypot 17 Sept #471 Zephyr 6 Oct #470 Correct ICO time for Paragon #466 WePower Network - ICO planned on February 1 st , 2018 #457 Render 5 Oct #456 Mercury Protocol - 25 Oct - open code, contract to come soon #455 Zen Protocol #454 plasma.io #453 dharma.io - 2018 #452 WanChain 3 Oct #451 ChainLink 19 Sept #450 ties.network 21 Sept #449 Sweetbridge #448 Aventus - closed #447 DOVU.io #446 Airswap - 10 Oct - code partially closed #445 BitJob ICO ongoing #444 Graft.network #443 Gimli 18 Sept #442 The cyber Fund website does not display any changes #440 Starbase 27 Sept #435 Resolve comments to submissions #434 Grid+ / 30 Oct #433 FaceCoin #432 AirToken 19 Sept #428 Flovio #427 Goldmint 17 Sept #426 Atlant.io ongoing #425 Streamr - 12 Oct - code partially closed #424 Doc.ai 28 Sept #417 ** https://databrokerdao.com/ 18 Sept pre-ICO #416 **swap.tech #415 Lendroid #414 Bloom #413 Etherparty 1 Oct #412 AutoNomic #411 Aidos Kunen #410 QRL #409 Metaverse #408 FunFair #407 Paragon 15 Sept #406 Zeppelin OS #405 Polkadot #404 https://neo.org/ #403 Aion #402 Filecoin #239 0x project #226 Migrate escrow and proof from Stats to escrow in Ballances #214 rexmls.com #213 Create google excel sheet with all tokens with their decimals #212 Move ICO Submit to ICO Stats #203 Concept first post-ICO report #201 propy.com #200 coindash.io #198 MyBit #197 district0x #196 \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043e\u0442\u0447\u0435\u0442\u0430 \u0437\u0430 \u0438\u044e\u043d\u044c #195 Update Post-ICO data #183 DAO Casino #176 EOS #167 Finish Aeternity Crowdsale #165 Tezos #164 AdChain #163 OmiseGo #162 Civic #158 Status #138 SONM #137 Bancor draft #136 Cofound.it #122 Starbase #117 Final fraft Starbase #108 BAT #103 Pre-draft BAT #102 Setup link checker #98 Add data label #97 https://cyber.fund/EMC #96 Bancor #94 Pre-draft Bancor #93 Mysterium #92 \u041d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e \u043a\u0430\u043a \u043e\u043d\u0438 \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u0432 \u0420\u0430\u0434\u0430\u0440\u0435 \u0432\u043d\u0438\u0437\u0443 \u0432\u043d\u0438\u0437\u0443 #89 Fix first price and date #74 add missing icons #68 crowdsale times #46 Fix incorrect Storj cap calculation #42 Quality report calculation #32 Move aliases.CurrencyName to a token.token_name #31 Links for Stellar #29 Clean up API and source data #28 Clear garbage systems #27 Fix incorrect Cap due to wrong supply #26 Chaingear Init #25 Sync users with dev #24 Autoupdated assets don't star system #23 How to add tokenless protocols? #22 List of systems to rename #21 Change address/path for generated API #20 Regeps for systems in Satoshi\u2022Fund #16 Fix currencies names #15 BitBTC icon #14 Add icons for BitAssets #13 Blockchain IDs for rated systems #12 Chaingear landing #11 Chaingear docs #10 Fix rating for \u272a\u272a systems #9 Reconsile Coinmarketcap names #8 Rename Objects and Arrays #7 Update rating #6 Merge dublicates #4 One chain - one folder #3 Switch to TOML #2 Merged pull requests: Chaingear's EVM 0.1 Euler Release #1056 ( litvintech ) Rebuild chaingear #1021 ( litvintech ) UPD config.yml knowledge -> wiki #1013 ( SaveTheAles ) Review by anton #1009 ( AnthonyAkentiev ) Update landing according to new design #1007 ( SaveTheAles ) landing remaking #1006 ( SaveTheAles ) 996 refactoring before audit #1004 ( litvintech ) remove debugger #1003 ( vstavetski ) 996 refactoring before audit #1002 ( litvintech ) fixes #992 #995 ( rsercano ) Setup landing page for Chaingear #991 ( SaveTheAles ) Initial release #980 ( litvintech ) Improved docs for chaingear #976 ( litvintech ) 954 basic tests for registry #968 ( hleb-albau ) NatSpec descriptions for .chaingear and .registry #967 ( SaveTheAles ) Chaingear and Registry tokenized linking #964 ( litvintech ) Add class diagramm of Chaingear.sol #950 ( SaveTheAles ) ENSF noties #949 ( SaveTheAles ) Update chaingear.json #929 ( ninjascant ) Add: Lightstreams #928 ( ninjascant ) Block #926 ( ninjascant ) Add: Marcelo #925 ( ninjascant ) Add: Kryll_io #924 ( ninjascant ) Update: KERBEROS #923 ( ninjascant ) Add: KERBEROS #922 ( ninjascant ) Add: Block #921 ( ninjascant ) Add: BharathTrade #920 ( ninjascant ) Add: OnLive #917 ( ninjascant ) Add: PlayBets #897 ( goloschaingear ) Add: Naviaddress #896 ( goloschaingear ) Update Dether.toml #892 ( mohdether ) Add: ADAMANT #890 ( ninjascant ) Add: Neunet #889 ( ninjascant ) Add: MyWish #888 ( ninjascant ) Add: MyTrackNet #887 ( ninjascant ) Add: Movement App #886 ( ninjascant ) Update: ATFS Project; convert to new data structure #885 ( ninjascant ) Add: MindSports #882 ( ninjascant ) Add: MediBloc #881 ( ninjascant ) Add: e-Chat ICO #880 ( ninjascant ) Add: Lockcoin #879 ( ninjascant ) Add: GraphGrail Ai #878 ( ninjascant ) Add: GOALBONANZA #877 ( ninjascant ) Add: DropDeck #876 ( ninjascant ) Fix headline #875 ( ninjascant ) Fix chaingear.json #874 ( ninjascant ) Add: VRTworld #873 ( goloschaingear ) Add CI and data validation #872 ( abitrolly ) Add: BlockNum #869 ( goloschaingear ) Update Adshares ICO end date #868 ( jzemlo ) Blockarray #867 ( ninjascant ) Update: BANKEX #866 ( goloschaingear ) Update: BANKEX #865 ( goloschaingear ) Add Karbo logo #860 ( ninjascant ) Add: TrakInvest #851 ( goloschaingear ) Update Cryptics.toml #850 ( halsoi ) Update Dether.toml #849 ( mohdether ) Add new data structure #847 ( ninjascant ) Add new structure template #846 ( ninjascant ) Add: new data structture template #845 ( ninjascant ) Add: TrakInvest #844 ( goloschaingear ) Add: MARK.SPACE #843 ( ninjascant ) Add: Legacy #842 ( ninjascant ) Add: Kr8os #841 ( ninjascant ) Add: JibrelNetwork #840 ( ninjascant ) Add: iungo #839 ( ninjascant ) Add: InsurePal #838 ( ninjascant ) Add: HOQU #837 ( ninjascant ) Add: GraftNetwork #836 ( ninjascant ) Add: DFS #835 ( ninjascant ) Add: DAXT #834 ( ninjascant ) Add: SOLA #833 ( ninjascant ) Add: DADI #832 ( ninjascant ) Add: CycloShieldCoin #831 ( ninjascant ) Add: Cryptopus #830 ( ninjascant ) Add: CryptoAlias #829 ( ninjascant ) Blockarray #828 ( ninjascant ) Blockarray #827 ( ninjascant ) Add: Chainium #825 ( ninjascant ) Add: Cardstack #824 ( ninjascant ) Add: Bottos #823 ( ninjascant ) Add: Blockmesh #822 ( ninjascant ) Add: Blocklancer #821 ( ninjascant ) Add: BankEx #820 ( ninjascant ) Add: ATFS Project #819 ( ninjascant ) Add: AdMine #818 ( ninjascant ) Add: Aditus #817 ( ninjascant ) Add: Karbo #816 ( goloschaingear ) Add: TradePlayz #815 ( goloschaingear ) Add: TokenGo #810 ( goloschaingear ) Add: DAXT #809 ( goloschaingear ) Add: RaidenNetwork #790 ( goloschaingear ) Add: DCX #785 ( goloschaingear ) Add: CLN #774 ( ninjascant ) Add: DCX #773 ( ninjascant ) Add: Volk #772 ( ninjascant ) Add: Polkadot #771 ( goloschaingear ) Change dates #770 ( Bilous4singree ) Add: xChange logo #769 ( ninjascant ) Add: xChange #768 ( ninjascant ) Add: xChange #767 ( goloschaingear ) BitClave TokenSale Update #766 ( mike-tih ) Add: TSSToken #765 ( goloschaingear ) Add: SophiaTX #763 ( goloschaingear ) Add: SMMarket #762 ( goloschaingear ) Add: ParetoNetwork #761 ( goloschaingear ) Update: chaingear.json #759 ( ninjascant ) Add: WePower #758 ( ninjascant ) Add Experty logo #757 ( ninjascant ) Update: chaingear.json #756 ( ninjascant ) Add: TokenBnk #755 ( ninjascant ) Update: chaingear.json #754 ( ninjascant ) Add: Game Machine #753 ( ninjascant ) Add: DaoPlayMarket 2.0 #752 ( ninjascant ) Add: Blockarray #751 ( ninjascant ) Update: chaingear.json #750 ( Protectorofcode ) Add: Expert #748 ( goloschaingear ) Add: Debitum #747 ( ninjascant ) Add: BitcoinGold #746 ( ninjascant ) Update: chaingear.json #744 ( ninjascant ) Update: chaingear.json #743 ( ninjascant ) Add: Neuromation #741 ( goloschaingear ) Add: Rentberry #739 ( ninjascant ) Add: RightMesh #738 ( ninjascant ) Add: SelfKey #737 ( ninjascant ) Add: StopTheFakes #736 ( ninjascant ) Add: VinChainToken #735 ( ninjascant ) Update: chaingear.json #728 ( Protectorofcode ) Update: chaingear.json #727 ( Protectorofcode ) Update: chaingear.json #726 ( Protectorofcode ) Update: chaingear.json #725 ( Protectorofcode ) Update: chaingear #724 ( Protectorofcode ) Update: chaingear.json #722 ( Protectorofcode ) Update Opporty.toml #721 ( Protectorofcode ) Add: wysToken #720 ( ninjascant ) Add: Bloom #719 ( goloschaingear ) Update: chaingear.json #716 ( ninjascant ) Add: NAU #715 ( ninjascant ) Update: chaingear.json #707 ( ninjascant ) Update: chaingear.json #706 ( ninjascant ) Add: Dogezer #704 ( ninjascant ) Add: BitClave #703 ( ninjascant ) Add: AppCoins #702 ( ninjascant ) Add: Blockstack #701 ( ninjascant ) Update: chaingear.json #700 ( ninjascant ) Update: chaingear #699 ( Protectorofcode ) Add: Confideal #695 ( ninjascant ) Update toml. #693 ( Bilous4singree ) Update: chaingear.son #692 ( ninjascant ) Rega #691 ( ninjascant ) Delete: Bitnation #690 ( Protectorofcode ) Update: Gizer #689 ( Protectorofcode ) Rega #688 ( ninjascant ) Rega #687 ( ninjascant ) Add: Leverj #686 ( ninjascant ) Add: FansUnite #680 ( ninjascant ) Add: IACCrowdsale #679 ( ninjascant ) Add: SimpleToken #678 ( ninjascant ) Add: MBCH #677 ( ninjascant ) Add: Universa #676 ( ninjascant ) Add: AntiBureaucracy #675 ( ninjascant ) Add: Lamden #673 ( ninjascant ) Add: Rega #672 ( ninjascant ) Update: chaingear.json #671 ( ninjascant ) Update: Polkadot #670 ( ninjascant ) Update: RaidenNetwork logo #669 ( ninjascant ) Update: chaingear.json #668 ( Protectorofcode ) Update: chaingear.json #667 ( Protectorofcode ) Update: chaingear.json #666 ( Protectorofcode ) Raiden2 #664 ( ninjascant ) Add: RaidenNetwork #662 ( ninjascant ) Add: E4ROW #661 ( Protectorofcode ) Add: chaingear.json #659 ( Protectorofcode ) Update Fidcom.toml #658 ( Bolikus ) Add: Sense #657 ( ninjascant ) Add: DalaToken #656 ( ninjascant ) Add: Prizm #655 ( Protectorofcode ) Add: Nimiq #654 ( Protectorofcode ) Add: Real #653 ( Protectorofcode ) Add: Propy #652 ( Protectorofcode ) Add: Qointum #651 ( Protectorofcode ) Update: chaingear.json #650 ( Protectorofcode ) Add: Equibit #649 ( Protectorofcode ) Add: Vega Fund #648 ( Protectorofcode ) Update: chaingear.json #647 ( Protectorofcode ) Add: Leviar Coin #646 ( Protectorofcode ) Add: TrueBit #645 ( Protectorofcode ) Add: Agrello #644 ( Protectorofcode ) Update: chaingear.json #643 ( Protectorofcode ) Update: chaingear.json #642 ( Protectorofcode ) Add: Dether #641 ( Protectorofcode ) Update: chaingear.json #639 ( Protectorofcode ) Update: chaingear.json #638 ( Protectorofcode ) Update: chaingear.json #633 ( Protectorofcode ) Update: ARToken #632 ( Protectorofcode ) Update: chaingear.json #631 ( Protectorofcode ) Add: ARToken #630 ( Protectorofcode ) Add: KredX #629 ( ninjascant ) Add: Gimli #628 ( Protectorofcode ) Add: Ties Network #627 ( Protectorofcode ) Update: chaingear.json #626 ( Protectorofcode ) Update: Wanchain #625 ( Protectorofcode ) Add: Chimaera #624 ( ninjascant ) Update: Brickblock #623 ( Protectorofcode ) Update: chaingear.json #622 ( Protectorofcode ) Add: Divi Project #621 ( Protectorofcode ) Add: Gizer #620 ( Protectorofcode ) Update: chaingear.json #619 ( Protectorofcode ) Update: chaingear.json #618 ( Protectorofcode ) Add: Enigma #617 ( Protectorofcode ) Update: chaingear.json #616 ( Protectorofcode ) Add: Lendroid #615 ( Protectorofcode ) Add: FortySevenBank #613 ( ninjascant ) Update: chaingear.json #612 ( Protectorofcode ) Add: Pangea #611 ( ninjascant ) Update: chaingear.json #608 ( Protectorofcode ) Add: HeroCoin #607 ( Protectorofcode ) Add: ARToken #606 ( Protectorofcode ) Update: chaingear.json #605 ( Protectorofcode ) Update: Mercury Protocol #604 ( Protectorofcode ) Add: Dream Team #602 ( Protectorofcode ) Update: DMarket #600 ( Protectorofcode ) Add: Gaze Coin #599 ( Protectorofcode ) Add: MatchPay #598 ( Protectorofcode ) Add: Ripio Credit Network #597 ( Protectorofcode ) Add: Jibrel Network #596 ( Protectorofcode ) Add: Stimus #595 ( Protectorofcode ) Update: chaingear.json #594 ( Protectorofcode ) Add: Dome Platform #593 ( Protectorofcode ) Add: Rhea #592 ( Protectorofcode ) Add: Genesis Vision #591 ( Protectorofcode ) Add: Opporty #590 ( Protectorofcode ) Update: chaingear.json #589 ( Protectorofcode ) Fix True Flip Lottery Markets #588 ( gamedevsam ) Update: chaingear.json #587 ( Protectorofcode ) Update: Jincor #586 ( Protectorofcode ) Update: chaingear.json #585 ( Protectorofcode ) Add: Crypto Improvement Fund #584 ( Protectorofcode ) Update: chaingear.json #583 ( Protectorofcode ) Add: Zenome #582 ( Protectorofcode ) Update Privatix.toml #581 ( devalexandr ) Update Crypto 20.toml #578 ( skolobov ) Update: chaingear.json #577 ( Protectorofcode ) Add: MingoCoin #576 ( Protectorofcode ) Add: BioPayCoin #575 ( Protectorofcode ) Add: Sparc #574 ( Protectorofcode ) Add: DarfChain #573 ( Protectorofcode ) Add: Harbor #572 ( Protectorofcode ) Add: Udiar #571 ( Protectorofcode ) Add: Quantstamp #570 ( Protectorofcode ) Add: Fidcom #569 ( Protectorofcode ) Update Papyrus.toml #568 ( ashwets ) Add: Databroker DAO #567 ( Protectorofcode ) Add: Dinnerful Network #566 ( Protectorofcode ) Add: TripAlly #565 ( Protectorofcode ) Add: Lescoin #564 ( Protectorofcode ) Add: Hirematch #563 ( Protectorofcode ) Update: chaingear.json #562 ( Protectorofcode ) Add: CoinDrive #561 ( Protectorofcode ) Add: Auctus #560 ( Protectorofcode ) Add: Snip #559 ( Protectorofcode ) Update: chaingear.json #558 ( Protectorofcode ) Add: Papyrus #557 ( Protectorofcode ) Add: CarTaxi #556 ( Protectorofcode ) Add: Crypto 20 #555 ( Protectorofcode ) Add: SRG-Play&Earn #554 ( Protectorofcode ) Update: chaingear.json #553 ( Protectorofcode ) Add: Hacken #552 ( Protectorofcode ) Add: DLS Academy #551 ( Protectorofcode ) Add: Snovio #550 ( Protectorofcode ) Add: Acebusters #549 ( Protectorofcode ) Add: Relest #548 ( Protectorofcode ) Add: Soma #547 ( Protectorofcode ) Add: Ethbet #546 ( Protectorofcode ) Add: Stash #545 ( Protectorofcode ) Add: Privatix #544 ( Protectorofcode ) Add: Etch #543 ( Protectorofcode ) Add: Galactikka #542 ( Protectorofcode ) Add: Icon #541 ( Protectorofcode ) Update: chaingear.json #540 ( Protectorofcode ) Update: chaingear.json #539 ( Protectorofcode ) Update: Aion #538 ( Protectorofcode ) Update: chaingear.json #537 ( Protectorofcode ) Add: Crypto.tickets #536 ( Protectorofcode ) Add: Polkadot #535 ( Protectorofcode ) Add: Wanchain #534 ( Protectorofcode ) Update: chaingear.json #533 ( Protectorofcode ) Update: True Flip Lottery #532 ( Protectorofcode ) Update: chaingear.json #531 ( Protectorofcode ) Add: True Flip Lottery #530 ( Protectorofcode ) Update: Brickblock #528 ( Protectorofcode ) Update: Etherparty #527 ( Protectorofcode ) Update: Chaingear.json #526 ( Protectorofcode ) Add: Zen Protocol #525 ( Protectorofcode ) Update: Kyber #524 ( Protectorofcode ) Add: Livepeer #523 ( Protectorofcode ) Add: Internxt #522 ( Protectorofcode ) Add: Evr #521 ( Protectorofcode ) Add: Cove Identity #520 ( Protectorofcode ) Add: Alloy #519 ( Protectorofcode ) Update: chaingear.json #518 ( Protectorofcode ) Update: Cointingency #517 ( Protectorofcode ) Update: chaingear.json #516 ( Protectorofcode ) Update: ChainLink #515 ( Protectorofcode ) Update: Cointingency #513 ( Protectorofcode ) Update: Contingency #512 ( Protectorofcode ) Update: chaingear.json #500 ( Protectorofcode ) Add: Atlant #499 ( Protectorofcode ) Update: Crystal Clear #498 ( Protectorofcode ) Update: chaingear.json #497 ( Protectorofcode ) Add: Verif-y #496 ( Protectorofcode ) Add: AirSwap #495 ( Protectorofcode ) Add: ChainLink #493 ( Protectorofcode ) Add: Grid+ #492 ( Protectorofcode ) Update: Metaverse #491 ( Protectorofcode ) Update: Aira #490 ( Protectorofcode ) Update: Omega One #489 ( Protectorofcode ) Update: Adchain #488 ( Protectorofcode ) Update: Loopring #487 ( Protectorofcode ) Add: Loopring #486 ( Protectorofcode ) Add: Mercury Protocol #485 ( Protectorofcode ) Update: chaingear.json #484 ( Protectorofcode ) Add: RockChain #482 ( Protectorofcode ) Add: Mito #480 ( Protectorofcode ) Add: Hagglin #479 ( Protectorofcode ) Add: Flip Coin #478 ( Protectorofcode ) Add: VoteCoin #477 ( Protectorofcode ) Update: chaingear.json #474 ( Protectorofcode ) Update: Electroneum #473 ( Protectorofcode ) Please change the end date to 2017 10 31. #469 ( asanezz7 ) Update: chaingear.json #468 ( Protectorofcode ) Update: Paragon ICO #467 ( Protectorofcode ) Update: chaingear.json #465 ( Protectorofcode ) Update: AntShares -> NEO #464 ( Protectorofcode ) Add: Quantum Resistant Ledger #463 ( Protectorofcode ) Update: BOScoin #462 ( Protectorofcode ) Add: Metaverse #461 ( Protectorofcode ) Update: Aidos Kuneen #460 ( Protectorofcode ) Add: Aidos Kuneen #459 ( Protectorofcode ) Add: Aion #458 ( Protectorofcode ) Add: OpenZeppelin #441 ( Protectorofcode ) Add: FaceCoin #439 ( Protectorofcode ) Update: chaingear.json #438 ( Protectorofcode ) Update: Starbase #437 ( Protectorofcode ) Update: chaingear.json #436 ( Protectorofcode ) Update: FunFair #431 ( Protectorofcode ) Update: chaingear.json #430 ( Protectorofcode ) Add: Funfair #429 ( Protectorofcode ) Update: chaingear.json #423 ( Protectorofcode ) Add: Cash Poker Pro #422 ( Protectorofcode ) Add: EventChain #421 ( Protectorofcode ) Add: LAToken #420 ( Protectorofcode ) Add: Rouge Project #419 ( Protectorofcode ) Add: Detector #418 ( Protectorofcode ) Add: Spheris #401 ( Protectorofcode ) Add: Graft #400 ( Protectorofcode ) Add: DomRaider #399 ( Protectorofcode ) Add: Crystal Clear #398 ( Protectorofcode ) Add: Matryx #397 ( Protectorofcode ) Delete: Kin #396 ( Protectorofcode ) Add CombiCoin #395 ( Protectorofcode ) Add: Paragon #394 ( Protectorofcode ) Update: chaingear.json #392 ( Protectorofcode ) Update: Kin #391 ( Protectorofcode ) Update: chaingear.json #390 ( Protectorofcode ) Update: Decentraland #389 ( Protectorofcode ) Update: Filecoin #388 ( Protectorofcode ) Update: chaingear.json #387 ( Protectorofcode ) Update: chaingear.json #386 ( Protectorofcode ) Add: Urbit #385 ( Protectorofcode ) Add: Streamr #384 ( Protectorofcode ) Add: Solar Bankers #383 ( Protectorofcode ) Add: Oracles Network #382 ( Protectorofcode ) Add: Omega One #381 ( Protectorofcode ) Add: Kyber #380 ( Protectorofcode ) Add: Etherparty #379 ( Protectorofcode ) Add: Doc.ai #378 ( Protectorofcode ) Add: Aira #377 ( Protectorofcode ) Update: Adshares #376 ( Protectorofcode ) Update: Indorse #375 ( Protectorofcode ) Update: Cindicator #374 ( Protectorofcode ) Pylon Network #373 ( klenergy ) Update: chaingear.json #372 ( Protectorofcode ) Add: AirToken #371 ( Protectorofcode ) Add: Modum #370 ( Protectorofcode ) Update: Viberate #369 ( Protectorofcode ) Update: chaingear.json #368 ( Protectorofcode ) Update: Mybit #367 ( Protectorofcode ) Update: Rex #366 ( Protectorofcode ) Update: chaingear.json #365 ( Protectorofcode ) Update: Filecoin #364 ( Protectorofcode ) Update: Dimcoin #363 ( Protectorofcode ) Update: Presearch #362 ( Protectorofcode ) Update: Jincor #361 ( Protectorofcode ) Update: Vibe #360 ( Protectorofcode ) Update: Stable #359 ( Protectorofcode ) Update: Everex #358 ( Protectorofcode ) Update: Enjin Coin #357 ( Protectorofcode ) Update: Tieron #356 ( Protectorofcode ) Update: chaingear.json #355 ( Protectorofcode ) Update: Indorse #354 ( Protectorofcode ) Update: chaingear.json #353 ( Protectorofcode ) Update: Gilgam #352 ( Protectorofcode ) Add: TenX #351 ( Protectorofcode ) Add: Stox #350 ( Protectorofcode ) Add: Pillar #349 ( Protectorofcode ) Add: Opus #348 ( Protectorofcode ) Add: OpenAnx #347 ( Protectorofcode ) Add: Make It Viral #346 ( Protectorofcode ) Update: IO Coin #345 ( Protectorofcode ) Add: Digital Developers Fund #344 ( Protectorofcode ) Add: Decentraland #343 ( Protectorofcode ) Add: Crypviser #342 ( Protectorofcode ) Add: Bitjob #341 ( Protectorofcode ) Add: Asch #340 ( Protectorofcode ) Add: adToken #339 ( Protectorofcode ) Add: AdEx #338 ( Protectorofcode ) Add: Disledger #337 ( Protectorofcode ) Update: chaingear.js #336 ( Protectorofcode ) Update: 0x #335 ( Protectorofcode ) Update: chaingear.json #334 ( Protectorofcode ) Add: Umbrella Coin #333 ( Protectorofcode ) Add: Trackr #332 ( Protectorofcode ) Update: Solar DAO #331 ( Protectorofcode ) Add: Solar DAO #330 ( Protectorofcode ) Add: Slot N Slot #329 ( Protectorofcode ) Add: Pylon Network #328 ( Protectorofcode ) Add: OpenZen #327 ( Protectorofcode ) Add: Neblio #326 ( Protectorofcode ) Add: Magos #325 ( Protectorofcode ) Add: Lordmancer #324 ( Protectorofcode ) Add: Lampix #323 ( Protectorofcode ) Add: Fijinto #322 ( Protectorofcode ) Add: Fluence #321 ( Protectorofcode ) Add: Electroneum #319 ( Protectorofcode ) Add: DMarket #318 ( Protectorofcode ) Add: Dimcoin #317 ( Protectorofcode ) Add: Crowdholding #316 ( Protectorofcode ) Add: Cindicator #315 ( Protectorofcode ) Add: aventus #314 ( Protectorofcode ) Add: Anryze #313 ( Protectorofcode ) Updating Indorse links & token sale details #310 ( avadhootkulkarni ) Update: chaingear.json #309 ( Protectorofcode ) Update: FileCoin #308 ( Protectorofcode ) Update: chaingear.json #307 ( Protectorofcode ) Update: Filecoin #306 ( Protectorofcode ) Update: chaingear.json #305 ( Protectorofcode ) Add: Spectiv #304 ( Protectorofcode ) Add: Presearch #303 ( Protectorofcode ) Add: Poet #302 ( Protectorofcode ) Add: Indorse #301 ( Protectorofcode ) Add: CoinDash #300 ( Protectorofcode ) Add: Adshares #299 ( Protectorofcode ) Add: 8 Curcuit Studios #298 ( Protectorofcode ) Update: chaingear.json #297 ( Protectorofcode ) Add: U.CASH #296 ( Protectorofcode ) Add: Silent Notary #295 ( Protectorofcode ) Add: MooseCoin #294 ( Protectorofcode ) Add: Kairos #293 ( Protectorofcode ) Add: Jincor #292 ( Protectorofcode ) Add: Gluon #291 ( Protectorofcode ) Add: DigiCoinMaker #290 ( Protectorofcode ) Add: Blocklancer #289 ( Protectorofcode ) Update: chaingear.json #288 ( Protectorofcode ) Update: Kickico #287 ( Protectorofcode ) Update: chaingear.json #286 ( Protectorofcode ) Update: Starbase #285 ( Protectorofcode ) Update: Starbase #284 ( Protectorofcode ) Update: 0x #283 ( Protectorofcode ) Add: Vibe Hub #282 ( Protectorofcode ) Add: Stable #281 ( Protectorofcode ) Add: Sift #280 ( Protectorofcode ) Add: Gamerbits #279 ( Protectorofcode ) Add: Coss #278 ( Protectorofcode ) Add: Centra #277 ( Protectorofcode ) Add: Bitsdigit #276 ( Protectorofcode ) We've updated some info. Please, update Kickico.toml #275 ( KICKICOPR ) Update: chaingear.json #274 ( Protectorofcode ) Update: Bitcoin Cash #273 ( Protectorofcode ) Update: chaingear.json #272 ( Protectorofcode ) Update: Bitcoin Cash #271 ( Protectorofcode ) Add: Bitcoin Cash #270 ( Protectorofcode ) Update: chaingear.json #269 ( Protectorofcode ) Update: Kuna #268 ( Protectorofcode ) Update: chaingear.json #267 ( Protectorofcode ) Cha #266 ( Protectorofcode ) Update: chaingear.json #264 ( Protectorofcode ) Update: Kuna #263 ( Protectorofcode ) Update: chaingear.json #262 ( Protectorofcode ) Update: Brickblock #261 ( Protectorofcode ) Add: Brickblock #260 ( Protectorofcode ) Add: Nimfamoney #259 ( Protectorofcode ) Add: Monkey Capital #258 ( Protectorofcode ) Add: Kuna #257 ( Protectorofcode ) Add: Enjin Coin #256 ( Protectorofcode ) Update: chaingear.js #255 ( Protectorofcode ) Update: chaingear.js #254 ( Protectorofcode ) Update: Kickico #253 ( Protectorofcode ) Update: Skycoin #251 ( Protectorofcode ) update logo skycoin #250 ( Protectorofcode ) Add: Prospectors #248 ( Protectorofcode ) Add: Nexxus Parthers #247 ( Protectorofcode ) Add: Embermine #246 ( Protectorofcode ) Add: BOScoin #245 ( Protectorofcode ) Add: Viberate #243 ( Protectorofcode ) Add: Kickico #242 ( Protectorofcode ) Update: Skycoin #238 ( LucianMincu ) Delete Scam: Kibo #237 ( Protectorofcode ) Add: FundYourSelf #236 ( Protectorofcode ) Add: Apptrade #235 ( Protectorofcode ) Add: Encryptotel #234 ( Protectorofcode ) Add: Veritaseum #233 ( Protectorofcode ) Add: ZrCoin #232 ( Protectorofcode ) Add: Chain of Points #231 ( Protectorofcode ) Add: Everex #230 ( Protectorofcode ) Add: Kibo Platform #229 ( Protectorofcode ) Update: Blockfreight #228 ( Protectorofcode ) Add: SlognCoin #227 ( Protectorofcode ) Add: Ziber #224 ( Protectorofcode ) Add: Tieron #223 ( Protectorofcode ) Add: Rex #222 ( Protectorofcode ) Add: 0x #221 ( Protectorofcode ) Add: Ethbits iTrade #220 ( Protectorofcode ) Add: Lunyr #219 ( Protectorofcode ) Add: CreativeChain #218 ( Protectorofcode ) Add: Suretly #217 ( Protectorofcode ) Update: Tezos #216 ( Protectorofcode ) Update: Mybit #215 ( Protectorofcode ) Update: TokenCard #211 ( Protectorofcode ) Update: Mysterium #210 ( Protectorofcode ) Update: Bat #209 ( Protectorofcode ) Update: Cofound #208 ( Protectorofcode ) Update: Bancor #207 ( Protectorofcode ) Update: Civic #206 ( Protectorofcode ) Update: Status #205 ( Protectorofcode ) Update: Mybit #202 ( Protectorofcode ) Add: District0x #199 ( Protectorofcode ) Add: Edgeless #194 ( Protectorofcode ) Add: LeoCoin #193 ( Protectorofcode ) Add: Ubiq #192 ( Protectorofcode ) Add: Numeraire #191 ( Protectorofcode ) Add: ZCoin #190 ( Protectorofcode ) Add: Nexus #189 ( Protectorofcode ) Add: MobileGo #188 ( Protectorofcode ) Add: MCAP #187 ( Protectorofcode ) Add: Komodo #186 ( Protectorofcode ) Update : Tezos #185 ( Protectorofcode ) Update: DaoCasino #184 ( Protectorofcode ) Update Time: Omise #182 ( Protectorofcode ) Update: Tezos #173 ( Protectorofcode ) Update: Sonm #170 ( Protectorofcode ) Add: Eos #168 ( Protectorofcode ) Update: Civic #166 ( Protectorofcode ) Update: Status #161 ( Protectorofcode ) Update fundrequest ico date #160 ( karelstriegel ) Update: Sonm #159 ( Protectorofcode ) Update: bancor #157 ( Protectorofcode ) Update: Bancor #156 ( Protectorofcode ) Update: Storjcoin X #155 ( Protectorofcode ) Add: OmiseGO #154 ( Protectorofcode ) Add: Populous #153 ( Protectorofcode ) Slight update to time +4h +4h #152 ( Razaberry ) Update: Bancor #151 ( Protectorofcode ) Add: Kin #150 ( Protectorofcode ) Add: Bitquence #149 ( Protectorofcode ) Add: Monaco #148 ( Protectorofcode ) Update: Cofound #147 ( Protectorofcode ) Add: Ecobit #146 ( Protectorofcode ) Update: Aeternity #145 ( Protectorofcode ) Add: MyBit #144 ( Protectorofcode ) Update: Bat #143 ( Protectorofcode ) Add: 21Million #142 ( Protectorofcode ) Updated BNT sale date as per twitter annoucement #141 ( Razaberry ) Update: Bat #140 ( Protectorofcode ) Add: Cofound #139 ( Protectorofcode ) Update: DaoCasino #132 ( Protectorofcode ) Update: DaoCasino #130 ( Protectorofcode ) Add: Starbase #129 ( Protectorofcode ) Add: Civic #128 ( Protectorofcode ) New Bancor ICO start date: June 15 #127 ( Razaberry ) Add: Sonm #126 ( Protectorofcode ) Update: Voise #125 ( Protectorofcode ) Update: Tezos #124 ( Protectorofcode ) Add: Beth #123 ( Protectorofcode ) Add: Polybius #121 ( Protectorofcode ) Update: Status #120 ( Protectorofcode ) Update: Bancor #119 ( Protectorofcode ) Add: DCORP #118 ( Protectorofcode ) Add: Starta #116 ( Protectorofcode ) Add: Gilgam.es #115 ( Protectorofcode ) Add: Ark #114 ( Protectorofcode ) Add: Lykke #113 ( Protectorofcode ) Add: Bat #112 ( Protectorofcode ) Update: Mysterium #111 ( Protectorofcode ) Update: Storj #110 ( Protectorofcode ) Add: DaoCasino #109 ( Protectorofcode ) Fix link to Ripple web site #107 ( abitrolly ) Add: Mysterium #106 ( Protectorofcode ) Update: Storj #105 ( Protectorofcode ) BTCD - fix some links #99 ( abitrolly ) add bitworldvip #87 ( bitworldvip ) Update: Btsr, MassNetwork, Synereo, vDice #86 ( Protectorofcode ) add : Veltor, Voise, TokenCard #85 ( Protectorofcode ) add: Veltor #84 ( Protectorofcode ) Add: Tezos #83 ( Protectorofcode ) Bancor #82 ( Protectorofcode ) Add GBG #79 ( xhipster ) project update to seven blockchain systems #78 ( agent725 ) adjusted end-date for fundraiser, and subtle changes #77 ( agent725 ) Upcoming Musicoin Genesis #76 ( musicoiner ) Internet of Coins TOML specification #75 ( agent725 ) Add FundRequest Dapp #73 ( karelstriegel ) logo change #72 ( jamesgroton ) Update vDice.toml #70 ( jamesgroton ) Inchain`s ICO dates changed #69 ( trummax ) Big mistakes about the starting date. #66 ( zikilemini ) Added Beyond The Void #64 ( zikilemini ) Total Supply Update #63 ( chris4210 ) Update AntShares.toml from the Antshares Team #60 ( PeterLinX ) Update AntShares.toml from Antshares team #59 ( DavidthePangwaer ) Add files via upload #58 ( JasonMcz ) creating HONG profile #56 ( hongcoiner ) Add AntShares #55 ( PeterLinX ) Okcash Integration #54 ( oktoshi ) Add EnergyCoin #53 ( coin1hub ) Adding BTSR and ICOO assets #52 ( OpenLedgerDev ) Gh pages #51 ( ElephantDevelopment ) We are using Bitbucket instead of Github now. #50 ( justindonnaruma ) Add Rise.Vision Foundation #49 ( justindonnaruma ) Add MINEUM #48 ( antho281 ) Dash Forum migrated to new link #47 ( thelazier ) fix link name, hashtag #45 ( thelazier ) Fix some consensus descriptions #43 ( xhipster ) Add a Gitter chat badge to README.md #41 ( gitter-badger ) Update: Consensus data #40 ( xhipster ) Update: Consensus data for 6 systems #39 ( xhipster ) Update: Consensus data for 10 systems #38 ( xhipster ) Update: Consensus data for 10 systems #37 ( xhipster ) Update: All consensus data #36 ( xhipster ) Update Dash Whitepaper #34 ( thelazier ) Update Dash.toml #33 ( thelazier ) Update github link and remove redundancies #30 ( johansten ) Update NuBits.toml #19 ( CoinGame ) Update NuShares.toml #18 ( CoinGame ) Link updates #17 ( phideas ) aliases #1 ( ghost ) * This Change Log was automatically generated by github_changelog_generator","title":"0.1.0 (2019-01-28)"},{"location":"chaingear/Contributing/","text":"Contributing list \u00b6 @litvintech - contracts developer/maintainer @pechalka - web3 app developer/maintainer","title":"Contributing"},{"location":"chaingear/Contributing/#contributing-list","text":"@litvintech - contracts developer/maintainer @pechalka - web3 app developer/maintainer","title":"Contributing list"},{"location":"chaingear/Whitepaper/","text":"Chaingear \u00b6 The consensus computer driven database framework \u00b6 litvintech and xhipster, Developer's Board Members, cyber\u2022Congress \u00b6 Position \u00b6 With the rising of decentralized computing and web3 becoming, we need fundamental peace of web3 infrastructure as decentralized databases. But as web3 different to web2 there are new approaches and challenges for their development and operating. In this paper, we are describing principles of Chaingear and their Ethereum PoC - novel Ethereum's open-source framework for developing tokenized databases based on smart-contracts with custom data schema and CRUD+TF operations for interacting with. Principles of Chaingear \u00b6 Chaingear is a set of smart contracts which operating in consensus computer with following principles: Databases creates by user createDatabase call for Chaingear witch mints database-linked NFT token for user and deploys database with support of CRUD+TF operations. Token controls adminship of database. Admin initializes database with given table/tables data schema. Database admin may set user permissions for entry creation and fee for adding. Each entry in database linked to NFT token (primary key) which grants a set of rights for token-entry operation as UPDATE/DELETE and TRANSFER/FUND. Chaingear for given platform acts as Consensus Computer Driven Database as a Service Application specific business logic should be available to operate on top of database/databases. Chaingear on EVM, 0.1 Euler PoC \u00b6 Chaingear \u00b6 Chaingear is database of database which allow deploy new databases from there and creates an associated token for adminship. Chaingear allow deploys different types of databases with defined functionality with connects with databases builders. Database Builder is a fabric of databases of given type. Databases may have their unique code base as an extension to the basic database. Database-token may be transferred, sold/traded alongside with their right adminship. Chaingear have fees for database creation. Chaingear have benefitiaries which may claim collected fees proportional to their shares. Database \u00b6 A database is a smart contract which defines NFT tokens linked to entries. User creates database with given name and token symbol for entries. After deploy database admin initializes database with data schema table/tables and this allows them or/and other users to create a systematic collection of data, where rights to operations with entry defined by entry-token ownership. Entries data lives in Schema contract. Each entry may be publicly funded, an entry-token owner may claim collected funds. Database admin may set policy for entry creation: {OnlyAdmin, Whitelist, AllUsers} and fee for the entry-token creation and next claim fees. Also admin may set multiple database's beneficiaries which may claim collected fees proportional to their shares. Tokenization and CRUD+TF \u00b6 Operation CREATE initialize empty entry and mints token. READ are publicly available with token as primary key. Each entry-token grants token-based access to UPDATE / DELETE operations on entry. DELETE operation burns token and deletes entry. Each entry-token may be transferred with TRANSFER with rights to tokenized operations. Each entry-token may be FUND . CLAIM operation for allocated funds available for token owner. Persistent sources and deterministic regeneration \u00b6 For interaction with databases, we need ABI for contracts and source code for verification. ABIs and sources may be saved on some nodes and accessed with IPFS, but this access is not guaranteed. The Ethereum itself is persistent storage, and it's a point to save ABIs and source code which guarantees databases operation. Our solution is save in database contract schema's definition which allow deterministically regenerate ABI and source code of schema. Gas \u00b6 Operation Gas Cost ETH, 10 Gwei/gas createDatabase (chg) ~3.5M ~0.035 initializeDatabase (db) ~2-3M ~0.02-0.03 createEntry (db+st) ~250-400K ~ 0.0025-0.004 readEntry* (st) -/* -/* updateEntry (st) ~140-250K ~0.0014-0.0025 deleteEntry (db+st) ~180-250K ~ 0.0018-0.0025 transferFrom (db) ~100K ~0.001 Workflows \u00b6 Chaingear setup and Database creation/schema initialization pipeline \u00b6 Database CRUD/Entry-token pipeline \u00b6 Chaingear's Database-token pipeline \u00b6 Inheritance \u00b6 Chaingear inheritance \u00b6 Database inheritance \u00b6 web3 Application \u00b6 General \u00b6 Database \u00b6 Database Deploy and Schema designer \u00b6 Future work and releases \u00b6 Design and architecture, security Optimization of data writes and reads, column storage Advanced indexes. Release on new virtual machine Development \u00b6 Maintainers: @litvintech, @xhipster, @pechalka","title":"Chaingear"},{"location":"chaingear/Whitepaper/#chaingear","text":"","title":"Chaingear"},{"location":"chaingear/Whitepaper/#the-consensus-computer-driven-database-framework","text":"","title":"The consensus computer driven database framework"},{"location":"chaingear/Whitepaper/#litvintech-and-xhipster-developers-board-members-cybercongress","text":"","title":"litvintech and xhipster, Developer's Board Members, cyber\u2022Congress"},{"location":"chaingear/Whitepaper/#position","text":"With the rising of decentralized computing and web3 becoming, we need fundamental peace of web3 infrastructure as decentralized databases. But as web3 different to web2 there are new approaches and challenges for their development and operating. In this paper, we are describing principles of Chaingear and their Ethereum PoC - novel Ethereum's open-source framework for developing tokenized databases based on smart-contracts with custom data schema and CRUD+TF operations for interacting with.","title":"Position"},{"location":"chaingear/Whitepaper/#principles-of-chaingear","text":"Chaingear is a set of smart contracts which operating in consensus computer with following principles: Databases creates by user createDatabase call for Chaingear witch mints database-linked NFT token for user and deploys database with support of CRUD+TF operations. Token controls adminship of database. Admin initializes database with given table/tables data schema. Database admin may set user permissions for entry creation and fee for adding. Each entry in database linked to NFT token (primary key) which grants a set of rights for token-entry operation as UPDATE/DELETE and TRANSFER/FUND. Chaingear for given platform acts as Consensus Computer Driven Database as a Service Application specific business logic should be available to operate on top of database/databases.","title":"Principles of Chaingear"},{"location":"chaingear/Whitepaper/#chaingear-on-evm-01-euler-poc","text":"","title":"Chaingear on EVM, 0.1 Euler PoC"},{"location":"chaingear/Whitepaper/#chaingear_1","text":"Chaingear is database of database which allow deploy new databases from there and creates an associated token for adminship. Chaingear allow deploys different types of databases with defined functionality with connects with databases builders. Database Builder is a fabric of databases of given type. Databases may have their unique code base as an extension to the basic database. Database-token may be transferred, sold/traded alongside with their right adminship. Chaingear have fees for database creation. Chaingear have benefitiaries which may claim collected fees proportional to their shares.","title":"Chaingear"},{"location":"chaingear/Whitepaper/#database","text":"A database is a smart contract which defines NFT tokens linked to entries. User creates database with given name and token symbol for entries. After deploy database admin initializes database with data schema table/tables and this allows them or/and other users to create a systematic collection of data, where rights to operations with entry defined by entry-token ownership. Entries data lives in Schema contract. Each entry may be publicly funded, an entry-token owner may claim collected funds. Database admin may set policy for entry creation: {OnlyAdmin, Whitelist, AllUsers} and fee for the entry-token creation and next claim fees. Also admin may set multiple database's beneficiaries which may claim collected fees proportional to their shares.","title":"Database"},{"location":"chaingear/Whitepaper/#tokenization-and-crudtf","text":"Operation CREATE initialize empty entry and mints token. READ are publicly available with token as primary key. Each entry-token grants token-based access to UPDATE / DELETE operations on entry. DELETE operation burns token and deletes entry. Each entry-token may be transferred with TRANSFER with rights to tokenized operations. Each entry-token may be FUND . CLAIM operation for allocated funds available for token owner.","title":"Tokenization and CRUD+TF"},{"location":"chaingear/Whitepaper/#persistent-sources-and-deterministic-regeneration","text":"For interaction with databases, we need ABI for contracts and source code for verification. ABIs and sources may be saved on some nodes and accessed with IPFS, but this access is not guaranteed. The Ethereum itself is persistent storage, and it's a point to save ABIs and source code which guarantees databases operation. Our solution is save in database contract schema's definition which allow deterministically regenerate ABI and source code of schema.","title":"Persistent sources and deterministic regeneration"},{"location":"chaingear/Whitepaper/#gas","text":"Operation Gas Cost ETH, 10 Gwei/gas createDatabase (chg) ~3.5M ~0.035 initializeDatabase (db) ~2-3M ~0.02-0.03 createEntry (db+st) ~250-400K ~ 0.0025-0.004 readEntry* (st) -/* -/* updateEntry (st) ~140-250K ~0.0014-0.0025 deleteEntry (db+st) ~180-250K ~ 0.0018-0.0025 transferFrom (db) ~100K ~0.001","title":"Gas"},{"location":"chaingear/Whitepaper/#workflows","text":"","title":"Workflows"},{"location":"chaingear/Whitepaper/#chaingear-setup-and-database-creationschema-initialization-pipeline","text":"","title":"Chaingear setup and Database creation/schema initialization pipeline"},{"location":"chaingear/Whitepaper/#database-crudentry-token-pipeline","text":"","title":"Database CRUD/Entry-token pipeline"},{"location":"chaingear/Whitepaper/#chaingears-database-token-pipeline","text":"","title":"Chaingear's Database-token pipeline"},{"location":"chaingear/Whitepaper/#inheritance","text":"","title":"Inheritance"},{"location":"chaingear/Whitepaper/#chaingear-inheritance","text":"","title":"Chaingear inheritance"},{"location":"chaingear/Whitepaper/#database-inheritance","text":"","title":"Database inheritance"},{"location":"chaingear/Whitepaper/#web3-application","text":"","title":"web3 Application"},{"location":"chaingear/Whitepaper/#general","text":"","title":"General"},{"location":"chaingear/Whitepaper/#database_1","text":"","title":"Database"},{"location":"chaingear/Whitepaper/#database-deploy-and-schema-designer","text":"","title":"Database Deploy and Schema designer"},{"location":"chaingear/Whitepaper/#future-work-and-releases","text":"Design and architecture, security Optimization of data writes and reads, column storage Advanced indexes. Release on new virtual machine","title":"Future work and releases"},{"location":"chaingear/Whitepaper/#development","text":"Maintainers: @litvintech, @xhipster, @pechalka","title":"Development"},{"location":"chaingear/contracts/","text":"Contracts Overview \u00b6 Design rationale \u00b6 Main design principle goes from ERC721 NFT tokenization of Databases (in Chaingear/Database of databases) and Entries (in custom user's Database). In reason of Databases tokenization in Chaingear which allows token holder acts as administrator of their Databases, Chaingear acts to Database as owner, which sets token holder as administrator on creation phase, changes administrator when holder transfers token to another user, and transfers ownership when user unregister Database in Chaingear, giving them full control to contract. Database deep-linked to Chaingear database token. In other words, token ownership means control of Database. Also, Chaingear supports multiple Database Builders (fabrics of databases of given type), and allows Chaingear owners provide different kind and versioning of Databases. In reason of providing user functionality to describe their custom database data structures/schema and CRUD operations, the user creates their custom smart-contract, which implements the ISchema interface. This contract acts as inner storage, defines schema, and Database acts them on token operations (creating and deleting). A user may deploy erroneous or vulnerable Schema contract, but this should not crash Chaingear-Database NFT-token logic and Database inner entry NFT-logic too. Even if this happens Database crashing should not affect Chaingear/metadatabase contract. We proceed from the premise that the creator of the database (administrator) is positive and it does not make sense for them to break his database by initializing it with an incorrect contract. This brings us to tokenized ( C RU D ) operations (and inner in Schema) in Database and public ( C R UD ) plus tokenized ( CR U D ) Storage operation. Chaingear inheritance \u00b6 Database inheritance \u00b6 /chaingear \u00b6 Chaingear allows any user to create his own database. Building fee is collecting by new database creation. All builded databases are tokenized with ERC721 NFT token standard and saved in Chaingear metadatabase with db metainformation. Creator of database may transfer tokenized ownership of database and destroy database with token burning. Tokenized databases Entries may collect funds by users and Database's owner may claim them. Chaingear supports multiple benefitiaries witch have access to collected fees from databases creation. Also allows for owner add multiple database builders contracts based their on versioning or/and functionality. /builders \u00b6 DatabaseBuilder contains the code of specified version of Database. This code used by Chaingear for Database creation and deploy process. DatabaseBuilder should be added with specified version and description to Chaingear database's builders inner list. Chaingear contract should be added as allowed caller to DatabaseBuilder with reason to allow creation calls only by Chaingear contact. /common \u00b6 Safe allows creator contract transfer ETHs to them and claim from, accounting logic holded by owner contract. IChaingear IDatabase IDatabaseBuilder ISchema /databases \u00b6 Database contract witch tokenize entries as NFT tokens via ERC721 standard. Users can create tokenized empty entries according to entry access policy setted in Database. Database provides tokenized ( C RU D ) actions, after creation of token and empty database object, user should initialize them ( CR U D ) in Storage. Also users can fund entries with ETHs which send to DatabaseSafe with which owner of entry token can claim funds. DatabaseAccessControl holds logic of controlling database and accessing to entries creation. Policy options to entries creation are OnlyAdministrator, Whitelist, AllUsers. Chaingear acts as owner of Database and creator of database acts of administrator with separated policies to Database functions. /schemas \u00b6 Schema partially code-generated contract where database creator setup their custom entry structure and setters/getters. Schema then initializes in Database by their creator (as admin) and completes Database setup process. Provides public ( C RU D ) actions for users and inner ( C RU D ) tokenized actions for Database. Database goes as owner of contract (and acts as proxy) with entries creating, token-based transferring and deleting. EntryInterface interface (should be implemented in user EntryCore contract) \u00b6 interface ISchema { function createEntry () external ; function deleteEntry ( uint256 ) external ; } Example Schema \u00b6 pragma solidity 0.4.25 ; import \"../common/ISchema.sol\" ; import \"../common/IDatabase.sol\" ; import \"openzeppelin-solidity/contracts/ownership/Ownable.sol\" ; import \"openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\" ; contract Schema is ISchema , Ownable , SupportsInterfaceWithLookup { bytes4 constant internal INTERFACE_SCHEMA_ID = 0x153366ed ; struct Entry { string name ; string manifest ; string extension ; string content ; string logo ; } Entry [] public entries ; IDatabase internal database ; constructor () public { _registerInterface ( INTERFACE_SCHEMA_ID ); database = IDatabase ( owner ); } function () external {} function createEntry () external onlyOwner { Entry memory m = ( Entry ( { name : \"\" , manifest : \"\" , extension : \"\" , content : \"\" , logo : \"\" })); entries . push ( m ); } function readEntry ( uint256 _entryID ) external view returns ( string , string , string , string , string ) { uint256 entryIndex = database . getIndexByID ( _entryID ); return ( entries [ entryIndex ]. name , entries [ entryIndex ]. manifest , entries [ entryIndex ]. extension , entries [ entryIndex ]. content , entries [ entryIndex ]. logo ); } function updateEntry ( uint256 _entryID , string _name , string _manifest , string _extension , string _content , string _logo ) external { database . auth ( _entryID , msg . sender ); uint256 entryIndex = database . getIndexByID ( _entryID ); Entry memory m = ( Entry ( { name : _name , manifest : _manifest , extension : _extension , content : _content , logo : _logo })); entries [ entryIndex ] = m ; } function deleteEntry ( uint256 _entryIndex ) external onlyOwner { uint256 lastEntryIndex = entries . length - 1 ; Entry memory lastEntry = entries [ lastEntryIndex ]; entries [ _entryIndex ] = lastEntry ; delete entries [ lastEntryIndex ]; entries . length -- ; } }","title":"Contracts Overview"},{"location":"chaingear/contracts/#contracts-overview","text":"","title":"Contracts Overview"},{"location":"chaingear/contracts/#design-rationale","text":"Main design principle goes from ERC721 NFT tokenization of Databases (in Chaingear/Database of databases) and Entries (in custom user's Database). In reason of Databases tokenization in Chaingear which allows token holder acts as administrator of their Databases, Chaingear acts to Database as owner, which sets token holder as administrator on creation phase, changes administrator when holder transfers token to another user, and transfers ownership when user unregister Database in Chaingear, giving them full control to contract. Database deep-linked to Chaingear database token. In other words, token ownership means control of Database. Also, Chaingear supports multiple Database Builders (fabrics of databases of given type), and allows Chaingear owners provide different kind and versioning of Databases. In reason of providing user functionality to describe their custom database data structures/schema and CRUD operations, the user creates their custom smart-contract, which implements the ISchema interface. This contract acts as inner storage, defines schema, and Database acts them on token operations (creating and deleting). A user may deploy erroneous or vulnerable Schema contract, but this should not crash Chaingear-Database NFT-token logic and Database inner entry NFT-logic too. Even if this happens Database crashing should not affect Chaingear/metadatabase contract. We proceed from the premise that the creator of the database (administrator) is positive and it does not make sense for them to break his database by initializing it with an incorrect contract. This brings us to tokenized ( C RU D ) operations (and inner in Schema) in Database and public ( C R UD ) plus tokenized ( CR U D ) Storage operation.","title":"Design rationale"},{"location":"chaingear/contracts/#chaingear-inheritance","text":"","title":"Chaingear inheritance"},{"location":"chaingear/contracts/#database-inheritance","text":"","title":"Database inheritance"},{"location":"chaingear/contracts/#chaingear","text":"Chaingear allows any user to create his own database. Building fee is collecting by new database creation. All builded databases are tokenized with ERC721 NFT token standard and saved in Chaingear metadatabase with db metainformation. Creator of database may transfer tokenized ownership of database and destroy database with token burning. Tokenized databases Entries may collect funds by users and Database's owner may claim them. Chaingear supports multiple benefitiaries witch have access to collected fees from databases creation. Also allows for owner add multiple database builders contracts based their on versioning or/and functionality.","title":"/chaingear"},{"location":"chaingear/contracts/#builders","text":"DatabaseBuilder contains the code of specified version of Database. This code used by Chaingear for Database creation and deploy process. DatabaseBuilder should be added with specified version and description to Chaingear database's builders inner list. Chaingear contract should be added as allowed caller to DatabaseBuilder with reason to allow creation calls only by Chaingear contact.","title":"/builders"},{"location":"chaingear/contracts/#common","text":"Safe allows creator contract transfer ETHs to them and claim from, accounting logic holded by owner contract. IChaingear IDatabase IDatabaseBuilder ISchema","title":"/common"},{"location":"chaingear/contracts/#databases","text":"Database contract witch tokenize entries as NFT tokens via ERC721 standard. Users can create tokenized empty entries according to entry access policy setted in Database. Database provides tokenized ( C RU D ) actions, after creation of token and empty database object, user should initialize them ( CR U D ) in Storage. Also users can fund entries with ETHs which send to DatabaseSafe with which owner of entry token can claim funds. DatabaseAccessControl holds logic of controlling database and accessing to entries creation. Policy options to entries creation are OnlyAdministrator, Whitelist, AllUsers. Chaingear acts as owner of Database and creator of database acts of administrator with separated policies to Database functions.","title":"/databases"},{"location":"chaingear/contracts/#schemas","text":"Schema partially code-generated contract where database creator setup their custom entry structure and setters/getters. Schema then initializes in Database by their creator (as admin) and completes Database setup process. Provides public ( C RU D ) actions for users and inner ( C RU D ) tokenized actions for Database. Database goes as owner of contract (and acts as proxy) with entries creating, token-based transferring and deleting.","title":"/schemas"},{"location":"chaingear/contracts/#entryinterface-interface-should-be-implemented-in-user-entrycore-contract","text":"interface ISchema { function createEntry () external ; function deleteEntry ( uint256 ) external ; }","title":"EntryInterface interface (should be implemented in user EntryCore contract)"},{"location":"chaingear/contracts/#example-schema","text":"pragma solidity 0.4.25 ; import \"../common/ISchema.sol\" ; import \"../common/IDatabase.sol\" ; import \"openzeppelin-solidity/contracts/ownership/Ownable.sol\" ; import \"openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\" ; contract Schema is ISchema , Ownable , SupportsInterfaceWithLookup { bytes4 constant internal INTERFACE_SCHEMA_ID = 0x153366ed ; struct Entry { string name ; string manifest ; string extension ; string content ; string logo ; } Entry [] public entries ; IDatabase internal database ; constructor () public { _registerInterface ( INTERFACE_SCHEMA_ID ); database = IDatabase ( owner ); } function () external {} function createEntry () external onlyOwner { Entry memory m = ( Entry ( { name : \"\" , manifest : \"\" , extension : \"\" , content : \"\" , logo : \"\" })); entries . push ( m ); } function readEntry ( uint256 _entryID ) external view returns ( string , string , string , string , string ) { uint256 entryIndex = database . getIndexByID ( _entryID ); return ( entries [ entryIndex ]. name , entries [ entryIndex ]. manifest , entries [ entryIndex ]. extension , entries [ entryIndex ]. content , entries [ entryIndex ]. logo ); } function updateEntry ( uint256 _entryID , string _name , string _manifest , string _extension , string _content , string _logo ) external { database . auth ( _entryID , msg . sender ); uint256 entryIndex = database . getIndexByID ( _entryID ); Entry memory m = ( Entry ( { name : _name , manifest : _manifest , extension : _extension , content : _content , logo : _logo })); entries [ entryIndex ] = m ; } function deleteEntry ( uint256 _entryIndex ) external onlyOwner { uint256 lastEntryIndex = entries . length - 1 ; Entry memory lastEntry = entries [ lastEntryIndex ]; entries [ _entryIndex ] = lastEntry ; delete entries [ lastEntryIndex ]; entries . length -- ; } }","title":"Example Schema"},{"location":"chaingear/overview/","text":"Overview \u00b6 This project allows you to create your own Database of general purpose entries on Ethereum blockchain. Entry type is defined during creation, so you can put into entry any custom logic you want (validation, entry-level permission control). Entries are tokenized as NFT. Your creating your database in Chaingear - metadatabase, which are one point of access to all databases. Databases on chaingear level are tokenized as NFT. Chaingear is most expensive database, so you should pay for your database and entry creation. Features \u00b6 Chaingear \u00b6 Metadatabase with Databases entries, where each entry are ERC721 token Fee-based Database creation Creating Databases with different functionality Token-based ownership/administration for Database Funding in ETH for Database Custom database \u00b6 Custom data structure for Database (Schema) Each Entry is ERC721 token Fee-based Entry creation Token-based ownership Entry management Entry creation policies (Administrator, Whitelist, AllUsers) Chaingear UI (browser/stand-alone web3 DApp) \u00b6 Web3/Metamask/Truffle/IPFS based Full Chaingear control interface Full custom Database control interface Schema smart-contract code generation and deploying on client Databases ABI and metainformation savings in IPFS","title":"Overview"},{"location":"chaingear/overview/#overview","text":"This project allows you to create your own Database of general purpose entries on Ethereum blockchain. Entry type is defined during creation, so you can put into entry any custom logic you want (validation, entry-level permission control). Entries are tokenized as NFT. Your creating your database in Chaingear - metadatabase, which are one point of access to all databases. Databases on chaingear level are tokenized as NFT. Chaingear is most expensive database, so you should pay for your database and entry creation.","title":"Overview"},{"location":"chaingear/overview/#features","text":"","title":"Features"},{"location":"chaingear/overview/#chaingear","text":"Metadatabase with Databases entries, where each entry are ERC721 token Fee-based Database creation Creating Databases with different functionality Token-based ownership/administration for Database Funding in ETH for Database","title":"Chaingear"},{"location":"chaingear/overview/#custom-database","text":"Custom data structure for Database (Schema) Each Entry is ERC721 token Fee-based Entry creation Token-based ownership Entry management Entry creation policies (Administrator, Whitelist, AllUsers)","title":"Custom database"},{"location":"chaingear/overview/#chaingear-ui-browserstand-alone-web3-dapp","text":"Web3/Metamask/Truffle/IPFS based Full Chaingear control interface Full custom Database control interface Schema smart-contract code generation and deploying on client Databases ABI and metainformation savings in IPFS","title":"Chaingear UI (browser/stand-alone web3 DApp)"},{"location":"chaingear/pipelines/","text":"General Chaingear/Database pipeline \u00b6 Database CRUD/tokenized Entry/Funds pipeline \u00b6 Chaingear tokenized Database pipeline \u00b6","title":"Pipelines"},{"location":"chaingear/pipelines/#general-chaingeardatabase-pipeline","text":"","title":"General Chaingear/Database pipeline"},{"location":"chaingear/pipelines/#database-crudtokenized-entryfunds-pipeline","text":"","title":"Database CRUD/tokenized Entry/Funds pipeline"},{"location":"chaingear/pipelines/#chaingear-tokenized-database-pipeline","text":"","title":"Chaingear tokenized Database pipeline"},{"location":"chaingear/help/development/","text":"Configuring, development and deploying \u00b6 Install \u00b6 npm i Linting: \u00b6 solium -d contracts Testing: \u00b6 ganache-cli -p 8545 truffle test Deploying (for example kovan): \u00b6 truffle migrate --network =","title":"Configuring, development and deploying"},{"location":"chaingear/help/development/#configuring-development-and-deploying","text":"","title":"Configuring, development and deploying"},{"location":"chaingear/help/development/#install","text":"npm i","title":"Install"},{"location":"chaingear/help/development/#linting","text":"solium -d contracts","title":"Linting:"},{"location":"chaingear/help/development/#testing","text":"ganache-cli -p 8545 truffle test","title":"Testing:"},{"location":"chaingear/help/development/#deploying-for-example-kovan","text":"truffle migrate --network =","title":"Deploying (for example kovan):"},{"location":"cyb/app-guidelines/","text":"DApp guidelines \u00b6 @asadovka What is App? \u00b6 App in Cyb is a one or multi page application. It can be a simple html file as a frontend and may include smart contract logic as a backend. Apps should be available through IPFS hash. App structure \u00b6 Cyb CLI can automatically generate structure for your App. All you need to do is just type some commands, come up with a name and develop! App requirements \u00b6 We set limitations of computation resources usage for each app. less then 5% of CPU usage less then 10% of RAM usage App development \u00b6 Here we describe how to generate initial app structure. Install the latest version of CYB package npm install -g cyb Select the path where you want to store your app. For example /Desktop/My_apps cd username/Desktop/My_apps Enter the name and generate the structure of the app. A folder with all necessary components will be created cyb init appname Go to the app folder and link your app with your Cyb cyb link Open the Appstore in CYB. You will see your app on \u00abYour app\u00bb page You can also use our Help App (cyb://.help/create) for more info. App deployment \u00b6 When you are ready with development of your app you can easely publish it to the DApp Store so every user of Cyb will see it. Open your app, click on \"deploy\" button and enter IPFS hash of your app. Sign the transaction - your app will be registred in Chaingear. And that is it! App design \u00b6 App design process follows Web3 design principles. State rules \u00b6 We use simple colored states for states of transactions or operations: mempool/failed - red confirmed/reverted - yellow finalized/succesful - green Data visualization \u00b6 Data should be visualised in a simple and attractive way. No overloaded plots an diagrams, we use animation instead. Blockchain objects presenting \u00b6 Blockchain data is too complicated and sometimes not obvious for people. Thus we use adaptive tricks to make work process more convenient: Logical grouping for objects. Every app page has common groups of data (general, blockchain specific) for inheritance of views and better navigation or data observing. Classical accounting terms used for balance and cashflow operations. Blockahains use econimic principles for interaction between subjects thus we can describe such processes in established terms. Robohash logo for contracts entities. Contracts can act by themself, have and algorithms, so it's more natural to perceive them like robots instead of pieces of code.","title":"App guidelines"},{"location":"cyb/app-guidelines/#dapp-guidelines","text":"@asadovka","title":"DApp guidelines"},{"location":"cyb/app-guidelines/#what-is-app","text":"App in Cyb is a one or multi page application. It can be a simple html file as a frontend and may include smart contract logic as a backend. Apps should be available through IPFS hash.","title":"What is App?"},{"location":"cyb/app-guidelines/#app-structure","text":"Cyb CLI can automatically generate structure for your App. All you need to do is just type some commands, come up with a name and develop!","title":"App structure"},{"location":"cyb/app-guidelines/#app-requirements","text":"We set limitations of computation resources usage for each app. less then 5% of CPU usage less then 10% of RAM usage","title":"App requirements"},{"location":"cyb/app-guidelines/#app-development","text":"Here we describe how to generate initial app structure. Install the latest version of CYB package npm install -g cyb Select the path where you want to store your app. For example /Desktop/My_apps cd username/Desktop/My_apps Enter the name and generate the structure of the app. A folder with all necessary components will be created cyb init appname Go to the app folder and link your app with your Cyb cyb link Open the Appstore in CYB. You will see your app on \u00abYour app\u00bb page You can also use our Help App (cyb://.help/create) for more info.","title":"App development"},{"location":"cyb/app-guidelines/#app-deployment","text":"When you are ready with development of your app you can easely publish it to the DApp Store so every user of Cyb will see it. Open your app, click on \"deploy\" button and enter IPFS hash of your app. Sign the transaction - your app will be registred in Chaingear. And that is it!","title":"App deployment"},{"location":"cyb/app-guidelines/#app-design","text":"App design process follows Web3 design principles.","title":"App design"},{"location":"cyb/app-guidelines/#state-rules","text":"We use simple colored states for states of transactions or operations: mempool/failed - red confirmed/reverted - yellow finalized/succesful - green","title":"State rules"},{"location":"cyb/app-guidelines/#data-visualization","text":"Data should be visualised in a simple and attractive way. No overloaded plots an diagrams, we use animation instead.","title":"Data visualization"},{"location":"cyb/app-guidelines/#blockchain-objects-presenting","text":"Blockchain data is too complicated and sometimes not obvious for people. Thus we use adaptive tricks to make work process more convenient: Logical grouping for objects. Every app page has common groups of data (general, blockchain specific) for inheritance of views and better navigation or data observing. Classical accounting terms used for balance and cashflow operations. Blockahains use econimic principles for interaction between subjects thus we can describe such processes in established terms. Robohash logo for contracts entities. Contracts can act by themself, have and algorithms, so it's more natural to perceive them like robots instead of pieces of code.","title":"Blockchain objects presenting"},{"location":"cyb/cyb/","text":"Cyb: web3 browser \u00b6 @xhipster @asadovka Concept. Definitions are work in progress. Current implementation is not in comply with spec yet Abstract \u00b6 Cyb is a friendly software robot who helps you explore the universes. Put it simply it just a web3 browser. At the very beginning Cyb is focusing on developers and advanced blockchain users who are able to work with private keys and transactions. But we see how Cyb becomes friendly for everyone who wants to interact with consensus computers in a web of the third generation. This new web is designed to free developers from outdated things such as html and v8. So developers can use any markup, execution and rendering engine they wish. That is why we don't focus on implementation of mentioned things. Instead this paper shows implementation agnostic concepts of browser that are simple enough to be adopted by web3 developers. Initially we design Cyb for conventional desktop browsing. But suggested concepts can be easily used for mobile, voice, VR and robotics implementations. Introduction \u00b6 Current state of web3 experience is non satisfactory. We still didn't meet any piece of software that is able to deliver deep and emotional web3 experience. So we decide to bring to the table one contender that strictly follows web3 principles defined by ourselves ;-) In a rush for this passion we define the following web3 apps which we believe together implement the full web3 vision in the context of a browsing for web3 agents and app developers: CLI \u00b6 Shell \u00b6 Here are the default UX elements, that Cyb uses to provide basic web3 UX: Navigation bar - search field, back & forward buttons App Bar - list of pinned favourites apps ID Bar - main identity data State Bar - node connection statuses .cyb \u00b6 Cyb has a lot of user and technical settings. They are implemented in the core browser app - .cyb: main.cyb : main page for every joe path.cyb : user's navigation history txq.cyb : user's transaction activity pins.cyb : pinned user's favourite apps and pages connect.cyb : connection manager root.cyb : cyb root registry help.cyb : cyb educational library and feedback mechanism dev.cyb : web3 development tool with support of contracts keys.cyb : keystore interface sign.cyb : phishing resistant signer for messages and transactions with scheduler wallet.cyb : universal wallet feed.cyb : notification & feed app access.cyb : permission manager that respects agents' resources Apps \u00b6 Main apps for initial web3 experience .cyber : cyberd node manager and app for link chains + - apps.cyber : search appstore - .ipfs : ipfs node manager and agent experience .eth : ethereum node manager + ens resolver .chaingear : all the things chaingearable .wiki : wiki indexator All this apps are considered as core apps and are included in every Cyb distribution. Let us describe in details every app as a pure concept. .main \u00b6 Purpose of the main app is to make agent happier in a moment it returns for surfing and between experiences. Main page of the browser consists of three main elements: search bar: provides all search functions relevance bar: the most relevant cyberlinks for a particular agent footer: cyberlinks to ecosystem resources which are important for education and contribution .path \u00b6 Navigation bar in Cyb is based on the following elements: back button - returns user to the previous state of web3 agent search bar - provides direct access to certain state star button - allow users to pin cyberlinks forward button - brings user to the future state based on Cyb prediction Search bar is used to browse web3. With the help of DURA with knowledge of application involved ( . ) it can get content across different content addressing protocols such as IPFS, DAT, SWARM, and inside blockchains, tangles and DAGs thus forming heterogeneous environment of web3. In web3 vision doc we describe in details a concept of web3 browsing based on DURA specs. That is, in web3 appending \"dot\" works very different in comparison with web2. Dot is literally a search query to a particular app that also has a content address in heterogeneous network. All symbols after \"dot\" make a map with content address of an app in root registry, and all data before \"dot\" is a query parameter to an app. <illustration> For example: .help query will open Cyb help app. chaingear.help will open chaingear info page in the help app. Query without \"dot\" will be automatically redirected to search in cyberd (Note: queries without dot is synonym to <your-query>.cyber ). Empty query always leads to the main page. . query returns a root registry that is being used by default in Cyb. <api-definition> All cyberlinks that was requested by agent can be accessed using path app that is integral part of Cyb experience. .connect \u00b6 In web3 all data has the state, so it become easier to navigate through it and make agent experience better. To be sure that you are working with actual state Cyb needs to manage connection to web3 providers. Our purpose is to build web3 browser that is agnostic from addressing, identity and consensus protocols. But currently we use ipfs, parity-light and cyberd nodes to show off possible experience at early stage of web3 development without necessity to connect to web3 provider at all (be your own web3 provider) for basic needs such as popular static content surfing and simple transfers of tokens. <illustration> Cyb is hiding all complexities of web3 connections under one colorful indicator that range from green to red. Ideally it works like indicator of internet connection we all used to see in smartphones. Connection indicator cyberlinked to a connect app that is integral part of id bar. It gives an ability for an agent to understand status of connections and chose web3 providers. <api-definition> Ultimate purpose of connect is to remove necessity of agents to manually switch between networks. Agent do not need to think about switching across networks. It is a goal of app developers and browser vendors to define an approach that allow seamless interaction during web3 experience with all network magic happens underneath. Cyb is developing in a way that allow async interactions with several peer-to-peer networks in an app context. .keys \u00b6 Purpose of id bar is to enable the concept of identity. Using identity an agent is able to authenticate messages and sign transactions in web3. Cyb assumes that an agent interacting with web3 is using active identity, but offers ability to change id of a signed transaction during signing. Agent understand which id is active using identicon. Cyb computes unique and deterministic identicons for every id, but offer agent to set any identicon for local pleasure. Clicking on id bar allow agent to choose active identity from a keys app. <illustration> Keys app is inherent component of id bar and embedded in Cyb. This app allows to store cryptographic secrets. Think of it as lastpass you don't need to trust that is able to compute different addresses, one time passwords and signatures in the context of an app. The following convention is used for keys : id: String, chainId: Number keystore: Promise <String> mnemonic: String derivationPath?: Promise <String> otherAddresses: Array <String> privateKey: String publicKey: Promise <String> type: String subtype: String The following API is being used to programmatically interact with id bar: setDefaultId(addressIndex: Number): Promise <Boolean> sign(transactionObject: Object): Promise <String> signMessage(messageObject: Object): Promise <String> verifyMessage(verificationObject: Object): Promise <Boolean> .cyber \u00b6 It happens then agent knows some content address but have no idea in which network it can be retrieved as well as what app can deal with it. That is why Cyb has default integration with cyber [CYBER] protocol. Cyb append .cyber app for all request without a dot. .cyber is an app that has simple interface to cyberd, which returns prediction of related cyberlinks thus agent can get required resource directly through peer-to-peer network. Cyb has a setting of default search engine, thus an agent can plug a search she wants. <api-definition> .pins \u00b6 App bar is a place where user can quickly get access to most used web3 objects. User can pin such objects by clicking on button \"favourite\" on navigation bar and then it will appear in app bar. Cyberlink manager is an attached app that allow agents to group and tag pins. .sign \u00b6 .sign allows users to sign messages and transactions in a way that brings web3 experience to the whole new level. Browser use embedded app for signing transactions so user can be always sure that transaction details are valid. In a web2 there is no inherent mechanism to be sure that overlay of an app is produced by a browser and not an app itself. Cyb solves this problem deterministically generating background and sound of overlay window in a way that an underlying app cannot know the seed for generating desired sound and visual pattern. The user need to remember its unique pattern once to safely interacting with different apps including not so trusted. Another problem we are approach to solve with .sign is deferred transactions. Cyb has its own address for which an agent can delegate some rights. Using this API app developer can create a logic that allow create and execute complex sequences of transactions client side. Since inception of Ethereum we sign thousands of transactions and miss even more. That is why we believe this feature is critical for awesome web3 experience. .crr \u00b6 According to 3 rules of root registry every developer can deliver best possible experience for their agents. That is why we want to mix the best from every word in our worlds in our implementation of root registry. To bring better user experience about 3k of records will be cybersquatted to align interests of existing app developers and agents who look for a beautiful, simple and trustful experience. .crr is a potpourri of the most well known concepts consolidated under one namespace! Let me introduce what is included in the shake: programming languages : up to 200 names common programs : up to 100 names tokens : Up to 1k names top-level domains : up to 300 names top english words : up to 1k names utf symbols : up to 300 names Initially cyber\u2022Congress will own all this cybersquatted records. In order to improve probability of adoption of .crr cyber\u2022Congres will distribute this names to original app developers based on proof of dns mechanism. That is, names for programming languages, common programs, tokens and top-level domains will be distributed based on a proof of dns according to verified registry produced by cyber\u2022Congress. Top english words and utf symbols will be distributed using competitions, grants and awards produced by cyber\u2022Congress. Initially unregistered names in .crr will be distributed under flat fee for cyb root registry owner in Chaingear. We are going to start from 1 ETH for every name and will see will it be enough to protect from abusive squatting or not. It is possible that we will switch to auction form of distribution in a future. .cyb \u00b6 Extension over .crr . Added fields: logo, tagline, manifest, meta, code, crr. As result it become suitable to be an app store for browser. Appstore treats pinned apps as installed if at leas one permission is granted. .access \u00b6 Permission management is of paramount importance in the process of safe application distribution. We want to improve upon 3 critical aspects of permission management in web: app authentication resource management dynamic permissions App authentication is hard in web2. You need somehow know the origin and this is practically hard in a face of government level adversaries, than you must compute hash of received file and compare it with a file hash received from origin. Due to practical complexity nobody do that. In web3 if you know that address is correct authentication is done automagically. That is why browser can easily verify that permission is granted for expected app and not malicious. Resource management was not in place. In web2 all permission systems was primarily build around a concept of granting access to a particular data which browser has access to. While this approach find itself useful it just not enough to run any application from untrusted developers. Computing resources has fundamental value now, thus must be carefully managed and metered. In web3 its weird that any untrusted app can eat all resources of a machine in no time. Moreover, if an application is executed in a sandbox all we need to feel ourselves safe (in addition to authenticated permissions) is ensure that app do not eat more resources than expected. Libraries that help app developers to mine some proof-of-work algorithms using visitor machine become ubiquitous. Practically that means that in addition to shity ads web2 users will experience even more worse web experience: greedy, slow and battery consuming apps are coming. The answer to this upcoming problem in a browser permission system which is able to produce bounds on apps consumption of fundamental resources such as cpu, gpu, ram, storage and broadband. We believe that resource management must be in the core of web3 application engine. We are currently doing research on how that can be implemented: containerisation seems to be low hanging fruit that can be embedded right into web experience. Permission affordances . Current permission systems are static in a sense that browser provide limited set of predefined apis. Cookies, location, camera, microphone, sound and notifications: that is very limited set of things browsers can afford. Permissions of a third party developers are not native for a browsers either. Browser just don't care about what data with which apps agent want to share. We ask ourselves what if a browser can ask apps what kind of permissions they can provide thus exposing this permission system to any other apps? We believe this approach will allow web3 developers provide experience inaccessible for previous architectures. .feed \u00b6 Notification panel displaying all pending transactions and web3 events corresponding to certain account. Settings button leads to settings page where user can manage connection to IPFS, Ethereum and Cyber nodes (local or remote ways). .ipfs \u00b6 This app is a third party app developed by IPFS Shipyard. This is very basic app for interacting with ipfs. .eth \u00b6 Simple app which ger DURI requests and route requests to ethereum node (contracts, transactions and blocks). Else resolve ENS. .wallet \u00b6 We believe that transfer of tokens is very basic experience in a web3 thus want to provide embedded in browser wallet app as soon as possible. Thus we consider either to develop our own bicycle or partner with some 3d party wallet developer. .dev \u00b6 Developers experience is critical for the whole web3 adoption. This app helps to develop and publish web3 apps. .cg \u00b6 Chaingear is an app that help developers create ethereum based CRUD databases. We believe it will help developers to adopt web3 easier the same they MySQL helped to site developers in the very beginning of web. .help \u00b6 Help is a two way help application. Using this app cyb helps agents to use itself. Using .help agents help Cyb evolve. As an open source project we are welcome for contributions. Gitcoin is an excellent instrument that we use for delegating tasks for community a processing payments for completed ones. We have our vision of how to develop browser and what kind of features develop first. But we give an opportunity for community to decide and vote with tokens what kind of browser we need to see in near future. Our product Chaingear is also made for this. We use user's feedback to make products better. So we provide options for bug reporting and feedback leaving on every page. .settings \u00b6 Cyb settings Saga on privacy and anonymity \u00b6 ... On censorship resistance \u00b6 ...","title":"Whitepaper"},{"location":"cyb/cyb/#cyb-web3-browser","text":"@xhipster @asadovka Concept. Definitions are work in progress. Current implementation is not in comply with spec yet","title":"Cyb: web3 browser"},{"location":"cyb/cyb/#abstract","text":"Cyb is a friendly software robot who helps you explore the universes. Put it simply it just a web3 browser. At the very beginning Cyb is focusing on developers and advanced blockchain users who are able to work with private keys and transactions. But we see how Cyb becomes friendly for everyone who wants to interact with consensus computers in a web of the third generation. This new web is designed to free developers from outdated things such as html and v8. So developers can use any markup, execution and rendering engine they wish. That is why we don't focus on implementation of mentioned things. Instead this paper shows implementation agnostic concepts of browser that are simple enough to be adopted by web3 developers. Initially we design Cyb for conventional desktop browsing. But suggested concepts can be easily used for mobile, voice, VR and robotics implementations.","title":"Abstract"},{"location":"cyb/cyb/#introduction","text":"Current state of web3 experience is non satisfactory. We still didn't meet any piece of software that is able to deliver deep and emotional web3 experience. So we decide to bring to the table one contender that strictly follows web3 principles defined by ourselves ;-) In a rush for this passion we define the following web3 apps which we believe together implement the full web3 vision in the context of a browsing for web3 agents and app developers:","title":"Introduction"},{"location":"cyb/cyb/#cli","text":"","title":"CLI"},{"location":"cyb/cyb/#shell","text":"Here are the default UX elements, that Cyb uses to provide basic web3 UX: Navigation bar - search field, back & forward buttons App Bar - list of pinned favourites apps ID Bar - main identity data State Bar - node connection statuses","title":"Shell"},{"location":"cyb/cyb/#cyb","text":"Cyb has a lot of user and technical settings. They are implemented in the core browser app - .cyb: main.cyb : main page for every joe path.cyb : user's navigation history txq.cyb : user's transaction activity pins.cyb : pinned user's favourite apps and pages connect.cyb : connection manager root.cyb : cyb root registry help.cyb : cyb educational library and feedback mechanism dev.cyb : web3 development tool with support of contracts keys.cyb : keystore interface sign.cyb : phishing resistant signer for messages and transactions with scheduler wallet.cyb : universal wallet feed.cyb : notification & feed app access.cyb : permission manager that respects agents' resources","title":".cyb"},{"location":"cyb/cyb/#apps","text":"Main apps for initial web3 experience .cyber : cyberd node manager and app for link chains + - apps.cyber : search appstore - .ipfs : ipfs node manager and agent experience .eth : ethereum node manager + ens resolver .chaingear : all the things chaingearable .wiki : wiki indexator All this apps are considered as core apps and are included in every Cyb distribution. Let us describe in details every app as a pure concept.","title":"Apps"},{"location":"cyb/cyb/#main","text":"Purpose of the main app is to make agent happier in a moment it returns for surfing and between experiences. Main page of the browser consists of three main elements: search bar: provides all search functions relevance bar: the most relevant cyberlinks for a particular agent footer: cyberlinks to ecosystem resources which are important for education and contribution","title":".main"},{"location":"cyb/cyb/#path","text":"Navigation bar in Cyb is based on the following elements: back button - returns user to the previous state of web3 agent search bar - provides direct access to certain state star button - allow users to pin cyberlinks forward button - brings user to the future state based on Cyb prediction Search bar is used to browse web3. With the help of DURA with knowledge of application involved ( . ) it can get content across different content addressing protocols such as IPFS, DAT, SWARM, and inside blockchains, tangles and DAGs thus forming heterogeneous environment of web3. In web3 vision doc we describe in details a concept of web3 browsing based on DURA specs. That is, in web3 appending \"dot\" works very different in comparison with web2. Dot is literally a search query to a particular app that also has a content address in heterogeneous network. All symbols after \"dot\" make a map with content address of an app in root registry, and all data before \"dot\" is a query parameter to an app. <illustration> For example: .help query will open Cyb help app. chaingear.help will open chaingear info page in the help app. Query without \"dot\" will be automatically redirected to search in cyberd (Note: queries without dot is synonym to <your-query>.cyber ). Empty query always leads to the main page. . query returns a root registry that is being used by default in Cyb. <api-definition> All cyberlinks that was requested by agent can be accessed using path app that is integral part of Cyb experience.","title":".path"},{"location":"cyb/cyb/#connect","text":"In web3 all data has the state, so it become easier to navigate through it and make agent experience better. To be sure that you are working with actual state Cyb needs to manage connection to web3 providers. Our purpose is to build web3 browser that is agnostic from addressing, identity and consensus protocols. But currently we use ipfs, parity-light and cyberd nodes to show off possible experience at early stage of web3 development without necessity to connect to web3 provider at all (be your own web3 provider) for basic needs such as popular static content surfing and simple transfers of tokens. <illustration> Cyb is hiding all complexities of web3 connections under one colorful indicator that range from green to red. Ideally it works like indicator of internet connection we all used to see in smartphones. Connection indicator cyberlinked to a connect app that is integral part of id bar. It gives an ability for an agent to understand status of connections and chose web3 providers. <api-definition> Ultimate purpose of connect is to remove necessity of agents to manually switch between networks. Agent do not need to think about switching across networks. It is a goal of app developers and browser vendors to define an approach that allow seamless interaction during web3 experience with all network magic happens underneath. Cyb is developing in a way that allow async interactions with several peer-to-peer networks in an app context.","title":".connect"},{"location":"cyb/cyb/#keys","text":"Purpose of id bar is to enable the concept of identity. Using identity an agent is able to authenticate messages and sign transactions in web3. Cyb assumes that an agent interacting with web3 is using active identity, but offers ability to change id of a signed transaction during signing. Agent understand which id is active using identicon. Cyb computes unique and deterministic identicons for every id, but offer agent to set any identicon for local pleasure. Clicking on id bar allow agent to choose active identity from a keys app. <illustration> Keys app is inherent component of id bar and embedded in Cyb. This app allows to store cryptographic secrets. Think of it as lastpass you don't need to trust that is able to compute different addresses, one time passwords and signatures in the context of an app. The following convention is used for keys : id: String, chainId: Number keystore: Promise <String> mnemonic: String derivationPath?: Promise <String> otherAddresses: Array <String> privateKey: String publicKey: Promise <String> type: String subtype: String The following API is being used to programmatically interact with id bar: setDefaultId(addressIndex: Number): Promise <Boolean> sign(transactionObject: Object): Promise <String> signMessage(messageObject: Object): Promise <String> verifyMessage(verificationObject: Object): Promise <Boolean>","title":".keys"},{"location":"cyb/cyb/#cyber","text":"It happens then agent knows some content address but have no idea in which network it can be retrieved as well as what app can deal with it. That is why Cyb has default integration with cyber [CYBER] protocol. Cyb append .cyber app for all request without a dot. .cyber is an app that has simple interface to cyberd, which returns prediction of related cyberlinks thus agent can get required resource directly through peer-to-peer network. Cyb has a setting of default search engine, thus an agent can plug a search she wants. <api-definition>","title":".cyber"},{"location":"cyb/cyb/#pins","text":"App bar is a place where user can quickly get access to most used web3 objects. User can pin such objects by clicking on button \"favourite\" on navigation bar and then it will appear in app bar. Cyberlink manager is an attached app that allow agents to group and tag pins.","title":".pins"},{"location":"cyb/cyb/#sign","text":".sign allows users to sign messages and transactions in a way that brings web3 experience to the whole new level. Browser use embedded app for signing transactions so user can be always sure that transaction details are valid. In a web2 there is no inherent mechanism to be sure that overlay of an app is produced by a browser and not an app itself. Cyb solves this problem deterministically generating background and sound of overlay window in a way that an underlying app cannot know the seed for generating desired sound and visual pattern. The user need to remember its unique pattern once to safely interacting with different apps including not so trusted. Another problem we are approach to solve with .sign is deferred transactions. Cyb has its own address for which an agent can delegate some rights. Using this API app developer can create a logic that allow create and execute complex sequences of transactions client side. Since inception of Ethereum we sign thousands of transactions and miss even more. That is why we believe this feature is critical for awesome web3 experience.","title":".sign"},{"location":"cyb/cyb/#crr","text":"According to 3 rules of root registry every developer can deliver best possible experience for their agents. That is why we want to mix the best from every word in our worlds in our implementation of root registry. To bring better user experience about 3k of records will be cybersquatted to align interests of existing app developers and agents who look for a beautiful, simple and trustful experience. .crr is a potpourri of the most well known concepts consolidated under one namespace! Let me introduce what is included in the shake: programming languages : up to 200 names common programs : up to 100 names tokens : Up to 1k names top-level domains : up to 300 names top english words : up to 1k names utf symbols : up to 300 names Initially cyber\u2022Congress will own all this cybersquatted records. In order to improve probability of adoption of .crr cyber\u2022Congres will distribute this names to original app developers based on proof of dns mechanism. That is, names for programming languages, common programs, tokens and top-level domains will be distributed based on a proof of dns according to verified registry produced by cyber\u2022Congress. Top english words and utf symbols will be distributed using competitions, grants and awards produced by cyber\u2022Congress. Initially unregistered names in .crr will be distributed under flat fee for cyb root registry owner in Chaingear. We are going to start from 1 ETH for every name and will see will it be enough to protect from abusive squatting or not. It is possible that we will switch to auction form of distribution in a future.","title":".crr"},{"location":"cyb/cyb/#cyb_1","text":"Extension over .crr . Added fields: logo, tagline, manifest, meta, code, crr. As result it become suitable to be an app store for browser. Appstore treats pinned apps as installed if at leas one permission is granted.","title":".cyb"},{"location":"cyb/cyb/#access","text":"Permission management is of paramount importance in the process of safe application distribution. We want to improve upon 3 critical aspects of permission management in web: app authentication resource management dynamic permissions App authentication is hard in web2. You need somehow know the origin and this is practically hard in a face of government level adversaries, than you must compute hash of received file and compare it with a file hash received from origin. Due to practical complexity nobody do that. In web3 if you know that address is correct authentication is done automagically. That is why browser can easily verify that permission is granted for expected app and not malicious. Resource management was not in place. In web2 all permission systems was primarily build around a concept of granting access to a particular data which browser has access to. While this approach find itself useful it just not enough to run any application from untrusted developers. Computing resources has fundamental value now, thus must be carefully managed and metered. In web3 its weird that any untrusted app can eat all resources of a machine in no time. Moreover, if an application is executed in a sandbox all we need to feel ourselves safe (in addition to authenticated permissions) is ensure that app do not eat more resources than expected. Libraries that help app developers to mine some proof-of-work algorithms using visitor machine become ubiquitous. Practically that means that in addition to shity ads web2 users will experience even more worse web experience: greedy, slow and battery consuming apps are coming. The answer to this upcoming problem in a browser permission system which is able to produce bounds on apps consumption of fundamental resources such as cpu, gpu, ram, storage and broadband. We believe that resource management must be in the core of web3 application engine. We are currently doing research on how that can be implemented: containerisation seems to be low hanging fruit that can be embedded right into web experience. Permission affordances . Current permission systems are static in a sense that browser provide limited set of predefined apis. Cookies, location, camera, microphone, sound and notifications: that is very limited set of things browsers can afford. Permissions of a third party developers are not native for a browsers either. Browser just don't care about what data with which apps agent want to share. We ask ourselves what if a browser can ask apps what kind of permissions they can provide thus exposing this permission system to any other apps? We believe this approach will allow web3 developers provide experience inaccessible for previous architectures.","title":".access"},{"location":"cyb/cyb/#feed","text":"Notification panel displaying all pending transactions and web3 events corresponding to certain account. Settings button leads to settings page where user can manage connection to IPFS, Ethereum and Cyber nodes (local or remote ways).","title":".feed"},{"location":"cyb/cyb/#ipfs","text":"This app is a third party app developed by IPFS Shipyard. This is very basic app for interacting with ipfs.","title":".ipfs"},{"location":"cyb/cyb/#eth","text":"Simple app which ger DURI requests and route requests to ethereum node (contracts, transactions and blocks). Else resolve ENS.","title":".eth"},{"location":"cyb/cyb/#wallet","text":"We believe that transfer of tokens is very basic experience in a web3 thus want to provide embedded in browser wallet app as soon as possible. Thus we consider either to develop our own bicycle or partner with some 3d party wallet developer.","title":".wallet"},{"location":"cyb/cyb/#dev","text":"Developers experience is critical for the whole web3 adoption. This app helps to develop and publish web3 apps.","title":".dev"},{"location":"cyb/cyb/#cg","text":"Chaingear is an app that help developers create ethereum based CRUD databases. We believe it will help developers to adopt web3 easier the same they MySQL helped to site developers in the very beginning of web.","title":".cg"},{"location":"cyb/cyb/#help","text":"Help is a two way help application. Using this app cyb helps agents to use itself. Using .help agents help Cyb evolve. As an open source project we are welcome for contributions. Gitcoin is an excellent instrument that we use for delegating tasks for community a processing payments for completed ones. We have our vision of how to develop browser and what kind of features develop first. But we give an opportunity for community to decide and vote with tokens what kind of browser we need to see in near future. Our product Chaingear is also made for this. We use user's feedback to make products better. So we provide options for bug reporting and feedback leaving on every page.","title":".help"},{"location":"cyb/cyb/#settings","text":"Cyb settings","title":".settings"},{"location":"cyb/cyb/#saga-on-privacy-and-anonymity","text":"...","title":"Saga on privacy and anonymity"},{"location":"cyb/cyb/#on-censorship-resistance","text":"...","title":"On censorship resistance"},{"location":"cyb/web3-vision/","text":"DURA: a missing piece for web3 \u00b6 @xhipster cyberCongress Early draft for web3 summit. Looking for a feedback . Abstract \u00b6 Originally an idea of web3 was inspired by Gavin Wood in 2014. A vision of Gavin was around 4 implementable concepts: content addressing, cryptographic identities, consensus computing and browsers. In parallel an idea of Interplanetary File System has been developed by Juan Benet. IPFS creates a foundation for web3: a system of content addressing and cryptographic identities. Since 2014 consensus computing has suffered insanely rapid development so one more missing piece is also in place. Still missing piece is a web3 browsing. Some projects such as Metamask has demonstrated a taste of web3. But one critical component in terms of browsing is just not there. URL scheme is outdated in terms of desired web3 properties and needs a drop in replacement. In this paper firstly we discuss necessary properties that we expect from web3. Based on this analysis we propose DURA scheme aka Distributed Unified Resource Address as drop in replacement for URLs that is being implemented in web3 browser Cyb . We believe DURA is a dump enough scheme (your captain) which can bring up basic consensus across web3 browser vendors due to simplicity, openness and protocol agnostic approach. Introduction \u00b6 Conventional protocols of the Internet such as TCP/IP, DNS, HTTPS and URL brought a web into the point there it is now. Along with all benefits they has created this protocols brought more problem into the table. Globality being a key property of the the web since inception is under real threat. Speed of connections degrade with network growth and from ubiquitous government interventions into privacy and security of web users. One property, not obvious in the beginning, become really important with everyday usage of the Internet: its ability to exchange permanent hyperlinks thus they would not break after time have pass. Reliance on one at a time internet service provider architecture allow governments censor packets. This fact is the last straw in conventional web stack for every engineer who is concerned about the future of our children. Other properties while being not so critical are very desirable: offline and real-time. Average internet user being offline must have ability to work with the state it has and after acquiring connection being able to sync with global state and continue verify state's validity in realtime while having connection. Now this properties offered on app level while such properties must be integrated into lower level protocols: into very core of web3. Speed \u00b6 Usability researches state that interactions that do not make sense in 100 milliseconds are considered as slow by an agent. Achieving such instant speeds is nearly impossible in the current stack of protocols. The following generation of the web must enable instant responses user requests. Necessity for lookup a location of resource using remote machine is an obvious bottleneck for reaching desired properties. Globality \u00b6 Current internet is starting to split into regions mutually inaccessible for each other. China is de facto such a region. Some countries are very close to joining the club. It is of paramount importance that web3 would remain global even in the face of government level adversaries. Security \u00b6 Current web applications are still in its infancy in term of permission abilities. Security of web apps is a very complicated topic. But one thing is obvious: it is hard to setup a secure system with third party apps without built in authentication system of the code being run on client machine. Current system of mutable resource location based on certificate authorities can not be safe by design. Permanent \u00b6 We are all experience broken links. IPFS has immunity to this issue. As long as you keep a file anybody can access it using globally defined immutable in time address of this file computed from the file itself. Mesh ready \u00b6 Current internet paradigm is based on 1 internet provider paradigm. That is basically a bad shit, because in general even if you have 2 or more internet connection like wifi and lte your device and/or operation system don't allow you to get the full possibilities of connectivity enforcing you to use only one connection at a time. Another major bad shit in current internet architecture is that your device is treated as leech by default. Every device keeps data necessary to being useful for surround devices. Huge portion of our network traffic goes not from origin server but from ISP cache. That means that changing a paradigm we can get to very different topology where our neighbors are our web3 providers. Verifiability \u00b6 ... Privacy and Anonymity \u00b6 ... Offline \u00b6 ... Realtime \u00b6 ... Roles \u00b6 In a web of the third generation roles are not like in a web2. There is no clear split on users, internet providers and sites. Key difference is such that interactions can happen truly peer to peer the one can be sovereign enough to be their own internet. Apps. Any content hash can be an app if it is known how to parse it. Agents. An app can become an agent if she can prove that she exist by digital signature. Providers. Any agent that is able to serve content can be web3 provider. Content addresses \u00b6 To understand why they so important we need to understand a difference in foundational concept of web2 and web3. Web2: Where => What-How : You must know resource location on a particular server to retrieve it. Web3: What => How : Instead of location based paradigm web3 is based on the content addressing paradigm. Key point is that we do not need to have knowledge of resource location in order to link to an object. In a web3 the answer to the How is either local or blockchain based registry with simple map between input address and address of an app. Cryptographic identities \u00b6 ... Consensus computers \u00b6 There are some very exhaustive articles around the topic of web3 which are really about consensus computing part of it. Worth to note that saying that any particular blockchain or even all blockchains altogether is web3 is like saying that databases is world wide web. Yes databases technology contributed to a development of www, but without several protocols this databases would not become interconnected through billions of web sites. Remember that in order to implement a vision of full web3 potential we need to find drop in replacement for every piece of current protocol stack: IP, TCP, HTTPS, DNS and URL. None of currently deployed blockchain technologies don't have necessary properties to directly replace dinosaurs. I would say that distributed ledger technology is a better database stack for the upcoming web. DURA scheme \u00b6 Distributed Unified Resource Address or put simply DURA is a more simpler and trustful scheme that has been used in a conventional web. It doesn't requires central authorities such as ICANN or others: [protocol]://[query].[root-app]/[navigation] We believe that a term cyberlink can be used for DURA links in order to differentiate with hyperlinks of previous internet architecture. Protocol \u00b6 dura:// It is a local handler that every os can handle. Being fully optional it can be very important in the very beginning of web3. Query \u00b6 dura://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa If a browser is able to understand in which network she can resolve this particular content hash it can resolve it without much ado. Though we expect that IPFS will be not the only system and it become practically hard to say with 100% certainty whether given hash is ipfs hash or swarm or torrent or some other address type. That is there the concept of a root registry came into the game. In some sense it serves as an alternative to a self describing scheme used in CIDs. In some sense its not as it offer visually more sound links for agents. We believe that the root registry and self description concepts are complementary to each other. Root registry \u00b6 Current state of DNS root management is outdated. The most bad thing is that we still must to trust the most important things in our lives to strange organizations such as ICANN, IANA. We can ask ourselves why after 40 years of ubiquitous computer movement we still don't have simple common knowledge about what file extensions must be used with what software? Our proposal is a concept of a root register. Structure of root register is a simple map between short name and ipfs hash of a program that is being triggered: com:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa io:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa exe:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa pdf:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa eth:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa A name must be letter, number or hypen. Purpose of a root register is to reach some very basic os and network agnostic agreement about what extensions with what programs must be used. Of course the problem with such registry is that it must be somehow and somewhere maintained. Three rules of a root registry \u00b6 Software vendors must compete for a better root registry. Software vendors must add setting with a change of a root registry. Agents of browsers and operation systems must have ability to overwrite maps for local pleasure. One of the implementation is a cyb root registry Root registry app \u00b6 cyb://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa.ipfs This is an example of full DURA link that is able get hash of ipfs app in a root registry, than throw predicate into this app and get a desired resource from a peer to peer network. Note: need to add real case of ipfs DURA app being used in Cyb. Note: need to add real case on how web2 link can be resolved using DURA approach. App navigation \u00b6 Traditionally its up to developers how to structure navigation within an app. But we believe that some scheme will be invented to differentiate statefull and stateless links as it is very important for DURA extensions \u00b6 A lot of cool stuff can be implemented using extensions. Extension is any symbol that adds predictable an logical behavior for parsing and rendering of requests. Examples: - local paths - connection links - URL parameters Key principle is that semantics is programmable and can be delivered from a distributed network using symbols that has been registered in a root registry. Where extension \u00b6 Keyword: - / before content address is a local path Examples: /users/xhipster/cybernode.ai /ethereum/cybersearch.eth Linkchain extension \u00b6 Keyword: - @ between DURA statements Examples: xhipster.eth@cybercongress.ai Need to find cyberlinks between two cyberlinks. Reference \u00b6 ...","title":"Web3 vision"},{"location":"cyb/web3-vision/#dura-a-missing-piece-for-web3","text":"@xhipster cyberCongress Early draft for web3 summit. Looking for a feedback .","title":"DURA: a missing piece for web3"},{"location":"cyb/web3-vision/#abstract","text":"Originally an idea of web3 was inspired by Gavin Wood in 2014. A vision of Gavin was around 4 implementable concepts: content addressing, cryptographic identities, consensus computing and browsers. In parallel an idea of Interplanetary File System has been developed by Juan Benet. IPFS creates a foundation for web3: a system of content addressing and cryptographic identities. Since 2014 consensus computing has suffered insanely rapid development so one more missing piece is also in place. Still missing piece is a web3 browsing. Some projects such as Metamask has demonstrated a taste of web3. But one critical component in terms of browsing is just not there. URL scheme is outdated in terms of desired web3 properties and needs a drop in replacement. In this paper firstly we discuss necessary properties that we expect from web3. Based on this analysis we propose DURA scheme aka Distributed Unified Resource Address as drop in replacement for URLs that is being implemented in web3 browser Cyb . We believe DURA is a dump enough scheme (your captain) which can bring up basic consensus across web3 browser vendors due to simplicity, openness and protocol agnostic approach.","title":"Abstract"},{"location":"cyb/web3-vision/#introduction","text":"Conventional protocols of the Internet such as TCP/IP, DNS, HTTPS and URL brought a web into the point there it is now. Along with all benefits they has created this protocols brought more problem into the table. Globality being a key property of the the web since inception is under real threat. Speed of connections degrade with network growth and from ubiquitous government interventions into privacy and security of web users. One property, not obvious in the beginning, become really important with everyday usage of the Internet: its ability to exchange permanent hyperlinks thus they would not break after time have pass. Reliance on one at a time internet service provider architecture allow governments censor packets. This fact is the last straw in conventional web stack for every engineer who is concerned about the future of our children. Other properties while being not so critical are very desirable: offline and real-time. Average internet user being offline must have ability to work with the state it has and after acquiring connection being able to sync with global state and continue verify state's validity in realtime while having connection. Now this properties offered on app level while such properties must be integrated into lower level protocols: into very core of web3.","title":"Introduction"},{"location":"cyb/web3-vision/#speed","text":"Usability researches state that interactions that do not make sense in 100 milliseconds are considered as slow by an agent. Achieving such instant speeds is nearly impossible in the current stack of protocols. The following generation of the web must enable instant responses user requests. Necessity for lookup a location of resource using remote machine is an obvious bottleneck for reaching desired properties.","title":"Speed"},{"location":"cyb/web3-vision/#globality","text":"Current internet is starting to split into regions mutually inaccessible for each other. China is de facto such a region. Some countries are very close to joining the club. It is of paramount importance that web3 would remain global even in the face of government level adversaries.","title":"Globality"},{"location":"cyb/web3-vision/#security","text":"Current web applications are still in its infancy in term of permission abilities. Security of web apps is a very complicated topic. But one thing is obvious: it is hard to setup a secure system with third party apps without built in authentication system of the code being run on client machine. Current system of mutable resource location based on certificate authorities can not be safe by design.","title":"Security"},{"location":"cyb/web3-vision/#permanent","text":"We are all experience broken links. IPFS has immunity to this issue. As long as you keep a file anybody can access it using globally defined immutable in time address of this file computed from the file itself.","title":"Permanent"},{"location":"cyb/web3-vision/#mesh-ready","text":"Current internet paradigm is based on 1 internet provider paradigm. That is basically a bad shit, because in general even if you have 2 or more internet connection like wifi and lte your device and/or operation system don't allow you to get the full possibilities of connectivity enforcing you to use only one connection at a time. Another major bad shit in current internet architecture is that your device is treated as leech by default. Every device keeps data necessary to being useful for surround devices. Huge portion of our network traffic goes not from origin server but from ISP cache. That means that changing a paradigm we can get to very different topology where our neighbors are our web3 providers.","title":"Mesh ready"},{"location":"cyb/web3-vision/#verifiability","text":"...","title":"Verifiability"},{"location":"cyb/web3-vision/#privacy-and-anonymity","text":"...","title":"Privacy and Anonymity"},{"location":"cyb/web3-vision/#offline","text":"...","title":"Offline"},{"location":"cyb/web3-vision/#realtime","text":"...","title":"Realtime"},{"location":"cyb/web3-vision/#roles","text":"In a web of the third generation roles are not like in a web2. There is no clear split on users, internet providers and sites. Key difference is such that interactions can happen truly peer to peer the one can be sovereign enough to be their own internet. Apps. Any content hash can be an app if it is known how to parse it. Agents. An app can become an agent if she can prove that she exist by digital signature. Providers. Any agent that is able to serve content can be web3 provider.","title":"Roles"},{"location":"cyb/web3-vision/#content-addresses","text":"To understand why they so important we need to understand a difference in foundational concept of web2 and web3. Web2: Where => What-How : You must know resource location on a particular server to retrieve it. Web3: What => How : Instead of location based paradigm web3 is based on the content addressing paradigm. Key point is that we do not need to have knowledge of resource location in order to link to an object. In a web3 the answer to the How is either local or blockchain based registry with simple map between input address and address of an app.","title":"Content addresses"},{"location":"cyb/web3-vision/#cryptographic-identities","text":"...","title":"Cryptographic identities"},{"location":"cyb/web3-vision/#consensus-computers","text":"There are some very exhaustive articles around the topic of web3 which are really about consensus computing part of it. Worth to note that saying that any particular blockchain or even all blockchains altogether is web3 is like saying that databases is world wide web. Yes databases technology contributed to a development of www, but without several protocols this databases would not become interconnected through billions of web sites. Remember that in order to implement a vision of full web3 potential we need to find drop in replacement for every piece of current protocol stack: IP, TCP, HTTPS, DNS and URL. None of currently deployed blockchain technologies don't have necessary properties to directly replace dinosaurs. I would say that distributed ledger technology is a better database stack for the upcoming web.","title":"Consensus computers"},{"location":"cyb/web3-vision/#dura-scheme","text":"Distributed Unified Resource Address or put simply DURA is a more simpler and trustful scheme that has been used in a conventional web. It doesn't requires central authorities such as ICANN or others: [protocol]://[query].[root-app]/[navigation] We believe that a term cyberlink can be used for DURA links in order to differentiate with hyperlinks of previous internet architecture.","title":"DURA scheme"},{"location":"cyb/web3-vision/#protocol","text":"dura:// It is a local handler that every os can handle. Being fully optional it can be very important in the very beginning of web3.","title":"Protocol"},{"location":"cyb/web3-vision/#query","text":"dura://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa If a browser is able to understand in which network she can resolve this particular content hash it can resolve it without much ado. Though we expect that IPFS will be not the only system and it become practically hard to say with 100% certainty whether given hash is ipfs hash or swarm or torrent or some other address type. That is there the concept of a root registry came into the game. In some sense it serves as an alternative to a self describing scheme used in CIDs. In some sense its not as it offer visually more sound links for agents. We believe that the root registry and self description concepts are complementary to each other.","title":"Query"},{"location":"cyb/web3-vision/#root-registry","text":"Current state of DNS root management is outdated. The most bad thing is that we still must to trust the most important things in our lives to strange organizations such as ICANN, IANA. We can ask ourselves why after 40 years of ubiquitous computer movement we still don't have simple common knowledge about what file extensions must be used with what software? Our proposal is a concept of a root register. Structure of root register is a simple map between short name and ipfs hash of a program that is being triggered: com:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa io:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa exe:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa pdf:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa eth:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa A name must be letter, number or hypen. Purpose of a root register is to reach some very basic os and network agnostic agreement about what extensions with what programs must be used. Of course the problem with such registry is that it must be somehow and somewhere maintained.","title":"Root registry"},{"location":"cyb/web3-vision/#three-rules-of-a-root-registry","text":"Software vendors must compete for a better root registry. Software vendors must add setting with a change of a root registry. Agents of browsers and operation systems must have ability to overwrite maps for local pleasure. One of the implementation is a cyb root registry","title":"Three rules of a root registry"},{"location":"cyb/web3-vision/#root-registry-app","text":"cyb://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa.ipfs This is an example of full DURA link that is able get hash of ipfs app in a root registry, than throw predicate into this app and get a desired resource from a peer to peer network. Note: need to add real case of ipfs DURA app being used in Cyb. Note: need to add real case on how web2 link can be resolved using DURA approach.","title":"Root registry app"},{"location":"cyb/web3-vision/#app-navigation","text":"Traditionally its up to developers how to structure navigation within an app. But we believe that some scheme will be invented to differentiate statefull and stateless links as it is very important for","title":"App navigation"},{"location":"cyb/web3-vision/#dura-extensions","text":"A lot of cool stuff can be implemented using extensions. Extension is any symbol that adds predictable an logical behavior for parsing and rendering of requests. Examples: - local paths - connection links - URL parameters Key principle is that semantics is programmable and can be delivered from a distributed network using symbols that has been registered in a root registry.","title":"DURA extensions"},{"location":"cyb/web3-vision/#where-extension","text":"Keyword: - / before content address is a local path Examples: /users/xhipster/cybernode.ai /ethereum/cybersearch.eth","title":"Where extension"},{"location":"cyb/web3-vision/#linkchain-extension","text":"Keyword: - @ between DURA statements Examples: xhipster.eth@cybercongress.ai Need to find cyberlinks between two cyberlinks.","title":"Linkchain extension"},{"location":"cyb/web3-vision/#reference","text":"...","title":"Reference"},{"location":"cyberd/Changelog/","text":"Change Log \u00b6 Unreleased \u00b6 Full Changelog Fixed bugs: Error during rewards withdrawal #302 Closed issues: Cyberadmin telegram-bot for cyberd #281 Slow node start-up. #138 Merged pull requests: Add goveralls support for test coverage #305 ( arturalbov ) v0.1.4 (2019-03-15) \u00b6 Full Changelog Implemented enhancements: Get supply #158 Fixed bugs: Consensus Failure #293 Infinity loop in rank end blocker if node was restarted before x00 blocks. #283 Centralized network communication #257 Closed issues: Enabled send #290 move debug logic to x/debug module #288 Add doc of using help feature of cli #287 Add doc about editing moniker and openning 26656 port. #282 Development start guide #78 Merged pull requests: 0.1.4 #298 ( hleb-albau ) #293 Handle bank delegation method in inmem index update mechanism #297 ( hleb-albau ) 138 links storage #295 ( hleb-albau ) #78 Dev Env docs #292 ( hleb-albau ) #290 Enable send #291 ( hleb-albau ) #288 Move debug code to x/debug #289 ( hleb-albau ) #158 Get supply #285 ( hleb-albau ) v0.1.3 (2019-03-01) \u00b6 Full Changelog Implemented enhancements: Remove full index loading for next rank in link index #275 Enable governance module #193 Closed issues: Generate lottery results cmd #273 Can not explore existing account if it have not any outgoing transactions #238 distribution validator slashes don't work in cybercli #237 Merged pull requests: minor docs reorg fixes #279 ( SaveTheAles ) #193 Enable governance module #278 ( hleb-albau ) Remove full index loading for next rank in link index #277 ( arturalbov ) #273 Generate lottery results cmd #274 ( hleb-albau ) add staging #272 ( SaveTheAles ) add folder removing #271 ( SaveTheAles ) Docs ci upd #270 ( SaveTheAles ) v0.1.2 (2019-02-23) \u00b6 Full Changelog Implemented enhancements: Update to cosmos 0.32.0 #265 Download golang only once during docker build. #259 Do not calculate rank, if there is no new links on last window. #258 Http client only new links option for submit endpoint #254 Add fail at height debug flags #250 Extend isLinkExist endpoint with possibility not specify address param #242 Add staking/validators endpoint to node RPC #235 Add cyberd rest light-client to docker image #230 Improve building of links index for search queries #145 Webscoket API #76 Fixed bugs: Rank calculation failed: out of memory #264 Different bandwidth price on same block height #247 Consensus failure after node restart #243 Search returns 500 error when previously unexisted \"from\" CID added #241 Rest server blocks cli keystore file #233 Cannot interact with node #203 Update cyberd.ai #185 CI: Cyberd docker image building. Include genesis file #160 Closed issues: Add more seeds into initial config #244 Create awesome gif for readme #239 Launch 0.1.1 testnet #205 Cyberd release scheme. #180 Genesis state generator #92 Distribution #27 Ranking research #24 Define distribution in paper #5 Merged pull requests: 0.1.2 #269 ( hleb-albau ) Refactoring of search index. Fix links export #268 ( arturalbov ) Launch euler-2 testnet #267 ( hleb-albau ) #265 Update to cosmos 0.32.0 #266 ( hleb-albau ) Consensus failure after node restart #263 ( arturalbov ) Do not calculate rank, if there is no new links on last window. #261 ( arturalbov ) Client submit only new links flag #260 ( hleb-albau ) Improve building of links index for search queries #255 ( arturalbov ) #244 Add moon as seed node #253 ( hleb-albau ) #250 Add fail at height debug flag #251 ( hleb-albau ) #247 Different bandwidth price on same block height #248 ( hleb-albau ) #242 Extend isLinkExist endpoint with possibility not specify address #246 ( hleb-albau ) #242 Extend isLinkExist endpoint with possibility not specify address #245 ( hleb-albau ) Add staking/validators endpoint to node RPC #236 ( arturalbov ) Rest server blocks cli keystore file #234 ( arturalbov ) UPD run validator md #232 ( SaveTheAles ) Add cyberd rest light-client to docker image #231 ( arturalbov ) Fix docs #228 ( arturalbov ) upd run-validator.md #225 ( SaveTheAles ) v0.1.1 (2019-01-31) \u00b6 Full Changelog Fixed bugs: Error on replay with wrong app hash calculation block \\#914381 block \\#914381 #197 Closed issues: Mass testing of cyberd-testnet 0.1.1 #219 Export 0.1.1 genesis from 0.1.0 testnet. #215 Setup 0.1.1 chain params for staking, distr, slashing, mint modules. #201 euler-1 (2019-01-31) \u00b6 Full Changelog Merged pull requests: Euler 0.1.1 #223 ( arturalbov ) Fix import reader #222 ( arturalbov ) Landing update #220 ( asadovka ) DISCUSS: Chain params for 0.1.1 network #202 ( hleb-albau ) euler-1.1-dev1 (2019-01-30) \u00b6 Full Changelog Implemented enhancements: Docker image with possibility to select compute unit #211 Fixed bugs: Link msg bandwidth cost doesn't take into account links count #216 Merged pull requests: #215 Fix pou distribution uses share not percentage #221 ( hleb-albau ) #215 Fix gentx commands. #218 ( hleb-albau ) euler-1.1-dev0 (2019-01-29) \u00b6 Full Changelog Implemented enhancements: Links Exporter #184 Fixed bugs: Fix validator manual #189 Change mint module to default cosmos module #181 Current Bandwidth do not respect price #168 negative bandwidnt #164 Wrong CYB allocation in Genesis #156 Update docker with 0.1.0 version #154 Move import_private command to keys subcomand #152 Handle import of ethereum privkeys with 0x #150 Closed issues: Fix typos #207 Update landing for 0.4 whitepaper #204 Update to tendermint v29.0 #187 Change Bandwidth Price to Average for 24h Sliding Window #179 High bandwidth cost for create validator msg #178 Bandwidth Specification Change #177 Add rpc endpoint to submit signed link and send messages #173 Tx size reduction: switch to more compact links tx encoding. #171 index entities count endpoint #165 Add ipfs hashes to release #161 Change token name from CBD to CYB in the testnetwork #157 Add more issues templates. #153 Add trust-node by default in cli #151 Numerous small fixes in whitepaper #89 Cyberd landing make up #36 Whitepaper 0.4 #25 Merged pull requests: CI: testnet ipfs files hashes #217 ( arturalbov ) WIP: CI Cyberd docker image building. Include genesis file #214 ( arturalbov ) #197 Error on replay with wrong app hash calculation #213 ( hleb-albau ) Links exporter #210 ( arturalbov ) R4R #181 Constant Block Reward #209 ( hleb-albau ) 157 change token protocol name #208 ( hleb-albau ) Fix typos get_CYB.md #206 ( serejandmyself ) R4R: #156 Add Missing euler tokens cmd #200 ( hleb-albau ) Update to cosmos-sdk v0.30.0 #198 ( hleb-albau ) Tx size reduction: switch to more compact links tx encoding #192 ( arturalbov ) Fix rank calculation context data #191 ( hleb-albau ) Important fixes in validators manual #190 ( xhipster ) Change Bandwidth Price to Average for 24h Sliding Window #188 ( arturalbov ) R4R Update cosmos to latest develop #186 ( hleb-albau ) #153 Add more issues templates. #183 ( hleb-albau ) #178 #168 Bandwidth price + Msg cost for non link txes #182 ( hleb-albau ) #173 Add rpc endpoint to submit signed link and send messages #174 ( hleb-albau ) Technical notes on euler release #169 ( xhipster ) Handle import of ethereum privkeys with 0x. Trust node by default #167 ( arturalbov ) #164 fix rpc negative bw #165 add index entities count endpoint #166 ( hleb-albau ) Move import_private command to keys subcomand #159 ( arturalbov ) v0.1.0 (2019-01-06) \u00b6 Full Changelog Implemented enhancements: CID rank merkle proofs #133 Simple go cyberd client #122 Add remainig bandwidth endpoint #109 Get rid of RPC proxy #94 Fixed bugs: Cannot check balance using cli #149 Index out of range for cids with not calculated rank yet. #139 Account inmem balances should be updated by wrapping accountKeeper #99 Closed issues: Cli: Add possibility to restore acc from priv keys #146 Go mod Ci dependency error #128 Update to cosmos 29 #126 Write down bandwidth specification #114 Make docker container based on nvidia-gpu image. #104 Index transactions by addresses. #103 Calculate rank in ||, post results each 600 blocks. #101 Linkchains support #91 Include addresses into knowledge graph #90 Graphics for whitepaper #88 Add bandwidth by stake #77 Launch testnet Euler #73 Test Ethereum Network Statistical Significance #52 Cyberd landing design #51 Simulation #31 Link Chain PoC | Zeronet #26 Write benchmark and test SpringRank with different amount of objects/edges #22 Parse Ethereum network and calculate SpringRank #21 Research basic chains fundamentals #15 Perfomance testing of Solana #10 Research on perfomance of consensus computers #9 Perfomance testing scenario for cyberd #8 Merged pull requests: [euler] Launch euler testnet #148 ( hleb-albau ) Cli: Add possibility to restore acc from priv keys #147 ( arturalbov ) Rank merkle proofs #144 ( arturalbov ) Setup bw params #143 ( hleb-albau ) Merkle tree implementation #141 ( arturalbov ) #139 Index out of range for cids with not calculated rank yet. #140 ( hleb-albau ) Fix http client and rank logs #137 ( hleb-albau ) [euler-dev3] New testnet #136 ( hleb-albau ) #101 Copy state before index creation #135 ( hleb-albau ) #92 Populate state with random addresses #134 ( hleb-albau ) Small fixes #131 ( arturalbov ) Parallel rank calculation #130 ( arturalbov ) Update stake index every block #129 ( hleb-albau ) #126 Update to cosmos 29 #127 ( hleb-albau ) Refactoring #125 ( hleb-albau ) Various Bug fixes #124 ( hleb-albau ) In-memory storages refactoring #123 ( arturalbov ) #114 Write bw specification #121 ( hleb-albau ) WIP #114 Add cbdbank module #120 ( hleb-albau ) Update readme #119 ( hleb-albau ) Clean up folders #118 ( arturalbov ) #103 Index transactions by signers. #117 ( hleb-albau ) v0.0.8 (2018-12-11) \u00b6 Full Changelog Implemented enhancements: Cid validation #93 Update to cosmos-sdk version 0.26.1 #79 Build node releases with cleveldb #59 Remove 'cosmosaccaddr' prefix from cyberd address #39 Closed issues: Make up cyberd landing #87 Add possibility to join for new validators. #75 Calculate rank using GPU #74 Create basic wiki cyberd indexer #71 Create cyberd PoC based on Cosmos SDK #37 Draw logo for cyberd #16 Build basic economic model #1 Merged pull requests: #76 Define Basic RPC specification #111 ( hleb-albau ) #104 Make docker container based on nvidia-gpu image #110 ( hleb-albau ) [DON'T MERGE] Add bandwidth by stake. Part 2. #108 ( arturalbov ) Add bandwidth by stake Part 1 #107 ( arturalbov ) #93 Cid validation #106 ( hleb-albau ) #78 Add guide How to join network as validator #105 ( hleb-albau ) #1 Build basic economic model #102 ( hleb-albau ) Update cosmos to 0.27.0 #100 ( hleb-albau ) Small fixes for validators joining #98 ( arturalbov ) Remove poc folder #97 ( hleb-albau ) Add possibility to join for new validators #96 ( arturalbov ) Calculate eth network significance #85 ( hleb-albau ) 74 gpu rank calculation #83 ( hleb-albau ) Remove 'cosmosaccaddr' prefix from cyberd address #82 ( arturalbov ) UPD docs_upd job #81 ( SaveTheAles ) Update cosmos-sdk version to 0.26.1 #80 ( arturalbov ) v0.0.7 (2018-10-25) \u00b6 Full Changelog Implemented enhancements: Proxy service. Add search pagination #69 Add send tokens endpoint to proxy #62 Fixed bugs: Proxy service. Search request with \"spaces\" fails #67 Non-deterministic rank calculation #66 Closed issues: Claim service: increment tx sequence manually #64 Merged pull requests: #71 Create basic wiki cyberd indexer #72 ( hleb-albau ) Proxy service. Add search pagination #70 ( arturalbov ) Proxy service. Search request with spaces fails #68 ( arturalbov ) Claim service: increment tx sequence manually #65 ( arturalbov ) v0.0.6 (2018-10-24) \u00b6 Full Changelog v0.0.5 (2018-10-23) \u00b6 Full Changelog Implemented enhancements: [RPC] Fix small finding #57 v0.0.4 (2018-10-23) \u00b6 Full Changelog Closed issues: Service to claim cyberd zeronet tokens #61 Update cosmos-sdk to latest dev branch version #56 Perfomance Degradation: Heavy Disk Usage #50 Merged pull requests: Add send tokens endpoint to proxy #63 ( arturalbov ) Claim service #60 ( arturalbov ) #57 [RPC] Fix small finding #58 ( hleb-albau ) Update cosmos-sdk to latest dev branch version #53 ( hleb-albau ) v0.0.3 (2018-10-19) \u00b6 Full Changelog Implemented enhancements: CLI: Add \"wait_for_confirmation\" Flag #47 Fixed bugs: RPC Client: /search on non existing cid return first added cid #48 Closed issues: Write validation logic of IPFS hash for Losion Zeronet #18 Genesis Zeronet #17 Performance testing of Zeronet #4 Merged pull requests: Add cyberdproxy process to docker container. Add status endpoint #55 ( arturalbov ) Proxy rpc #54 ( arturalbov ) v0.0.2 (2018-10-05) \u00b6 Full Changelog Implemented enhancements: Cosmos PoC: Integrate Rank Calculation #43 Cosmos PoC: Extenend Standart Tendermint RPC API #42 Closed issues: Implement persistent storage for links. #40 run extra node for cyberd #20 Merged pull requests: Fix search on non existing cid #49 ( arturalbov ) Add Circle CI build job #46 ( arturalbov ) Extenend Standart Tendermint RPC API #45 ( arturalbov ) #43 Simplest Rank #44 ( hleb-albau ) #40 introduce in-memory store #41 ( hleb-albau ) #37 redesign db, app refactor #38 ( hleb-albau ) Cosmos POC: Clean up CLI #35 ( arturalbov ) Update cyberd/cosmos README #34 ( arturalbov ) v0.0.1 (2018-09-25) \u00b6 Closed issues: Make cyberd docs to be included into common wiki. #32 Write LT/NLT logic to Losion Zeronet #19 Research basic technologies #14 Research basic papers #13 Perfomance testing of Ethermint #12 Perfomance testing of Plasma #11 Perfomance testing of PoA networks #7 Cleanup paper #6 Perfomance testing of EOS #3 Merged pull requests: Genesis zeronet: Cosmos SDK #33 ( arturalbov ) [WIP] 21 calculate spring rank for ethereum #23 ( hleb-albau ) Fixing typo #2 ( trummax ) * This Change Log was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"cyberd/Changelog/#change-log","text":"","title":"Change Log"},{"location":"cyberd/Changelog/#unreleased","text":"Full Changelog Fixed bugs: Error during rewards withdrawal #302 Closed issues: Cyberadmin telegram-bot for cyberd #281 Slow node start-up. #138 Merged pull requests: Add goveralls support for test coverage #305 ( arturalbov )","title":"Unreleased"},{"location":"cyberd/Changelog/#v014-2019-03-15","text":"Full Changelog Implemented enhancements: Get supply #158 Fixed bugs: Consensus Failure #293 Infinity loop in rank end blocker if node was restarted before x00 blocks. #283 Centralized network communication #257 Closed issues: Enabled send #290 move debug logic to x/debug module #288 Add doc of using help feature of cli #287 Add doc about editing moniker and openning 26656 port. #282 Development start guide #78 Merged pull requests: 0.1.4 #298 ( hleb-albau ) #293 Handle bank delegation method in inmem index update mechanism #297 ( hleb-albau ) 138 links storage #295 ( hleb-albau ) #78 Dev Env docs #292 ( hleb-albau ) #290 Enable send #291 ( hleb-albau ) #288 Move debug code to x/debug #289 ( hleb-albau ) #158 Get supply #285 ( hleb-albau )","title":"v0.1.4 (2019-03-15)"},{"location":"cyberd/Changelog/#v013-2019-03-01","text":"Full Changelog Implemented enhancements: Remove full index loading for next rank in link index #275 Enable governance module #193 Closed issues: Generate lottery results cmd #273 Can not explore existing account if it have not any outgoing transactions #238 distribution validator slashes don't work in cybercli #237 Merged pull requests: minor docs reorg fixes #279 ( SaveTheAles ) #193 Enable governance module #278 ( hleb-albau ) Remove full index loading for next rank in link index #277 ( arturalbov ) #273 Generate lottery results cmd #274 ( hleb-albau ) add staging #272 ( SaveTheAles ) add folder removing #271 ( SaveTheAles ) Docs ci upd #270 ( SaveTheAles )","title":"v0.1.3 (2019-03-01)"},{"location":"cyberd/Changelog/#v012-2019-02-23","text":"Full Changelog Implemented enhancements: Update to cosmos 0.32.0 #265 Download golang only once during docker build. #259 Do not calculate rank, if there is no new links on last window. #258 Http client only new links option for submit endpoint #254 Add fail at height debug flags #250 Extend isLinkExist endpoint with possibility not specify address param #242 Add staking/validators endpoint to node RPC #235 Add cyberd rest light-client to docker image #230 Improve building of links index for search queries #145 Webscoket API #76 Fixed bugs: Rank calculation failed: out of memory #264 Different bandwidth price on same block height #247 Consensus failure after node restart #243 Search returns 500 error when previously unexisted \"from\" CID added #241 Rest server blocks cli keystore file #233 Cannot interact with node #203 Update cyberd.ai #185 CI: Cyberd docker image building. Include genesis file #160 Closed issues: Add more seeds into initial config #244 Create awesome gif for readme #239 Launch 0.1.1 testnet #205 Cyberd release scheme. #180 Genesis state generator #92 Distribution #27 Ranking research #24 Define distribution in paper #5 Merged pull requests: 0.1.2 #269 ( hleb-albau ) Refactoring of search index. Fix links export #268 ( arturalbov ) Launch euler-2 testnet #267 ( hleb-albau ) #265 Update to cosmos 0.32.0 #266 ( hleb-albau ) Consensus failure after node restart #263 ( arturalbov ) Do not calculate rank, if there is no new links on last window. #261 ( arturalbov ) Client submit only new links flag #260 ( hleb-albau ) Improve building of links index for search queries #255 ( arturalbov ) #244 Add moon as seed node #253 ( hleb-albau ) #250 Add fail at height debug flag #251 ( hleb-albau ) #247 Different bandwidth price on same block height #248 ( hleb-albau ) #242 Extend isLinkExist endpoint with possibility not specify address #246 ( hleb-albau ) #242 Extend isLinkExist endpoint with possibility not specify address #245 ( hleb-albau ) Add staking/validators endpoint to node RPC #236 ( arturalbov ) Rest server blocks cli keystore file #234 ( arturalbov ) UPD run validator md #232 ( SaveTheAles ) Add cyberd rest light-client to docker image #231 ( arturalbov ) Fix docs #228 ( arturalbov ) upd run-validator.md #225 ( SaveTheAles )","title":"v0.1.2 (2019-02-23)"},{"location":"cyberd/Changelog/#v011-2019-01-31","text":"Full Changelog Fixed bugs: Error on replay with wrong app hash calculation block \\#914381 block \\#914381 #197 Closed issues: Mass testing of cyberd-testnet 0.1.1 #219 Export 0.1.1 genesis from 0.1.0 testnet. #215 Setup 0.1.1 chain params for staking, distr, slashing, mint modules. #201","title":"v0.1.1 (2019-01-31)"},{"location":"cyberd/Changelog/#euler-1-2019-01-31","text":"Full Changelog Merged pull requests: Euler 0.1.1 #223 ( arturalbov ) Fix import reader #222 ( arturalbov ) Landing update #220 ( asadovka ) DISCUSS: Chain params for 0.1.1 network #202 ( hleb-albau )","title":"euler-1 (2019-01-31)"},{"location":"cyberd/Changelog/#euler-11-dev1-2019-01-30","text":"Full Changelog Implemented enhancements: Docker image with possibility to select compute unit #211 Fixed bugs: Link msg bandwidth cost doesn't take into account links count #216 Merged pull requests: #215 Fix pou distribution uses share not percentage #221 ( hleb-albau ) #215 Fix gentx commands. #218 ( hleb-albau )","title":"euler-1.1-dev1 (2019-01-30)"},{"location":"cyberd/Changelog/#euler-11-dev0-2019-01-29","text":"Full Changelog Implemented enhancements: Links Exporter #184 Fixed bugs: Fix validator manual #189 Change mint module to default cosmos module #181 Current Bandwidth do not respect price #168 negative bandwidnt #164 Wrong CYB allocation in Genesis #156 Update docker with 0.1.0 version #154 Move import_private command to keys subcomand #152 Handle import of ethereum privkeys with 0x #150 Closed issues: Fix typos #207 Update landing for 0.4 whitepaper #204 Update to tendermint v29.0 #187 Change Bandwidth Price to Average for 24h Sliding Window #179 High bandwidth cost for create validator msg #178 Bandwidth Specification Change #177 Add rpc endpoint to submit signed link and send messages #173 Tx size reduction: switch to more compact links tx encoding. #171 index entities count endpoint #165 Add ipfs hashes to release #161 Change token name from CBD to CYB in the testnetwork #157 Add more issues templates. #153 Add trust-node by default in cli #151 Numerous small fixes in whitepaper #89 Cyberd landing make up #36 Whitepaper 0.4 #25 Merged pull requests: CI: testnet ipfs files hashes #217 ( arturalbov ) WIP: CI Cyberd docker image building. Include genesis file #214 ( arturalbov ) #197 Error on replay with wrong app hash calculation #213 ( hleb-albau ) Links exporter #210 ( arturalbov ) R4R #181 Constant Block Reward #209 ( hleb-albau ) 157 change token protocol name #208 ( hleb-albau ) Fix typos get_CYB.md #206 ( serejandmyself ) R4R: #156 Add Missing euler tokens cmd #200 ( hleb-albau ) Update to cosmos-sdk v0.30.0 #198 ( hleb-albau ) Tx size reduction: switch to more compact links tx encoding #192 ( arturalbov ) Fix rank calculation context data #191 ( hleb-albau ) Important fixes in validators manual #190 ( xhipster ) Change Bandwidth Price to Average for 24h Sliding Window #188 ( arturalbov ) R4R Update cosmos to latest develop #186 ( hleb-albau ) #153 Add more issues templates. #183 ( hleb-albau ) #178 #168 Bandwidth price + Msg cost for non link txes #182 ( hleb-albau ) #173 Add rpc endpoint to submit signed link and send messages #174 ( hleb-albau ) Technical notes on euler release #169 ( xhipster ) Handle import of ethereum privkeys with 0x. Trust node by default #167 ( arturalbov ) #164 fix rpc negative bw #165 add index entities count endpoint #166 ( hleb-albau ) Move import_private command to keys subcomand #159 ( arturalbov )","title":"euler-1.1-dev0 (2019-01-29)"},{"location":"cyberd/Changelog/#v010-2019-01-06","text":"Full Changelog Implemented enhancements: CID rank merkle proofs #133 Simple go cyberd client #122 Add remainig bandwidth endpoint #109 Get rid of RPC proxy #94 Fixed bugs: Cannot check balance using cli #149 Index out of range for cids with not calculated rank yet. #139 Account inmem balances should be updated by wrapping accountKeeper #99 Closed issues: Cli: Add possibility to restore acc from priv keys #146 Go mod Ci dependency error #128 Update to cosmos 29 #126 Write down bandwidth specification #114 Make docker container based on nvidia-gpu image. #104 Index transactions by addresses. #103 Calculate rank in ||, post results each 600 blocks. #101 Linkchains support #91 Include addresses into knowledge graph #90 Graphics for whitepaper #88 Add bandwidth by stake #77 Launch testnet Euler #73 Test Ethereum Network Statistical Significance #52 Cyberd landing design #51 Simulation #31 Link Chain PoC | Zeronet #26 Write benchmark and test SpringRank with different amount of objects/edges #22 Parse Ethereum network and calculate SpringRank #21 Research basic chains fundamentals #15 Perfomance testing of Solana #10 Research on perfomance of consensus computers #9 Perfomance testing scenario for cyberd #8 Merged pull requests: [euler] Launch euler testnet #148 ( hleb-albau ) Cli: Add possibility to restore acc from priv keys #147 ( arturalbov ) Rank merkle proofs #144 ( arturalbov ) Setup bw params #143 ( hleb-albau ) Merkle tree implementation #141 ( arturalbov ) #139 Index out of range for cids with not calculated rank yet. #140 ( hleb-albau ) Fix http client and rank logs #137 ( hleb-albau ) [euler-dev3] New testnet #136 ( hleb-albau ) #101 Copy state before index creation #135 ( hleb-albau ) #92 Populate state with random addresses #134 ( hleb-albau ) Small fixes #131 ( arturalbov ) Parallel rank calculation #130 ( arturalbov ) Update stake index every block #129 ( hleb-albau ) #126 Update to cosmos 29 #127 ( hleb-albau ) Refactoring #125 ( hleb-albau ) Various Bug fixes #124 ( hleb-albau ) In-memory storages refactoring #123 ( arturalbov ) #114 Write bw specification #121 ( hleb-albau ) WIP #114 Add cbdbank module #120 ( hleb-albau ) Update readme #119 ( hleb-albau ) Clean up folders #118 ( arturalbov ) #103 Index transactions by signers. #117 ( hleb-albau )","title":"v0.1.0 (2019-01-06)"},{"location":"cyberd/Changelog/#v008-2018-12-11","text":"Full Changelog Implemented enhancements: Cid validation #93 Update to cosmos-sdk version 0.26.1 #79 Build node releases with cleveldb #59 Remove 'cosmosaccaddr' prefix from cyberd address #39 Closed issues: Make up cyberd landing #87 Add possibility to join for new validators. #75 Calculate rank using GPU #74 Create basic wiki cyberd indexer #71 Create cyberd PoC based on Cosmos SDK #37 Draw logo for cyberd #16 Build basic economic model #1 Merged pull requests: #76 Define Basic RPC specification #111 ( hleb-albau ) #104 Make docker container based on nvidia-gpu image #110 ( hleb-albau ) [DON'T MERGE] Add bandwidth by stake. Part 2. #108 ( arturalbov ) Add bandwidth by stake Part 1 #107 ( arturalbov ) #93 Cid validation #106 ( hleb-albau ) #78 Add guide How to join network as validator #105 ( hleb-albau ) #1 Build basic economic model #102 ( hleb-albau ) Update cosmos to 0.27.0 #100 ( hleb-albau ) Small fixes for validators joining #98 ( arturalbov ) Remove poc folder #97 ( hleb-albau ) Add possibility to join for new validators #96 ( arturalbov ) Calculate eth network significance #85 ( hleb-albau ) 74 gpu rank calculation #83 ( hleb-albau ) Remove 'cosmosaccaddr' prefix from cyberd address #82 ( arturalbov ) UPD docs_upd job #81 ( SaveTheAles ) Update cosmos-sdk version to 0.26.1 #80 ( arturalbov )","title":"v0.0.8 (2018-12-11)"},{"location":"cyberd/Changelog/#v007-2018-10-25","text":"Full Changelog Implemented enhancements: Proxy service. Add search pagination #69 Add send tokens endpoint to proxy #62 Fixed bugs: Proxy service. Search request with \"spaces\" fails #67 Non-deterministic rank calculation #66 Closed issues: Claim service: increment tx sequence manually #64 Merged pull requests: #71 Create basic wiki cyberd indexer #72 ( hleb-albau ) Proxy service. Add search pagination #70 ( arturalbov ) Proxy service. Search request with spaces fails #68 ( arturalbov ) Claim service: increment tx sequence manually #65 ( arturalbov )","title":"v0.0.7 (2018-10-25)"},{"location":"cyberd/Changelog/#v006-2018-10-24","text":"Full Changelog","title":"v0.0.6 (2018-10-24)"},{"location":"cyberd/Changelog/#v005-2018-10-23","text":"Full Changelog Implemented enhancements: [RPC] Fix small finding #57","title":"v0.0.5 (2018-10-23)"},{"location":"cyberd/Changelog/#v004-2018-10-23","text":"Full Changelog Closed issues: Service to claim cyberd zeronet tokens #61 Update cosmos-sdk to latest dev branch version #56 Perfomance Degradation: Heavy Disk Usage #50 Merged pull requests: Add send tokens endpoint to proxy #63 ( arturalbov ) Claim service #60 ( arturalbov ) #57 [RPC] Fix small finding #58 ( hleb-albau ) Update cosmos-sdk to latest dev branch version #53 ( hleb-albau )","title":"v0.0.4 (2018-10-23)"},{"location":"cyberd/Changelog/#v003-2018-10-19","text":"Full Changelog Implemented enhancements: CLI: Add \"wait_for_confirmation\" Flag #47 Fixed bugs: RPC Client: /search on non existing cid return first added cid #48 Closed issues: Write validation logic of IPFS hash for Losion Zeronet #18 Genesis Zeronet #17 Performance testing of Zeronet #4 Merged pull requests: Add cyberdproxy process to docker container. Add status endpoint #55 ( arturalbov ) Proxy rpc #54 ( arturalbov )","title":"v0.0.3 (2018-10-19)"},{"location":"cyberd/Changelog/#v002-2018-10-05","text":"Full Changelog Implemented enhancements: Cosmos PoC: Integrate Rank Calculation #43 Cosmos PoC: Extenend Standart Tendermint RPC API #42 Closed issues: Implement persistent storage for links. #40 run extra node for cyberd #20 Merged pull requests: Fix search on non existing cid #49 ( arturalbov ) Add Circle CI build job #46 ( arturalbov ) Extenend Standart Tendermint RPC API #45 ( arturalbov ) #43 Simplest Rank #44 ( hleb-albau ) #40 introduce in-memory store #41 ( hleb-albau ) #37 redesign db, app refactor #38 ( hleb-albau ) Cosmos POC: Clean up CLI #35 ( arturalbov ) Update cyberd/cosmos README #34 ( arturalbov )","title":"v0.0.2 (2018-10-05)"},{"location":"cyberd/Changelog/#v001-2018-09-25","text":"Closed issues: Make cyberd docs to be included into common wiki. #32 Write LT/NLT logic to Losion Zeronet #19 Research basic technologies #14 Research basic papers #13 Perfomance testing of Ethermint #12 Perfomance testing of Plasma #11 Perfomance testing of PoA networks #7 Cleanup paper #6 Perfomance testing of EOS #3 Merged pull requests: Genesis zeronet: Cosmos SDK #33 ( arturalbov ) [WIP] 21 calculate spring rank for ethereum #23 ( hleb-albau ) Fixing typo #2 ( trummax ) * This Change Log was automatically generated by github_changelog_generator","title":"v0.0.1 (2018-09-25)"},{"location":"cyberd/Contributing/","text":"Contributing to cyberd \u00b6 Thank you for considering a contribution to cyberd ! This guide explains how to: * Get started * Development workflow * Get help if you encounter trouble Get in touch \u00b6 Before starting to work on a feature or a fix, please open an issue to discuss the use case or bug with us. This can save both you and us a lot of time. For any non-trivial change, we'll ask you to create a short design document explaining: Why is this change done? What's the use case? What test cases should it have? What could go wrong? How will it roughly be implemented? (We'll happily provide code pointers to save you time) Development Workflow \u00b6 Development Setup \u00b6 Please, use development environment setup guide . Creating Commits And Writing Commit Messages \u00b6 The commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages: Keep commits discrete: avoid including multiple unrelated changes in a single commit Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation Include GitHub issue in the commit message on a first line at the beginning. Example: #123 Refactor CONTRIBUTING.md --Add Creating Commits And Writing Commit Messages Section Submitting Your Change \u00b6 After you submit your pull request, a core developer will review it. It is normal that this takes several iterations, so don't get discouraged by change requests. They ensure the high quality that we all enjoy. Getting Help \u00b6 If you run into any trouble, please reach out to us on the issue you are working on. Our Thanks \u00b6 We deeply appreciate your effort toward improving cyberd. For any contribution, large or small, you will be immortalized in the release notes for the version you've contributed to.","title":"Contributing"},{"location":"cyberd/Contributing/#contributing-to-cyberd","text":"Thank you for considering a contribution to cyberd ! This guide explains how to: * Get started * Development workflow * Get help if you encounter trouble","title":"Contributing to cyberd"},{"location":"cyberd/Contributing/#get-in-touch","text":"Before starting to work on a feature or a fix, please open an issue to discuss the use case or bug with us. This can save both you and us a lot of time. For any non-trivial change, we'll ask you to create a short design document explaining: Why is this change done? What's the use case? What test cases should it have? What could go wrong? How will it roughly be implemented? (We'll happily provide code pointers to save you time)","title":"Get in touch"},{"location":"cyberd/Contributing/#development-workflow","text":"","title":"Development Workflow"},{"location":"cyberd/Contributing/#development-setup","text":"Please, use development environment setup guide .","title":"Development Setup"},{"location":"cyberd/Contributing/#creating-commits-and-writing-commit-messages","text":"The commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages: Keep commits discrete: avoid including multiple unrelated changes in a single commit Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation Include GitHub issue in the commit message on a first line at the beginning. Example: #123 Refactor CONTRIBUTING.md --Add Creating Commits And Writing Commit Messages Section","title":"Creating Commits And Writing Commit Messages"},{"location":"cyberd/Contributing/#submitting-your-change","text":"After you submit your pull request, a core developer will review it. It is normal that this takes several iterations, so don't get discouraged by change requests. They ensure the high quality that we all enjoy.","title":"Submitting Your Change"},{"location":"cyberd/Contributing/#getting-help","text":"If you run into any trouble, please reach out to us on the issue you are working on.","title":"Getting Help"},{"location":"cyberd/Contributing/#our-thanks","text":"We deeply appreciate your effort toward improving cyberd. For any contribution, large or small, you will be immortalized in the release notes for the version you've contributed to.","title":"Our Thanks"},{"location":"cyberd/bandwidth/","text":"Minimal Bandwidth Spec \u00b6 bounded stake . Stake, that deducted from your acc coins and put as deposit to take part in consensus. Due to passive inflation model and slashing, deposit not match 1-to-1 to final reward. So, for example, stakeholders may wish to set up a script, that will periodically withdraw and rebound rewards to increase their share( bounded stake ). active stake . Currently available for direct transfer, not-bounded stake. bandwidth stake . Sum of active stake and bounded stake for given account. Model \u00b6 Cyberd use a very simple bandwidth model. Main goal of that model is to reduce daily network growth to given constant, say 3gb per day. Thus, here we introduce resource credits (RS). Each message type have assigned RS cost. There is constant DesirableNetworkBandwidthForRecoveryPeriod determining desirable for RecoveryPeriod spent RS value. RecoveryPeriod is defining how fast user can recover their bandwidth from 0 to user max bandwidth. User has maximum RS proportional to his stake by formula user_max_rc = bandwidth_stake% * DesirableNetworkBandwidthForRecoveryPeriod . There is period AdjustPricePeriod summing how much RS was spent for that period( AdjustPricePeriodTotalSpent ). Also, there is constant AdjustPricePeriodDesiredSpent , used to calculate network loading. AdjustPricePeriodTotalSpent/AdjustPricePeriodDesiredSpent ratio defined so called current price multiplier . If network usage is low, price multiplier adjust message cost(by simply multiplying) to allow user with lower stake to do more transactions. If resource demand increase, price multiplier goes >1 thus increase messages cost and limiting final tx count for some long-term period(RC recovery will be < then RC spending). Bandwidth stake change \u00b6 There are only few ways to change acc bandwidth stake : Direct coins transfer. When distribution payouts occurs. For example, when validator change his commission rates, all delegations will be automatically unbounded. Another example, delegator itself unbound some part or full share. Implementation details. All this cases will change user active stake , so we define bank hook CoinsTransferHook . Due to inconsistent stateupon hook invoking (coins can be substructed, but deposit not added yet), we should update user max RC only after deliver tx occur.","title":"Bandwidth Specification"},{"location":"cyberd/bandwidth/#minimal-bandwidth-spec","text":"bounded stake . Stake, that deducted from your acc coins and put as deposit to take part in consensus. Due to passive inflation model and slashing, deposit not match 1-to-1 to final reward. So, for example, stakeholders may wish to set up a script, that will periodically withdraw and rebound rewards to increase their share( bounded stake ). active stake . Currently available for direct transfer, not-bounded stake. bandwidth stake . Sum of active stake and bounded stake for given account.","title":"Minimal Bandwidth Spec"},{"location":"cyberd/bandwidth/#model","text":"Cyberd use a very simple bandwidth model. Main goal of that model is to reduce daily network growth to given constant, say 3gb per day. Thus, here we introduce resource credits (RS). Each message type have assigned RS cost. There is constant DesirableNetworkBandwidthForRecoveryPeriod determining desirable for RecoveryPeriod spent RS value. RecoveryPeriod is defining how fast user can recover their bandwidth from 0 to user max bandwidth. User has maximum RS proportional to his stake by formula user_max_rc = bandwidth_stake% * DesirableNetworkBandwidthForRecoveryPeriod . There is period AdjustPricePeriod summing how much RS was spent for that period( AdjustPricePeriodTotalSpent ). Also, there is constant AdjustPricePeriodDesiredSpent , used to calculate network loading. AdjustPricePeriodTotalSpent/AdjustPricePeriodDesiredSpent ratio defined so called current price multiplier . If network usage is low, price multiplier adjust message cost(by simply multiplying) to allow user with lower stake to do more transactions. If resource demand increase, price multiplier goes >1 thus increase messages cost and limiting final tx count for some long-term period(RC recovery will be < then RC spending).","title":"Model"},{"location":"cyberd/bandwidth/#bandwidth-stake-change","text":"There are only few ways to change acc bandwidth stake : Direct coins transfer. When distribution payouts occurs. For example, when validator change his commission rates, all delegations will be automatically unbounded. Another example, delegator itself unbound some part or full share. Implementation details. All this cases will change user active stake , so we define bank hook CoinsTransferHook . Due to inconsistent stateupon hook invoking (coins can be substructed, but deposit not added yet), we should update user max RC only after deliver tx occur.","title":"Bandwidth stake change"},{"location":"cyberd/cyberd/","text":"cyberd: Computing the knowledge from web3 \u00b6 Notes on euler release of cyber:// protocol reference implementation using Go. cyber\u2022Congress : @xhipster, @litvintech, @hleb-albau, @arturalbov, @belya Abstract \u00b6 A consensus computer allows computing of provably relevant answers without opinionated blackbox intermediaries such as Google, Youtube, Amazon or Facebook. Stateless content-addressable peer-to-peer communication networks such as IPFS and stateful consensus computers such as Ethereum provide part of the solution, but there are at least three problems associated with implementation. Of course, the first problem is the subjective nature of relevance. The second problem is that it is hard to scale consensus computer for a huge knowledge graph. The third problem is that the quality of such a knowledge graph will suffer from different attack surfaces such as sybil, selfish behaviour of interacting agents. In this paper, we (1) define a protocol for provable consensus computing of relevance between IPFS objects based on Tendermint consensus of cyber\u2022rank computed on GPU, (2) discuss implementation details and (3) design distribution and incentive scheme based on our experience. We believe the minimalistic architecture of the protocol is critical for the formation of a network of domain-specific knowledge consensus computers. As a result of our work some applications never existed before emerge. We expand the work including our vision on features we expect to work up to Genesis. Introduction to web3 \u00b6 Original protocols of the Internet such as TCP/IP, DNS, URL, and HTTPS brought a web into the point where it is now. Along with all the benefits they have created they brought more problem to the table. Globality being a vital property of the web since inception is under real threat. The speed of connections degrades with network grow and from ubiquitous government interventions into privacy and security of web users. One property, not evident in the beginning, become important with everyday usage of the Internet: its ability to exchange permanent hyperlinks thus they would not break after time has passed . Reliance on \"one at a time ISP\" architecture allows governments effectively censor packets. It is the last straw in a conventional web stack for every engineer who is concerned about the future of our children. Other properties while being not so critical are very desirable: offline and real-time. Average internet user being offline must have the ability to work with the state it has and after acquiring connection being able to sync with global state and continue to verify state's validity in realtime while having a connection. Now, these properties offered on the app level while such properties must be integrated into lower level protocols. The emergence of a web3 stack creates an opportunity for a new kind of Internet. We call it web3. It has a promise to remove problems of a conventional protocol stack and add to the web better speed and more accessible connection. However, as usual in a story with a new stack, new problems emerge. One of such problem is general-purpose search. Existing general-purpose search engines are restrictive centralized databases everybody forced to trust. These search engines were designed primarily for client-server architecture based on TCP/IP, DNS, URL and HTTPS protocols. Web3 creates a challenge and opportunity for a search engine based on developing technologies and specifically designed for them. Surprisingly the permission-less blockchain architecture itself allows organizing general purpose search engine in a way inaccessible for previous architectures. On adversarial examples problem \u00b6 Conventional architecture of search engines where one entity process and rank all the shit suffers from one hard but the particular problem that still has not been solved even by brilliant Google scientists: adversarial examples problem . The problem Google acknowledge is that it is rather hard to algorithmically reason either this particular sample is adversarial or not independently on how cool the learning technology is. Obviously, a cryptoeconomic approach can change beneficiaries in this game effectively removing possible sybil attack vectors and removing the necessity to make a decision on example crawling and meaning extraction from one entity to the whole world. Learning sybil-resistant model will probably lead to orders of magnitude more predictive results. Cyber protocol at euler \u00b6 compute euler inception of cyber protocol based on Satoshi lottery and CBD balances def knowledge graph state take cyberlinks check the validity of signatures check bandwidth limit check the validity of CIDv0 if signatures, bandwidth limit, and CIDv0 are ok than cyberlink is valid for every valid cyberlink emit prediction as an array of CIDv0 every round calculate cyber\u2022rank deltas for the knowledge graph every round distribute CYB based on defined rules apply more secure consensus state based on CBD balances 6 times up to merkle Knowledge graph \u00b6 We represent a knowledge graph as a weighted graph of directed links between content addresses or content identifications or CIDs. In this paper, we will use them as synonyms. Content addresses are essentially a web3 links. Instead of using nonobvious and mutable thing: https://github.com/cosmos/cosmos/blob/master/WHITEPAPER.md we can use pretty much exact thing: Qme4z71Zea9xaXScUi6pbsuTKCCNFp5TAv8W5tjdfH7yuHhttps Using content addresses for building a knowledge graph we get so much needed superpowers of ipfs - like p2p protocols for a search engine: mesh-network future proof interplanetary tolerant accessible technology agnostic Web3 agents generate our knowledge graph. Web3 agents include itself to the knowledge graph by transacting only once. Thereby they prove the existence of private keys for content addresses of revealed public keys. Our euler implementation is based on cosmos-sdk identities and cidv0 content addresses. Web 3 agents generate knowledge graph by applying cyberlinks. Cyberlinks \u00b6 To understand cyberlinks, we need to understand the difference between URL link and IPFS link. URL link points to the location of content, but IPFS link point to the content itself. The difference in web architecture based on location links and content links is drastical, hence require new approaches. Cyberlink is an approach to link two content addresses semantically. QmdvsvrVqdkzx8HnowpXGLi88tXZDsoNrGhGvPvHBQB6sH.QmdSQ1AGTizWjSRaVLJ8Bw9j1xi6CGLptNUcUodBwCkKNS This cyberlink means that cyberd presentation on cyberc0n is referencing Tezos whitepaper. A concept of cyberlink is a convention around simple semantics of communication format in any peer to peer network: <content-address x>.<content-address y> You can see that cyberlink represents a link between two links. Easy peasy! Cyberlink is a simple yet powerful semantic construction for building a predictive model of the universe. Cyberlinks can form link chains if exist a series of two cyberlinks from one agent in which the second link in the first cyberlink is equal to the first link in the second cyberlink: <content-address x>.<content-address y> <content-address y>.<content-address z> Using this simple principle, all interacting agents can reach consensus around interpreting clauses. So link chains are helpful for interpreting rich communications around relevance. Also using the following link: QmNedUe2wktW65xXxWqcR8EWWssHVMXm3Ly4GKiRRSEBkn the one can signal the start and stop of execution in the knowledge graph. If web3 agents expand native IPFS links with something semantically richer as DURA links than web3 agents can easier to reach consensus on the rules for program execution. Indeed, DURA protocol is a proper implementation of a cyberlinks concept. euler implementation of cyberlinks based on DURA specification is available in .cyber app of browser cyb . Based on cyberlinks we can compute the relevance of subjects and objects in a knowledge graph. That is why we need a consensus computer. Notion of consensus computer \u00b6 Consensus computer is an abstract computing machine that emerges from agents interactions. A consensus computer has a capacity in terms of fundamental computing resources such as memory and computing. To interact with agents, a computer needs a bandwidth. Ideal consensus computer is a computer in which: the sum of all *individual agents* computations and memory is equal to the sum of all verified by agents computations and memory of a *consensus computer* We know that: verifications of computations < computations + verifications of computations Hence we will not be able to achieve an ideal consensus computer ever. CAP theorem and scalability trilemma also prove this statement. However, this theory can work as a performance indicator of a consensus computer. The euler implementation is a 64-bit consensus computer of the relevance for 64-byte string space that is as far from ideal at least as 1/146. We must bind computational, storage and bandwidth supply of relevance machine with maximized demand of queries. Computation and storage in case of basic relevance machine can be easily predicted based on bandwidth, but bandwidth requires a limiting mechanism. Bandwidth limiting mechanism is work in progress. Current notes on implementation are in the docs . So agents must have CYB tokens in accordance to their will of learning the knowledge graph. However, proposed mechanics of CYB tokens work not only as spam protection but as the economic regulation mechanism to align the ability of validators to process knowledge graph and market demand for processing. Relevance machine \u00b6 Relevance machine is a machine that transition knowledge graph state based on some reputation score of agents. This machine enables simple construction for search question querying and answers delivering. The reputation score is projected on every agent's cyberlink. A simple rule prevents agents abuse: one content address can be voted by a token only once. So it does not matter for ranking from how much accounts you voted. The only sum of their balances matters. A useful property of a relevance machine is that it must have inductive reasoning property or follows the blackbox principle. She must be able to interfere predictions without any knowledge about objects except who linked, when linked and what was linked. If we assume that a consensus computer must have some information about linked objects the complexity of such model growth unpredictably, hence a requirement for a computer for memory and computations. That is, deduction of meaning inside consensus computer is expensive thus our design depends on the blindness assumption. Instead of deducting a meaning inside consensus computer we design a system in which meaning extraction is incentivized because agents need CYB to compute relevance. Also, thanks to content addressing the relevance machine following the blackbox principle do not need to store the data but can effectively operate on it. Human intelligence organized in a way to prune none-relevant and none-important memories with time has passed. The same way can do relevance machine. Also, one useful property of relevance machine is that it needs to store neither past state nor full current state to remain useful, or more precisely: relevant . So relevance machine can implement aggressive pruning strategies such as pruning all history of knowledge graph formation or forgetting links that become non-relevant. The pruning group of features can be implemented in nash . euler implementation of relevance machine is based on the most straightforward mechanism which is called cyber\u2022Rank. cyber\u2022Rank \u00b6 Ranking using consensus computer is hard because consensus computers bring serious resource bounds. e.g. Nebulas still fail to deliver something useful on-chain. First, we must ask ourselves why do we need to compute and store the rank on-chain, and not go Colony or Truebit way? If rank computed inside consensus computer, you have an easy content distribution of the rank as well as an easy way to build provable applications on top of the rank. Hence we decided to follow more cosmic architecture. In the next section, we describe the proof of relevance mechanism which allows the network to scale with the help of domain-specific relevance machines that works in parallel. Eventually, relevance machine needs to find (1) deterministic algorithm that allows computing a rank for a continuously appended network to scale the consensus computer to orders of magnitude that of Google. Perfect algorithm (2) must have linear memory and computation complexity. The most importantly it must have (3) highest provable prediction capabilities for the existence of relevant links. After some research, we found that we can not find silver bullet here. We find an algorithm that probably satisfies our criteria: SpringRank . An original idea of the algorithm came to Caterina from physics. Links represented as a system of springs with some energy, and the task of computing the ranks is the task of finding a relaxed state of springs. However, we got at least 3 problems with SpringRank: 1. We were not able to implement it on-chain fast using Go in euler . 2. We were not able to prove it for knowledge graph because we did not have provable knowledge graph yet. 3. Also, we were not able to prove it by applying it for the Ethereum blockchain during computing the genesis file for euler . It could work, but for the time being it is better to call this kind of distribution a lottery. So we decided to find some more basic bulletproof way to bootstrap the network: a rank from which Lary and Sergey have bootstrapped a previous network. The problem with original PageRank is that it is not resistant to sybil attacks. Token weighted PageRank limited by token-weighted bandwidth do not have inherent problems of naive PageRank and is resistant to sybil attacks. For the time being, we will call it cyber\u2022Rank until something better emerge. In the centre of spam protection system is an assumption that write operations can be executed only by those who have a vested interest in the evolutionary success of a relevance machine. Every 1% of stake in consensus computer gives the ability to use 1% of possible network bandwidth and computing capabilities. As nobody uses all possessed bandwidth, we can safely use 10x fractional reserves with 2-minute recalculation target. We would love to discuss the problem of vote buying mainly. Vote buying by itself is not such bad. The problem with vote buying appears in the systems where voting affects the allocation of inflation in the system like Steem or any state-based system. So vote buying can become easily profitable for adversary employing a zero-sum game without a necessity to add value. Our original idea of a decentralized search was based on this approach, but we reject this idea completely removing incentive on consensus level for knowledge graph formation completely. In our setting in which every participant must bring some value to the system to affect predictive model vote buying become NP-hard problem hence is useful for the system. To switch from one algorithm to another, we are going to make simulations and experiment with economic a/b testing based on winning chains through hard spoons. Consensus computer based on relevance machine for cyber\u2022Rank can answer and deliver relevant results for any given search request in the 64 byte CID space. However, to build a network of domain-specific relevance machines, it is not enough. Consensus computers must have the ability to prove relevance for each other. Proof of relevance \u00b6 We design a system under the assumption that regarding search such thing as bad behaviour does not exist as anything bad can be in the intention of finding answers. Also, this approach significantly reduces attack surfaces. Ranks are computed on the only fact that something has been searched, thus linked and as a result, affected the predictive model. A good analogy is observing in quantum mechanics. That is why we do not need such things as negative voting. Doing this we remove subjectivity out of the protocol and can define proof of relevance. Rank state = rank values stored in a one-dimensional array and merkle tree of those values Each new CID gets a unique number. The number starts from zero and incrementing by one for each new CID. So that we can store rank in a one-dimensional array where indices are CID numbers. Merkle Tree calculated based on RFC-6962 standard . Since rank stored in a one-dimensional array where indices are CID numbers (we could say that it ordered by CID numbers) leaves in merkle tree from left to right are SHA-256 hashes of rank value. Index of the leaf is CID number. It helps to easily find proofs for specified CID ( log n iterations where n is a number of leaves). To store merkle tree is necessary to split the tree into subtrees with a number of leaves multiply of the power of 2. The smallest one is obviously subtree with only one leaf (and therefore height == 0 ). Leaf addition looks as follows. Each new leaf is added as subtree with height == 0 . Then sequentially merge subtrees with the same height from right to left. Example: \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u2502 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u2502 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u2502 \u2502 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u2502 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u2502 (5-leaf) (6-leaf) (7-leaf) To get merkle root hash - join subtree roots from right to left. Rank merkle tree can be stored differently: Full tree - all subtrees with all leaves and intermediary nodes Short tree - contains only subtrees roots The trick is that full tree is only necessary for providing merkle proofs. For consensus purposes and updating tree, it's enough to have a short tree . To store merkle tree in database use only a short tree . Marshaling of a short tree with n subtrees (each subtree takes 40 bytes): <subtree_1_root_hash_bytes><subtree_1_height_bytes> .... <subtree_n_root_hash_bytes><subtree_n_height_bytes> For 1,099,511,627,775 leaves short tree would contain only 40 subtrees roots and take only 1600 bytes. Let us denote rank state calculation: p - rank calculation period lbn - last confirmed block number cbn - current block number lr - length of rank values array For rank storing and calculation we have two separate in-memory contexts: Current rank context. It includes the last calculated rank state (values and merkle tree) plus all links and user stakes submitted to the moment of this rank submission. New rank context. It's currently calculating (or already calculated and waiting for submission) rank state. Consists of new calculated rank state (values and merkle tree) plus new incoming links and updated user stakes. Calculation of new rank state happens once per p blocks and going in parallel. The iteration starts from block number that \u2261 0 (mod p) and goes till next block number that \u2261 0 (mod p) . For block number cbn \u2261 0 (mod p) (including block number 1 cause in cosmos blocks starts from 1): Check if the rank calculation is finished. If yes then go to (2.) if not - wait till calculation finished (actually this situation should not happen because it means that rank calculation period is too short). Submit rank, links and user stakes from new rank context to current rank context. Store last calculated rank merkle tree root hash. Start new rank calculation in parallel (on links and stakes from current rank context). For each block: All links go to a new rank context. New coming CIDs gets rank equals to zero. We could do it by checking last CIDs number and lr (it equals the number of CIDs that already have rank). Then add CIDs with number >lr to the end of this array with the value equal to zero. Update current context merkle tree with CIDs from the previous step Store latest merkle tree from current context (let us call it last block merkle tree). Check if new rank calculation finished. If yes go to (4.) if not go to next block. Push calculated rank state to new rank context. Store merkle tree of newly calculated rank. To sum up. In current rank context , we have rank state from last calculated iteration (plus, every block, it updates with new CIDs). Moreover, we have links and user stakes that are participating in current rank calculation iteration (whether it finished or not). The new rank context contains links and stakes that will go to next rank calculation and newly calculated rank state (if a calculation is finished) that waiting for submitting. If we need to restart node firstly, we need to restore both contexts (current and new). Load links and user stakes from a database using different versions: 1. Links and stakes from last calculated rank version v = lbn - (lbn mod n) go to current rank context. 2. Links and stakes between versions v and lbn go to new rank context. Also to restart node correctly, we have to store following entities in database: Last calculated rank hash (merkle tree root) A newly calculated rank short merkle tree Last block short merkle tree With last calculated rank hash and newly calculated rank merkle tree we could check if the rank calculation was finished before node restart. If they are equal, then rank wasn't calculated, and we should run the rank calculation. If not we could skip rank calculation and use newly calculated rank merkle tree to participate in consensus when it comes to block number cbn \u2261 0 (mod p) (rank values will not be available until rank calculation happens in next iteration. Still validator can participate in consensus so nothing bad). Last block merkle tree necessary to participate in consensus till the start of next rank calculation iteration. So, after the restart we could end up with two states: 1. Restored current rank context and new rank context without rank values (links, user stakes, and merkle tree). 2. Restored current rank context without rank values. Restored new rank context only with links and user stakes. A node can participate in consensus but cannot provide rank values (and merkle proofs) till two rank calculation iterations finished (current and next). Search index should be run in parallel and do not influence the work of the consensus machine. The validator should be able to turn off index support. Maybe even make it a separate daemon. Base idea. Always submit new links to index and take rank values from current context (insert in sorted array operation). When a new rank state is submitted trigger index to update rank values and do sortings (in most cases new arrays will be almost sorted). Need to solve the problem of adjusting arrays capacity (not to copy arrays each time newly linked cid added). A possible solution is to adjust capacity with reserve before resorting array. Todo: Therefore for building index, we need to find a sorting algorithm that will be fast on almost sorted arrays. Also, we should implement it for GPU so it should better be parallelizable: Mergesort(Timsort), Heapsort, Smoothsort ... Now we have proof of rank of any given content address. While the relevance is still subjective by nature, we have a collective proof that something was relevant for some community at some point in time. For any given CID it is possible to prove the relevance Using this type of proof any two IBC compatible consensus computers can proof the relevance to each other so that domain-specific relevance machines can flourish. Thanks to inter-blockchain communication protocol you basically can launch your own domain-specific search engine either private or public by forking cyberd which is focused on the common public knowledge . So in our search architecture, domain-specific relevance machine can learn from common knowledge. We are going to work on IBC during smith implementation. In our relevance for commons euler implementation proof of relevance root hash is computed on Cuda GPUs every round. Speed and scalability \u00b6 We need speedy confirmation times to feels like the usual web app. It is a strong architecture requirement that shape an economic topology and scalability of the cyber protocol. Proposed blockchain design is based on Tendermint consensus algorithm with 146 validators and has very fast 1 second finality time. Average confirmation timeframe at half the second with asynchronous interaction make complex blockchain search almost invisible for agents. Let us say that our node implementation based on cosmos-sdk can process 10k transactions per second. Thus every day at least 8.64 million agents can submit 100 cyberlinks each and impact results simultaneously. That is enough to verify all assumptions in the wild. As blockchain technology evolves we want to check that every hypothesis work before scale it further. Moreover, proposed design needs demand for full bandwidth in order the relevance become valuable. That is why we strongly focus on accessible, but provable distribution to millions from inception. Implementation in a browser \u00b6 We wanted to imagine how that could work in a web3 browser. To our disappointment we was not able to find the web3 browser that can showcase the coolness of the proposed approach in action. That is why we decide to develop the web3 browser cyb that has sample application .cyber for interacting with cyber:// protocol. From Inception to Genesis \u00b6 It is trivial to develop euler like proof-of-concept implementation, but it is hard to achieve stable protocol merkle a lot of CYB value on which can exist. euler is Inception that already happened, merkle is Genesis that is far away. That is why we decide to innovate a bit on the going main net process. We do not have CYB balances and rank guaranties before merkle but we can have exponentially growing semantic core which can be improved based on measurements and observations during development and gradual transfer of value since euler . So think that Genesis or merkle is very stable and can store semantic core and value, but all releases before can store the whole semantic core and only part of the value you would love to store due to weak security guarantees. The percents of CYB value to be distributed based on CBD balances: euler = 1 smith = 4 darwin = 8 turing = 15 nash = 21 weiner = 25 merkle = 27 To secure the value of CYB before Genesis 100 CBD ERC-20 tokens are issued by cyberFoundation . So snapshot balances are computed 7 times based on CBD. Essentially CBD substance is distributed by cyberFoundation in the following proportion: Proof-of-use: 70% is allocated to web3 agents according to some probabilistic algorithm. E.g., first euler proof-of-use distribution we call Satoshi Lottery is allocated to key owned Ethereum addresses based on ongoing research. First allocation is based on SpringRank. Proof-of-code: 15% is allocated for direct contribution to the code base. E.g., as assigned by cyberFoundation to cyberCongress contribution including team is 11.2% and the other 3.8% allocated to developers community projects such as Gitcoin community and cyberColony based experimental organization. Proof-of-value: 15% is allocated for a direct contribution of funds. 8% of this value either has been already contributed nor has some reservation for ongoing contributions by close friends and 7% is going to be distributed during Eos-like auction not defined precisely yet. All contribution from the auction will go to Aragon based cyberFoundation and will be managed by CBD token holders. Details of code and value distribution can be produced by cyberFoundation. Except for 7 CBD based distributions, CYB tokens can be created only by validators based on staking and slashing parameters. The basic consensus is that newly created CYB tokens are distributed to validators as they do the essential work to make relevance machine run both regarding energy consumed for computation and cost for storage capacity. So validators decide where the tokens can flow further. Validators incentive \u00b6 Validators are the essential building block of the proposed architecture. Hence we want to bring them a better incentive to participate before the main net. In our case validators will compute and process requests for billions edge knowledge graph hence it would be naive to expect that it is possible to expect to prepare such a network for production for free. In the beginning, inflation must be high enough to compensate risks of early investments into the ecosystem. This is approximation of year inflation expressed in percents defined for testnets: euler = 200 smith = 134 darwin = 90 turing = 60 nash = 40 weiner = 27 merkle = 18 The scheme motivates developers to release earlier to be less diluted from holding CBD and honour validators if development is going slower than expected. After Genesis starting inflation rate will become fixed at 1 000 000 000 CYB per block. Join . Once we have validators, we can think about first million web3 agents. Satoshi Lottery \u00b6 Satoshi Lottery is the inception version of the proof-of-use distribution that already happens in the tenth birthday of Bitcoin Genesis at 3 Jan 2019. It is a highly experimental way of provable distribution. The basic idea is that a comprehensive set of agents receive CYB tokens because they behave well. The basic algorithm is of 5 steps: - Compute SpringRank for Ethereum addresses - Sort by SpringRank - Filter top 1M addresses by SpringRank - Compute CYB balances based on CBD - Create genesis for cyber protocol Translation todo: Tolik's article have to be translated here. Next test net we will improve the logic of the lottery based on received data and repeat this every test net until Genesis. Soon you will be able to verify either you were lucky enough to receive CYB or not just searching your ethereum address. If you were, you will be able to claim CYB even without compromising your Ethereum keys. Inception \u00b6 The genesis file for euler containing lottery results and CBD based distribution has the following cid: Qma5U4joYWEf41ku16g9cQr6fADsxCPsiWeYZBxpnpu1D4 132307 accounts with 8 274 000 000 000 000 CYB tokens has been created in Inception of the network. Amount of created tokens is consist of the following sources: - 1% of CYB value allocated to euler testnet based on proof-of-use distribution as planned - 0.7% of CYB value allocated to euler testnet based on proof-of-value and proof-of-code distribution except 11.8 CBD due to bug. Appropriate corrections will be done during scheduled hardfork. Possible applications \u00b6 A lot of cool applications can be built on top of proposed architecture: Web3 browsers . It easy to imagine the emergence of a full-blown blockchain browser. Currently, there are several efforts for developing browsers around blockchains and distributed tech. Among them are Beaker, Mist, Brave, and Metamask. All of them suffer from trying to embed web2 in web3. Our approach is a bit different. We consider web2 as the unsafe subset of web3. That is why we decide to develop a web3 browser that can showcase the cyber approach to answer questions better. Programmable semantic cores . Currently, the most popular keywords in a gigantic semantic core of Google are keywords of apps such as youtube, facebook, github, etc. However, developers have very limited possibility to explain Google how to better structure results. The cyber approach brings this power back to developers. On any given user input string in any application relevant answer can be computed either globally, in the context of an app, a user, a geo or in all of them combined. Search actions . Proposed design enable native support for blockchain asset related activity. It is trivial to design applications which are (1) owned by creators, (2) appear right in search results and (3) allow a transact-able call to actions with (4) provable attribution of a conversion to search query. e-Commerce has never been so easy for everybody. Offline search . IPFS make possible easy retrieval of documents from surroundings without a global internet connection. cyberd can itself can be distributed using IPFS. That creates a possibility for ubiquitous offline search. Command tools . Command line tools can rely on relevant and structured answers from a search engine. That practically means that the following CLI tool is possible to implement > cyberd earn using 100 gb hdd Enjoy the following predictions: - apt install go-filecoin: 0.001 BTC per month per GB - apt install siad: 0.0001 BTC per month per GB - apt install storjd: 0.00008 BTC per month per GB According to the best prediction, I made a decision try `mine go-filecoin` Git clone ... Building go-filecoin Starting go-filecoin Creating a wallet using @xhipster seed You address is .... Placing bids ... Waiting for incoming storage requests ... Search from CLI tools will inevitably create a highly competitive market of a dedicated semantic core for bots. Autonomous robots . Blockchain technology enables the creation of devices which can earn, store, spend and invest digital assets by themselves. If a robot can earn, store, spend and invest she can do everything you can do What is needed is a simple yet powerful state reality tool with the ability to find particular things. cyberd offers minimalistic but continuously self-improving data source that provides necessary tools for programming economically rational robots. According to top-10000 english words the most popular word in English is defined article the that means a pointer to a particular thing. That fact can be explained as the following: particular things are the most important for us. So the nature of our current semantic computing is to find unique things. Hence the understanding of unique things become essential for robots too. Language convergence . A programmer should not care about what language do the user use. We don't need to know about what language user is searching in. Entire UTF-8 spectrum is at work. A semantic core is open so competition for answering can become distributed across different domain-specific areas, including semantic cores of different languages. The unified approach creates an opportunity for cyber\u2022Bahasa. Since the Internet, we observe a process of rapid language convergence. We use more truly global words across the entire planet independently of our nationality, language and race, Name the Internet. The dream of truly global language is hard to deploy because it is hard to agree on what means what. However, we have the tools to make that dream come true. It is not hard to predict that the shorter a word, the more its cyber\u2022rank will be. Global publicly available list of symbols, words, and phrases sorted by cyber\u2022rank with corresponding links provided by cyberd can be the foundation for the emergence of genuinely global language everybody can accept. Recent scientific advances in machine translation are breathtaking but meaningless for those who wish to apply them without Google scale trained model. Proposed cyber\u2022rank offers precisely this. This is sure not the exhaustive list of possible applications but very exciting, though. Economic protection is smith \u00b6 About private knowledge on relevance. Explain the difference between private cyberlinks and private relevance machines. The plan for learning the beast. How cyberlink ipfs, wiki, bitcoin and ethereum? Ability to evolve is darwin \u00b6 About the importance of alternative implementation. turing is about computing more \u00b6 Ability to programmatically extend state based on proven knowledge graph is of paramount importance. Thus we consider that WASM programs will be available for execution in cyber consensus computer on top of knowledge graph. Our approach to the economics of consensus computer is that users buy an amount of RAM, CPU, and GPU as they want to execute programs. OpenCypher or GraphQL like language can be provided to explore semantics of the knowledge graph. The following list is simple programs we can envision that can be built on top of simple relevance machine. Self prediction . A consensus computer can continuously build a knowledge graph by itself predicting the existence of cyberlinks and applying these predictions to a state of itself. Hence a consensus computer can participate in the economic consensus of the cyber protocol. Universal oracle. A consensus computer can store the most relevant data in the key-value store, where the key is cid and value is bytes of actual content. She is doing it by making a decision every round about which cid value she want to prune and which she wants to apply based on the utility measure of content addresses in the knowledge graph. To compute utility measure validators check availability and size of content for the top-ranked content address in the knowledge graph, then weight on the size of cids and its ranks. The emergent key-value store will be available to write for consensus computer only and not agents, but values can be used in programs. Proof of location . It is possible to construct cyberlinks with proof-of-location based on some existing protocol such as Foam . So location-based search also can become provable if web3 agents will mine triangulations and attaching proof of location for every link chain. Proof of web3 agent . Agents are a subset of content addresses with one fundamental property: consensus computer can prove the existence of private keys for content addresses for the subset of knowledge graph even if those addresses has never transacted in its own chain. Hence it is possible to compute much provable stuff on top of that knowledge. E.g., some inflation can be distributed to addresses that have never transacted in the cyber network but have the provable link. Motivation for read requests . It would be great to create cybernomics not only for write requests to consensus computer but from read requests also. So read requests can be two order of magnitude cheaper, but guaranteed. Read requests to a search engine can be provided by the second tier of nodes which earn CYB tokens in state channels. We consider implementing state channels based on HTLC and proof verification which unlocks amount earned for already served requests. Prediction markets on link relevance . We can move the idea further by the ranking of knowledge graph based on prediction market on links relevance. An app that allow betting on link relevance can become a unique source of truth for the direction of terms as well as motivate agents to submit more links. Private cyberlinks . Privacy is foundational. While we are committed to privacy achieving implementation of private cyberlinks is unfeasible for our team up to Genesis. Hence it is up to the community to work on wasm programs that can be executed on top of the protocol. The problem is to compute cyberRank based on cyberlink submitted by a web3 agent without revealing neither previous request nor public keys of a web3 agent. Zero-knowledge proofs, in general, are very expensive. We believe that privacy of search should be must by design, but not sure that we know how to implement it. Coda like recursive snarks and mimblewimble constructions, in theory, can solve part of the privacy issue, but they are new, untested and anyway will be more expensive regarding computations than a transparent alternative. In a search for equilibria is nash \u00b6 We need to find answers for a lot of hard questions regarding consensus variables and its default values. So we decide to stick to a community generated feedback on the road to Genesis and continuously adjust them to keep going better. On scalability trilemma ... Decentralization comes with costs and slowness. We want to find a good balance between speed, reliance, and ability to scale, as we believe all three are sensitive for widespread web3 adoption. That is the area of research for us now. We need real economic measurements to apply a scientific method for this class of challenges. On faster evolution at weiner \u00b6 The primary purpose of wiener stage is to be able to update the consensus of a network from a consensus computer state using some on-chain upgrade mechanism. Evolvability and governance are connected tightly. Ability to reflect input from the world and output changes of itself is an essential evolutionary feature. Hence, thanks to cosmos-sdk euler implementation have basic but compelling features such as on-chain voting with vetos and abstain that drastically simplified open discussions for a change. So we are going to use this feature from the inception of the network. However, we can go in a different direction than cosmos-sdk offers. Following ideas from Tezos in weiner we can define the current state of a protocol as the immutable content address that included in round merkle root. Also instead of formal governance procedure, we would love to check the hypothesis that changing state of a protocol is possible indeed using relevance machine itself. Starting protocol can be as simple as follows: The closer some content address to QmRBKYsQ4FPEtHeGBRuUZEfNXQfvNiJFXvbyrdF4Y7pqfh the more probability that it becomes the winning during an upgrade. The closest protocol to cyber-protocol-current is the protocol which is the most relevant to users. Hence it is up to nodes to signal cyber-protocol-current by sending cyberlinks with semantics like <cQmRBKYsQ4FPEtHeGBRuUZEfNXQfvNiJFXvbyrdF4Y7pqfh> <cid-of-protocol> . Genesis is secure as merkle \u00b6 Before unleashing our creature, we need to have strong assurance that implementations are secure. Merkle is our final genesis release after security audits and more formalism. After this release, the network of relevance machines become fully functional and evolvable. Conclusion \u00b6 We define and implement a protocol for provable communications of consensus computers on relevance. The protocol is based on a simple idea of content defined knowledge graphs which are generated by web3 agents using cyberlinks. Cyberlinks are processed by a consensus computer using a concept we call relevance machine. euler consensus computer is based on CIDv0 and uses go-ipfs and cosmos-sdk as a foundation. IPFS provide significant benefits regarding resources consumption. CIDv0 as primary objects are robust in its simplicity. For every CIDv0 cyber\u2022rank is computed by a consensus computer with no single point of failure. Cyber\u2022rank is CYB weighted PageRank with economic protection from sybil attacks and selfish voting. Every round merkle root of the rank tree is published so every computer can prove to any computer a relevance value for a given CID. Sybil resistance is based on bandwidth limiting. Embedded ability to execute programs offer inspiring apps. Starting primary goal is indexing of peer-to-peer systems with self-authenticated data either stateless, such as IPFS, Swarm, DAT, Git, BitTorrent, or stateful such as Bitcoin, Ethereum and other blockchains and tangles. Proposed semantics of linking offers a robust mechanism for predicting meaningful relations between objects by a consensus computer itself. The source code of a relevance machine is open source. Every bit of data accumulated by a consensus computer is available for everybody if the one has resources to process it. The performance of proposed software implementation is sufficient for seamless user interactions. Scalability of proposed implementation is enough to index all self-authenticated data that exist today and serve it to millions of web3 agents. The blockchain is managed by a decentralized autonomous organization which functions under Tendermint consensus algorithm with standard governance module. Thought a system provide necessary utility to offer an alternative for conventional search engines it is not limited to this use case either. The system is extendable for numerous applications and, e.g. makes it possible to design economically rational self-owned robots that can autonomously understand objects around them. References \u00b6 cyberd Scholarly context adrift Web3 stack Search engines information retrieval in practice Motivating game for adversarial example research An idea of decentralized search IPFS DAT cosmos-sdk CIDv0 Bandwidth in cyber network Thermodynamics of predictions DURA Nebulas Colony Truebit SpringRank PageRank RFC-6962 IBC protocol Tendermint Comparison of web3 browsers Cyb CBD cyberFoundation in Aragon How to become validator in cyber protocol Tolik's article on Satoshi Lottery Top 10000 english words Multilingual neural machine translation Foam Coda Mimblewimble Tezos","title":"Whitepaper"},{"location":"cyberd/cyberd/#cyberd-computing-the-knowledge-from-web3","text":"Notes on euler release of cyber:// protocol reference implementation using Go. cyber\u2022Congress : @xhipster, @litvintech, @hleb-albau, @arturalbov, @belya","title":"cyberd: Computing the knowledge from web3"},{"location":"cyberd/cyberd/#abstract","text":"A consensus computer allows computing of provably relevant answers without opinionated blackbox intermediaries such as Google, Youtube, Amazon or Facebook. Stateless content-addressable peer-to-peer communication networks such as IPFS and stateful consensus computers such as Ethereum provide part of the solution, but there are at least three problems associated with implementation. Of course, the first problem is the subjective nature of relevance. The second problem is that it is hard to scale consensus computer for a huge knowledge graph. The third problem is that the quality of such a knowledge graph will suffer from different attack surfaces such as sybil, selfish behaviour of interacting agents. In this paper, we (1) define a protocol for provable consensus computing of relevance between IPFS objects based on Tendermint consensus of cyber\u2022rank computed on GPU, (2) discuss implementation details and (3) design distribution and incentive scheme based on our experience. We believe the minimalistic architecture of the protocol is critical for the formation of a network of domain-specific knowledge consensus computers. As a result of our work some applications never existed before emerge. We expand the work including our vision on features we expect to work up to Genesis.","title":"Abstract"},{"location":"cyberd/cyberd/#introduction-to-web3","text":"Original protocols of the Internet such as TCP/IP, DNS, URL, and HTTPS brought a web into the point where it is now. Along with all the benefits they have created they brought more problem to the table. Globality being a vital property of the web since inception is under real threat. The speed of connections degrades with network grow and from ubiquitous government interventions into privacy and security of web users. One property, not evident in the beginning, become important with everyday usage of the Internet: its ability to exchange permanent hyperlinks thus they would not break after time has passed . Reliance on \"one at a time ISP\" architecture allows governments effectively censor packets. It is the last straw in a conventional web stack for every engineer who is concerned about the future of our children. Other properties while being not so critical are very desirable: offline and real-time. Average internet user being offline must have the ability to work with the state it has and after acquiring connection being able to sync with global state and continue to verify state's validity in realtime while having a connection. Now, these properties offered on the app level while such properties must be integrated into lower level protocols. The emergence of a web3 stack creates an opportunity for a new kind of Internet. We call it web3. It has a promise to remove problems of a conventional protocol stack and add to the web better speed and more accessible connection. However, as usual in a story with a new stack, new problems emerge. One of such problem is general-purpose search. Existing general-purpose search engines are restrictive centralized databases everybody forced to trust. These search engines were designed primarily for client-server architecture based on TCP/IP, DNS, URL and HTTPS protocols. Web3 creates a challenge and opportunity for a search engine based on developing technologies and specifically designed for them. Surprisingly the permission-less blockchain architecture itself allows organizing general purpose search engine in a way inaccessible for previous architectures.","title":"Introduction to web3"},{"location":"cyberd/cyberd/#on-adversarial-examples-problem","text":"Conventional architecture of search engines where one entity process and rank all the shit suffers from one hard but the particular problem that still has not been solved even by brilliant Google scientists: adversarial examples problem . The problem Google acknowledge is that it is rather hard to algorithmically reason either this particular sample is adversarial or not independently on how cool the learning technology is. Obviously, a cryptoeconomic approach can change beneficiaries in this game effectively removing possible sybil attack vectors and removing the necessity to make a decision on example crawling and meaning extraction from one entity to the whole world. Learning sybil-resistant model will probably lead to orders of magnitude more predictive results.","title":"On adversarial examples problem"},{"location":"cyberd/cyberd/#cyber-protocol-at-euler","text":"compute euler inception of cyber protocol based on Satoshi lottery and CBD balances def knowledge graph state take cyberlinks check the validity of signatures check bandwidth limit check the validity of CIDv0 if signatures, bandwidth limit, and CIDv0 are ok than cyberlink is valid for every valid cyberlink emit prediction as an array of CIDv0 every round calculate cyber\u2022rank deltas for the knowledge graph every round distribute CYB based on defined rules apply more secure consensus state based on CBD balances 6 times up to merkle","title":"Cyber protocol at euler"},{"location":"cyberd/cyberd/#knowledge-graph","text":"We represent a knowledge graph as a weighted graph of directed links between content addresses or content identifications or CIDs. In this paper, we will use them as synonyms. Content addresses are essentially a web3 links. Instead of using nonobvious and mutable thing: https://github.com/cosmos/cosmos/blob/master/WHITEPAPER.md we can use pretty much exact thing: Qme4z71Zea9xaXScUi6pbsuTKCCNFp5TAv8W5tjdfH7yuHhttps Using content addresses for building a knowledge graph we get so much needed superpowers of ipfs - like p2p protocols for a search engine: mesh-network future proof interplanetary tolerant accessible technology agnostic Web3 agents generate our knowledge graph. Web3 agents include itself to the knowledge graph by transacting only once. Thereby they prove the existence of private keys for content addresses of revealed public keys. Our euler implementation is based on cosmos-sdk identities and cidv0 content addresses. Web 3 agents generate knowledge graph by applying cyberlinks.","title":"Knowledge graph"},{"location":"cyberd/cyberd/#cyberlinks","text":"To understand cyberlinks, we need to understand the difference between URL link and IPFS link. URL link points to the location of content, but IPFS link point to the content itself. The difference in web architecture based on location links and content links is drastical, hence require new approaches. Cyberlink is an approach to link two content addresses semantically. QmdvsvrVqdkzx8HnowpXGLi88tXZDsoNrGhGvPvHBQB6sH.QmdSQ1AGTizWjSRaVLJ8Bw9j1xi6CGLptNUcUodBwCkKNS This cyberlink means that cyberd presentation on cyberc0n is referencing Tezos whitepaper. A concept of cyberlink is a convention around simple semantics of communication format in any peer to peer network: <content-address x>.<content-address y> You can see that cyberlink represents a link between two links. Easy peasy! Cyberlink is a simple yet powerful semantic construction for building a predictive model of the universe. Cyberlinks can form link chains if exist a series of two cyberlinks from one agent in which the second link in the first cyberlink is equal to the first link in the second cyberlink: <content-address x>.<content-address y> <content-address y>.<content-address z> Using this simple principle, all interacting agents can reach consensus around interpreting clauses. So link chains are helpful for interpreting rich communications around relevance. Also using the following link: QmNedUe2wktW65xXxWqcR8EWWssHVMXm3Ly4GKiRRSEBkn the one can signal the start and stop of execution in the knowledge graph. If web3 agents expand native IPFS links with something semantically richer as DURA links than web3 agents can easier to reach consensus on the rules for program execution. Indeed, DURA protocol is a proper implementation of a cyberlinks concept. euler implementation of cyberlinks based on DURA specification is available in .cyber app of browser cyb . Based on cyberlinks we can compute the relevance of subjects and objects in a knowledge graph. That is why we need a consensus computer.","title":"Cyberlinks"},{"location":"cyberd/cyberd/#notion-of-consensus-computer","text":"Consensus computer is an abstract computing machine that emerges from agents interactions. A consensus computer has a capacity in terms of fundamental computing resources such as memory and computing. To interact with agents, a computer needs a bandwidth. Ideal consensus computer is a computer in which: the sum of all *individual agents* computations and memory is equal to the sum of all verified by agents computations and memory of a *consensus computer* We know that: verifications of computations < computations + verifications of computations Hence we will not be able to achieve an ideal consensus computer ever. CAP theorem and scalability trilemma also prove this statement. However, this theory can work as a performance indicator of a consensus computer. The euler implementation is a 64-bit consensus computer of the relevance for 64-byte string space that is as far from ideal at least as 1/146. We must bind computational, storage and bandwidth supply of relevance machine with maximized demand of queries. Computation and storage in case of basic relevance machine can be easily predicted based on bandwidth, but bandwidth requires a limiting mechanism. Bandwidth limiting mechanism is work in progress. Current notes on implementation are in the docs . So agents must have CYB tokens in accordance to their will of learning the knowledge graph. However, proposed mechanics of CYB tokens work not only as spam protection but as the economic regulation mechanism to align the ability of validators to process knowledge graph and market demand for processing.","title":"Notion of consensus computer"},{"location":"cyberd/cyberd/#relevance-machine","text":"Relevance machine is a machine that transition knowledge graph state based on some reputation score of agents. This machine enables simple construction for search question querying and answers delivering. The reputation score is projected on every agent's cyberlink. A simple rule prevents agents abuse: one content address can be voted by a token only once. So it does not matter for ranking from how much accounts you voted. The only sum of their balances matters. A useful property of a relevance machine is that it must have inductive reasoning property or follows the blackbox principle. She must be able to interfere predictions without any knowledge about objects except who linked, when linked and what was linked. If we assume that a consensus computer must have some information about linked objects the complexity of such model growth unpredictably, hence a requirement for a computer for memory and computations. That is, deduction of meaning inside consensus computer is expensive thus our design depends on the blindness assumption. Instead of deducting a meaning inside consensus computer we design a system in which meaning extraction is incentivized because agents need CYB to compute relevance. Also, thanks to content addressing the relevance machine following the blackbox principle do not need to store the data but can effectively operate on it. Human intelligence organized in a way to prune none-relevant and none-important memories with time has passed. The same way can do relevance machine. Also, one useful property of relevance machine is that it needs to store neither past state nor full current state to remain useful, or more precisely: relevant . So relevance machine can implement aggressive pruning strategies such as pruning all history of knowledge graph formation or forgetting links that become non-relevant. The pruning group of features can be implemented in nash . euler implementation of relevance machine is based on the most straightforward mechanism which is called cyber\u2022Rank.","title":"Relevance machine"},{"location":"cyberd/cyberd/#cyberrank","text":"Ranking using consensus computer is hard because consensus computers bring serious resource bounds. e.g. Nebulas still fail to deliver something useful on-chain. First, we must ask ourselves why do we need to compute and store the rank on-chain, and not go Colony or Truebit way? If rank computed inside consensus computer, you have an easy content distribution of the rank as well as an easy way to build provable applications on top of the rank. Hence we decided to follow more cosmic architecture. In the next section, we describe the proof of relevance mechanism which allows the network to scale with the help of domain-specific relevance machines that works in parallel. Eventually, relevance machine needs to find (1) deterministic algorithm that allows computing a rank for a continuously appended network to scale the consensus computer to orders of magnitude that of Google. Perfect algorithm (2) must have linear memory and computation complexity. The most importantly it must have (3) highest provable prediction capabilities for the existence of relevant links. After some research, we found that we can not find silver bullet here. We find an algorithm that probably satisfies our criteria: SpringRank . An original idea of the algorithm came to Caterina from physics. Links represented as a system of springs with some energy, and the task of computing the ranks is the task of finding a relaxed state of springs. However, we got at least 3 problems with SpringRank: 1. We were not able to implement it on-chain fast using Go in euler . 2. We were not able to prove it for knowledge graph because we did not have provable knowledge graph yet. 3. Also, we were not able to prove it by applying it for the Ethereum blockchain during computing the genesis file for euler . It could work, but for the time being it is better to call this kind of distribution a lottery. So we decided to find some more basic bulletproof way to bootstrap the network: a rank from which Lary and Sergey have bootstrapped a previous network. The problem with original PageRank is that it is not resistant to sybil attacks. Token weighted PageRank limited by token-weighted bandwidth do not have inherent problems of naive PageRank and is resistant to sybil attacks. For the time being, we will call it cyber\u2022Rank until something better emerge. In the centre of spam protection system is an assumption that write operations can be executed only by those who have a vested interest in the evolutionary success of a relevance machine. Every 1% of stake in consensus computer gives the ability to use 1% of possible network bandwidth and computing capabilities. As nobody uses all possessed bandwidth, we can safely use 10x fractional reserves with 2-minute recalculation target. We would love to discuss the problem of vote buying mainly. Vote buying by itself is not such bad. The problem with vote buying appears in the systems where voting affects the allocation of inflation in the system like Steem or any state-based system. So vote buying can become easily profitable for adversary employing a zero-sum game without a necessity to add value. Our original idea of a decentralized search was based on this approach, but we reject this idea completely removing incentive on consensus level for knowledge graph formation completely. In our setting in which every participant must bring some value to the system to affect predictive model vote buying become NP-hard problem hence is useful for the system. To switch from one algorithm to another, we are going to make simulations and experiment with economic a/b testing based on winning chains through hard spoons. Consensus computer based on relevance machine for cyber\u2022Rank can answer and deliver relevant results for any given search request in the 64 byte CID space. However, to build a network of domain-specific relevance machines, it is not enough. Consensus computers must have the ability to prove relevance for each other.","title":"cyber\u2022Rank"},{"location":"cyberd/cyberd/#proof-of-relevance","text":"We design a system under the assumption that regarding search such thing as bad behaviour does not exist as anything bad can be in the intention of finding answers. Also, this approach significantly reduces attack surfaces. Ranks are computed on the only fact that something has been searched, thus linked and as a result, affected the predictive model. A good analogy is observing in quantum mechanics. That is why we do not need such things as negative voting. Doing this we remove subjectivity out of the protocol and can define proof of relevance. Rank state = rank values stored in a one-dimensional array and merkle tree of those values Each new CID gets a unique number. The number starts from zero and incrementing by one for each new CID. So that we can store rank in a one-dimensional array where indices are CID numbers. Merkle Tree calculated based on RFC-6962 standard . Since rank stored in a one-dimensional array where indices are CID numbers (we could say that it ordered by CID numbers) leaves in merkle tree from left to right are SHA-256 hashes of rank value. Index of the leaf is CID number. It helps to easily find proofs for specified CID ( log n iterations where n is a number of leaves). To store merkle tree is necessary to split the tree into subtrees with a number of leaves multiply of the power of 2. The smallest one is obviously subtree with only one leaf (and therefore height == 0 ). Leaf addition looks as follows. Each new leaf is added as subtree with height == 0 . Then sequentially merge subtrees with the same height from right to left. Example: \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u2502 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u2502 \u250c\u2500\u2500\u2534\u2500\u2500\u2510 \u2502 \u2502 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u2502 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u250c\u2500\u2534\u2500\u2510 \u2502 (5-leaf) (6-leaf) (7-leaf) To get merkle root hash - join subtree roots from right to left. Rank merkle tree can be stored differently: Full tree - all subtrees with all leaves and intermediary nodes Short tree - contains only subtrees roots The trick is that full tree is only necessary for providing merkle proofs. For consensus purposes and updating tree, it's enough to have a short tree . To store merkle tree in database use only a short tree . Marshaling of a short tree with n subtrees (each subtree takes 40 bytes): <subtree_1_root_hash_bytes><subtree_1_height_bytes> .... <subtree_n_root_hash_bytes><subtree_n_height_bytes> For 1,099,511,627,775 leaves short tree would contain only 40 subtrees roots and take only 1600 bytes. Let us denote rank state calculation: p - rank calculation period lbn - last confirmed block number cbn - current block number lr - length of rank values array For rank storing and calculation we have two separate in-memory contexts: Current rank context. It includes the last calculated rank state (values and merkle tree) plus all links and user stakes submitted to the moment of this rank submission. New rank context. It's currently calculating (or already calculated and waiting for submission) rank state. Consists of new calculated rank state (values and merkle tree) plus new incoming links and updated user stakes. Calculation of new rank state happens once per p blocks and going in parallel. The iteration starts from block number that \u2261 0 (mod p) and goes till next block number that \u2261 0 (mod p) . For block number cbn \u2261 0 (mod p) (including block number 1 cause in cosmos blocks starts from 1): Check if the rank calculation is finished. If yes then go to (2.) if not - wait till calculation finished (actually this situation should not happen because it means that rank calculation period is too short). Submit rank, links and user stakes from new rank context to current rank context. Store last calculated rank merkle tree root hash. Start new rank calculation in parallel (on links and stakes from current rank context). For each block: All links go to a new rank context. New coming CIDs gets rank equals to zero. We could do it by checking last CIDs number and lr (it equals the number of CIDs that already have rank). Then add CIDs with number >lr to the end of this array with the value equal to zero. Update current context merkle tree with CIDs from the previous step Store latest merkle tree from current context (let us call it last block merkle tree). Check if new rank calculation finished. If yes go to (4.) if not go to next block. Push calculated rank state to new rank context. Store merkle tree of newly calculated rank. To sum up. In current rank context , we have rank state from last calculated iteration (plus, every block, it updates with new CIDs). Moreover, we have links and user stakes that are participating in current rank calculation iteration (whether it finished or not). The new rank context contains links and stakes that will go to next rank calculation and newly calculated rank state (if a calculation is finished) that waiting for submitting. If we need to restart node firstly, we need to restore both contexts (current and new). Load links and user stakes from a database using different versions: 1. Links and stakes from last calculated rank version v = lbn - (lbn mod n) go to current rank context. 2. Links and stakes between versions v and lbn go to new rank context. Also to restart node correctly, we have to store following entities in database: Last calculated rank hash (merkle tree root) A newly calculated rank short merkle tree Last block short merkle tree With last calculated rank hash and newly calculated rank merkle tree we could check if the rank calculation was finished before node restart. If they are equal, then rank wasn't calculated, and we should run the rank calculation. If not we could skip rank calculation and use newly calculated rank merkle tree to participate in consensus when it comes to block number cbn \u2261 0 (mod p) (rank values will not be available until rank calculation happens in next iteration. Still validator can participate in consensus so nothing bad). Last block merkle tree necessary to participate in consensus till the start of next rank calculation iteration. So, after the restart we could end up with two states: 1. Restored current rank context and new rank context without rank values (links, user stakes, and merkle tree). 2. Restored current rank context without rank values. Restored new rank context only with links and user stakes. A node can participate in consensus but cannot provide rank values (and merkle proofs) till two rank calculation iterations finished (current and next). Search index should be run in parallel and do not influence the work of the consensus machine. The validator should be able to turn off index support. Maybe even make it a separate daemon. Base idea. Always submit new links to index and take rank values from current context (insert in sorted array operation). When a new rank state is submitted trigger index to update rank values and do sortings (in most cases new arrays will be almost sorted). Need to solve the problem of adjusting arrays capacity (not to copy arrays each time newly linked cid added). A possible solution is to adjust capacity with reserve before resorting array. Todo: Therefore for building index, we need to find a sorting algorithm that will be fast on almost sorted arrays. Also, we should implement it for GPU so it should better be parallelizable: Mergesort(Timsort), Heapsort, Smoothsort ... Now we have proof of rank of any given content address. While the relevance is still subjective by nature, we have a collective proof that something was relevant for some community at some point in time. For any given CID it is possible to prove the relevance Using this type of proof any two IBC compatible consensus computers can proof the relevance to each other so that domain-specific relevance machines can flourish. Thanks to inter-blockchain communication protocol you basically can launch your own domain-specific search engine either private or public by forking cyberd which is focused on the common public knowledge . So in our search architecture, domain-specific relevance machine can learn from common knowledge. We are going to work on IBC during smith implementation. In our relevance for commons euler implementation proof of relevance root hash is computed on Cuda GPUs every round.","title":"Proof of relevance"},{"location":"cyberd/cyberd/#speed-and-scalability","text":"We need speedy confirmation times to feels like the usual web app. It is a strong architecture requirement that shape an economic topology and scalability of the cyber protocol. Proposed blockchain design is based on Tendermint consensus algorithm with 146 validators and has very fast 1 second finality time. Average confirmation timeframe at half the second with asynchronous interaction make complex blockchain search almost invisible for agents. Let us say that our node implementation based on cosmos-sdk can process 10k transactions per second. Thus every day at least 8.64 million agents can submit 100 cyberlinks each and impact results simultaneously. That is enough to verify all assumptions in the wild. As blockchain technology evolves we want to check that every hypothesis work before scale it further. Moreover, proposed design needs demand for full bandwidth in order the relevance become valuable. That is why we strongly focus on accessible, but provable distribution to millions from inception.","title":"Speed and scalability"},{"location":"cyberd/cyberd/#implementation-in-a-browser","text":"We wanted to imagine how that could work in a web3 browser. To our disappointment we was not able to find the web3 browser that can showcase the coolness of the proposed approach in action. That is why we decide to develop the web3 browser cyb that has sample application .cyber for interacting with cyber:// protocol.","title":"Implementation in a browser"},{"location":"cyberd/cyberd/#from-inception-to-genesis","text":"It is trivial to develop euler like proof-of-concept implementation, but it is hard to achieve stable protocol merkle a lot of CYB value on which can exist. euler is Inception that already happened, merkle is Genesis that is far away. That is why we decide to innovate a bit on the going main net process. We do not have CYB balances and rank guaranties before merkle but we can have exponentially growing semantic core which can be improved based on measurements and observations during development and gradual transfer of value since euler . So think that Genesis or merkle is very stable and can store semantic core and value, but all releases before can store the whole semantic core and only part of the value you would love to store due to weak security guarantees. The percents of CYB value to be distributed based on CBD balances: euler = 1 smith = 4 darwin = 8 turing = 15 nash = 21 weiner = 25 merkle = 27 To secure the value of CYB before Genesis 100 CBD ERC-20 tokens are issued by cyberFoundation . So snapshot balances are computed 7 times based on CBD. Essentially CBD substance is distributed by cyberFoundation in the following proportion: Proof-of-use: 70% is allocated to web3 agents according to some probabilistic algorithm. E.g., first euler proof-of-use distribution we call Satoshi Lottery is allocated to key owned Ethereum addresses based on ongoing research. First allocation is based on SpringRank. Proof-of-code: 15% is allocated for direct contribution to the code base. E.g., as assigned by cyberFoundation to cyberCongress contribution including team is 11.2% and the other 3.8% allocated to developers community projects such as Gitcoin community and cyberColony based experimental organization. Proof-of-value: 15% is allocated for a direct contribution of funds. 8% of this value either has been already contributed nor has some reservation for ongoing contributions by close friends and 7% is going to be distributed during Eos-like auction not defined precisely yet. All contribution from the auction will go to Aragon based cyberFoundation and will be managed by CBD token holders. Details of code and value distribution can be produced by cyberFoundation. Except for 7 CBD based distributions, CYB tokens can be created only by validators based on staking and slashing parameters. The basic consensus is that newly created CYB tokens are distributed to validators as they do the essential work to make relevance machine run both regarding energy consumed for computation and cost for storage capacity. So validators decide where the tokens can flow further.","title":"From Inception to Genesis"},{"location":"cyberd/cyberd/#validators-incentive","text":"Validators are the essential building block of the proposed architecture. Hence we want to bring them a better incentive to participate before the main net. In our case validators will compute and process requests for billions edge knowledge graph hence it would be naive to expect that it is possible to expect to prepare such a network for production for free. In the beginning, inflation must be high enough to compensate risks of early investments into the ecosystem. This is approximation of year inflation expressed in percents defined for testnets: euler = 200 smith = 134 darwin = 90 turing = 60 nash = 40 weiner = 27 merkle = 18 The scheme motivates developers to release earlier to be less diluted from holding CBD and honour validators if development is going slower than expected. After Genesis starting inflation rate will become fixed at 1 000 000 000 CYB per block. Join . Once we have validators, we can think about first million web3 agents.","title":"Validators incentive"},{"location":"cyberd/cyberd/#satoshi-lottery","text":"Satoshi Lottery is the inception version of the proof-of-use distribution that already happens in the tenth birthday of Bitcoin Genesis at 3 Jan 2019. It is a highly experimental way of provable distribution. The basic idea is that a comprehensive set of agents receive CYB tokens because they behave well. The basic algorithm is of 5 steps: - Compute SpringRank for Ethereum addresses - Sort by SpringRank - Filter top 1M addresses by SpringRank - Compute CYB balances based on CBD - Create genesis for cyber protocol Translation todo: Tolik's article have to be translated here. Next test net we will improve the logic of the lottery based on received data and repeat this every test net until Genesis. Soon you will be able to verify either you were lucky enough to receive CYB or not just searching your ethereum address. If you were, you will be able to claim CYB even without compromising your Ethereum keys.","title":"Satoshi Lottery"},{"location":"cyberd/cyberd/#inception","text":"The genesis file for euler containing lottery results and CBD based distribution has the following cid: Qma5U4joYWEf41ku16g9cQr6fADsxCPsiWeYZBxpnpu1D4 132307 accounts with 8 274 000 000 000 000 CYB tokens has been created in Inception of the network. Amount of created tokens is consist of the following sources: - 1% of CYB value allocated to euler testnet based on proof-of-use distribution as planned - 0.7% of CYB value allocated to euler testnet based on proof-of-value and proof-of-code distribution except 11.8 CBD due to bug. Appropriate corrections will be done during scheduled hardfork.","title":"Inception"},{"location":"cyberd/cyberd/#possible-applications","text":"A lot of cool applications can be built on top of proposed architecture: Web3 browsers . It easy to imagine the emergence of a full-blown blockchain browser. Currently, there are several efforts for developing browsers around blockchains and distributed tech. Among them are Beaker, Mist, Brave, and Metamask. All of them suffer from trying to embed web2 in web3. Our approach is a bit different. We consider web2 as the unsafe subset of web3. That is why we decide to develop a web3 browser that can showcase the cyber approach to answer questions better. Programmable semantic cores . Currently, the most popular keywords in a gigantic semantic core of Google are keywords of apps such as youtube, facebook, github, etc. However, developers have very limited possibility to explain Google how to better structure results. The cyber approach brings this power back to developers. On any given user input string in any application relevant answer can be computed either globally, in the context of an app, a user, a geo or in all of them combined. Search actions . Proposed design enable native support for blockchain asset related activity. It is trivial to design applications which are (1) owned by creators, (2) appear right in search results and (3) allow a transact-able call to actions with (4) provable attribution of a conversion to search query. e-Commerce has never been so easy for everybody. Offline search . IPFS make possible easy retrieval of documents from surroundings without a global internet connection. cyberd can itself can be distributed using IPFS. That creates a possibility for ubiquitous offline search. Command tools . Command line tools can rely on relevant and structured answers from a search engine. That practically means that the following CLI tool is possible to implement > cyberd earn using 100 gb hdd Enjoy the following predictions: - apt install go-filecoin: 0.001 BTC per month per GB - apt install siad: 0.0001 BTC per month per GB - apt install storjd: 0.00008 BTC per month per GB According to the best prediction, I made a decision try `mine go-filecoin` Git clone ... Building go-filecoin Starting go-filecoin Creating a wallet using @xhipster seed You address is .... Placing bids ... Waiting for incoming storage requests ... Search from CLI tools will inevitably create a highly competitive market of a dedicated semantic core for bots. Autonomous robots . Blockchain technology enables the creation of devices which can earn, store, spend and invest digital assets by themselves. If a robot can earn, store, spend and invest she can do everything you can do What is needed is a simple yet powerful state reality tool with the ability to find particular things. cyberd offers minimalistic but continuously self-improving data source that provides necessary tools for programming economically rational robots. According to top-10000 english words the most popular word in English is defined article the that means a pointer to a particular thing. That fact can be explained as the following: particular things are the most important for us. So the nature of our current semantic computing is to find unique things. Hence the understanding of unique things become essential for robots too. Language convergence . A programmer should not care about what language do the user use. We don't need to know about what language user is searching in. Entire UTF-8 spectrum is at work. A semantic core is open so competition for answering can become distributed across different domain-specific areas, including semantic cores of different languages. The unified approach creates an opportunity for cyber\u2022Bahasa. Since the Internet, we observe a process of rapid language convergence. We use more truly global words across the entire planet independently of our nationality, language and race, Name the Internet. The dream of truly global language is hard to deploy because it is hard to agree on what means what. However, we have the tools to make that dream come true. It is not hard to predict that the shorter a word, the more its cyber\u2022rank will be. Global publicly available list of symbols, words, and phrases sorted by cyber\u2022rank with corresponding links provided by cyberd can be the foundation for the emergence of genuinely global language everybody can accept. Recent scientific advances in machine translation are breathtaking but meaningless for those who wish to apply them without Google scale trained model. Proposed cyber\u2022rank offers precisely this. This is sure not the exhaustive list of possible applications but very exciting, though.","title":"Possible applications"},{"location":"cyberd/cyberd/#economic-protection-is-smith","text":"About private knowledge on relevance. Explain the difference between private cyberlinks and private relevance machines. The plan for learning the beast. How cyberlink ipfs, wiki, bitcoin and ethereum?","title":"Economic protection is smith"},{"location":"cyberd/cyberd/#ability-to-evolve-is-darwin","text":"About the importance of alternative implementation.","title":"Ability to evolve is darwin"},{"location":"cyberd/cyberd/#turing-is-about-computing-more","text":"Ability to programmatically extend state based on proven knowledge graph is of paramount importance. Thus we consider that WASM programs will be available for execution in cyber consensus computer on top of knowledge graph. Our approach to the economics of consensus computer is that users buy an amount of RAM, CPU, and GPU as they want to execute programs. OpenCypher or GraphQL like language can be provided to explore semantics of the knowledge graph. The following list is simple programs we can envision that can be built on top of simple relevance machine. Self prediction . A consensus computer can continuously build a knowledge graph by itself predicting the existence of cyberlinks and applying these predictions to a state of itself. Hence a consensus computer can participate in the economic consensus of the cyber protocol. Universal oracle. A consensus computer can store the most relevant data in the key-value store, where the key is cid and value is bytes of actual content. She is doing it by making a decision every round about which cid value she want to prune and which she wants to apply based on the utility measure of content addresses in the knowledge graph. To compute utility measure validators check availability and size of content for the top-ranked content address in the knowledge graph, then weight on the size of cids and its ranks. The emergent key-value store will be available to write for consensus computer only and not agents, but values can be used in programs. Proof of location . It is possible to construct cyberlinks with proof-of-location based on some existing protocol such as Foam . So location-based search also can become provable if web3 agents will mine triangulations and attaching proof of location for every link chain. Proof of web3 agent . Agents are a subset of content addresses with one fundamental property: consensus computer can prove the existence of private keys for content addresses for the subset of knowledge graph even if those addresses has never transacted in its own chain. Hence it is possible to compute much provable stuff on top of that knowledge. E.g., some inflation can be distributed to addresses that have never transacted in the cyber network but have the provable link. Motivation for read requests . It would be great to create cybernomics not only for write requests to consensus computer but from read requests also. So read requests can be two order of magnitude cheaper, but guaranteed. Read requests to a search engine can be provided by the second tier of nodes which earn CYB tokens in state channels. We consider implementing state channels based on HTLC and proof verification which unlocks amount earned for already served requests. Prediction markets on link relevance . We can move the idea further by the ranking of knowledge graph based on prediction market on links relevance. An app that allow betting on link relevance can become a unique source of truth for the direction of terms as well as motivate agents to submit more links. Private cyberlinks . Privacy is foundational. While we are committed to privacy achieving implementation of private cyberlinks is unfeasible for our team up to Genesis. Hence it is up to the community to work on wasm programs that can be executed on top of the protocol. The problem is to compute cyberRank based on cyberlink submitted by a web3 agent without revealing neither previous request nor public keys of a web3 agent. Zero-knowledge proofs, in general, are very expensive. We believe that privacy of search should be must by design, but not sure that we know how to implement it. Coda like recursive snarks and mimblewimble constructions, in theory, can solve part of the privacy issue, but they are new, untested and anyway will be more expensive regarding computations than a transparent alternative.","title":"turing is about computing more"},{"location":"cyberd/cyberd/#in-a-search-for-equilibria-is-nash","text":"We need to find answers for a lot of hard questions regarding consensus variables and its default values. So we decide to stick to a community generated feedback on the road to Genesis and continuously adjust them to keep going better. On scalability trilemma ... Decentralization comes with costs and slowness. We want to find a good balance between speed, reliance, and ability to scale, as we believe all three are sensitive for widespread web3 adoption. That is the area of research for us now. We need real economic measurements to apply a scientific method for this class of challenges.","title":"In a search for equilibria is nash"},{"location":"cyberd/cyberd/#on-faster-evolution-at-weiner","text":"The primary purpose of wiener stage is to be able to update the consensus of a network from a consensus computer state using some on-chain upgrade mechanism. Evolvability and governance are connected tightly. Ability to reflect input from the world and output changes of itself is an essential evolutionary feature. Hence, thanks to cosmos-sdk euler implementation have basic but compelling features such as on-chain voting with vetos and abstain that drastically simplified open discussions for a change. So we are going to use this feature from the inception of the network. However, we can go in a different direction than cosmos-sdk offers. Following ideas from Tezos in weiner we can define the current state of a protocol as the immutable content address that included in round merkle root. Also instead of formal governance procedure, we would love to check the hypothesis that changing state of a protocol is possible indeed using relevance machine itself. Starting protocol can be as simple as follows: The closer some content address to QmRBKYsQ4FPEtHeGBRuUZEfNXQfvNiJFXvbyrdF4Y7pqfh the more probability that it becomes the winning during an upgrade. The closest protocol to cyber-protocol-current is the protocol which is the most relevant to users. Hence it is up to nodes to signal cyber-protocol-current by sending cyberlinks with semantics like <cQmRBKYsQ4FPEtHeGBRuUZEfNXQfvNiJFXvbyrdF4Y7pqfh> <cid-of-protocol> .","title":"On faster evolution at weiner"},{"location":"cyberd/cyberd/#genesis-is-secure-as-merkle","text":"Before unleashing our creature, we need to have strong assurance that implementations are secure. Merkle is our final genesis release after security audits and more formalism. After this release, the network of relevance machines become fully functional and evolvable.","title":"Genesis is secure as merkle"},{"location":"cyberd/cyberd/#conclusion","text":"We define and implement a protocol for provable communications of consensus computers on relevance. The protocol is based on a simple idea of content defined knowledge graphs which are generated by web3 agents using cyberlinks. Cyberlinks are processed by a consensus computer using a concept we call relevance machine. euler consensus computer is based on CIDv0 and uses go-ipfs and cosmos-sdk as a foundation. IPFS provide significant benefits regarding resources consumption. CIDv0 as primary objects are robust in its simplicity. For every CIDv0 cyber\u2022rank is computed by a consensus computer with no single point of failure. Cyber\u2022rank is CYB weighted PageRank with economic protection from sybil attacks and selfish voting. Every round merkle root of the rank tree is published so every computer can prove to any computer a relevance value for a given CID. Sybil resistance is based on bandwidth limiting. Embedded ability to execute programs offer inspiring apps. Starting primary goal is indexing of peer-to-peer systems with self-authenticated data either stateless, such as IPFS, Swarm, DAT, Git, BitTorrent, or stateful such as Bitcoin, Ethereum and other blockchains and tangles. Proposed semantics of linking offers a robust mechanism for predicting meaningful relations between objects by a consensus computer itself. The source code of a relevance machine is open source. Every bit of data accumulated by a consensus computer is available for everybody if the one has resources to process it. The performance of proposed software implementation is sufficient for seamless user interactions. Scalability of proposed implementation is enough to index all self-authenticated data that exist today and serve it to millions of web3 agents. The blockchain is managed by a decentralized autonomous organization which functions under Tendermint consensus algorithm with standard governance module. Thought a system provide necessary utility to offer an alternative for conventional search engines it is not limited to this use case either. The system is extendable for numerous applications and, e.g. makes it possible to design economically rational self-owned robots that can autonomously understand objects around them.","title":"Conclusion"},{"location":"cyberd/cyberd/#references","text":"cyberd Scholarly context adrift Web3 stack Search engines information retrieval in practice Motivating game for adversarial example research An idea of decentralized search IPFS DAT cosmos-sdk CIDv0 Bandwidth in cyber network Thermodynamics of predictions DURA Nebulas Colony Truebit SpringRank PageRank RFC-6962 IBC protocol Tendermint Comparison of web3 browsers Cyb CBD cyberFoundation in Aragon How to become validator in cyber protocol Tolik's article on Satoshi Lottery Top 10000 english words Multilingual neural machine translation Foam Coda Mimblewimble Tezos","title":"References"},{"location":"cyberd/get_CYB/","text":"How to get CYB? \u00b6 There are 3 ways to get tokens that allow you to participate in testnet either as a validator or as an search agent: Get it for free . 1 million Ethereum addresses have been included in the genesis block of cyber protocol based on the ranking defined in paper. You can verify how many tokens had been allocated to your address, by downloading web3 browser Cyb and searching for genesis there. Our roadmap has several distribution events before the genesis of the mainnet so we will probably expand ways to drop tokens in the future. Buy OTC . There is a way to buy CBD tokens from other web3 agents. Go to https://t.me/cybotc group and try to find someone who will sell you some tokens. Earn through coding . Go to Gitcoin and complete a bounty . For every completed bounty we have a 1B CYB prize tokens, as well as CBD prize. It is done so for a reason, that acquiring tokens in the testnetwork is difficult. Participation in the testnet requires certain skills from agents. So early participation make sense only for experienced users. How to get CBD? \u00b6 CBD is an ERC-20 proto token that serves a purpose to make CYB distribution more reliable and convinient for investors, and for the developers of the cyber protocol. Based on CBD balances, CYB balances are computed every new testnetwork according to the allocation model in the roadmap. It is much easier to get CBD than CYB, because they can be traded on any Ethereum DEX easily. The drawback of CBD is that you will need to wait for the next phase of development in order to actually use any part of the CBD value in the testnetwork, either as a validator or as an agent. There are several ways to buy CBD tokens: Buy OTC . Go to https://t.me/cybotc group and try to find someone who will sell you some CBD tokens. Buy on Forkdelta . Go to https://forkdelta.app/#!/trade/0x136c1121f21c29415D8cd71F8Bb140C7fF187033-ETH . Maybe someone is selling some CBD there? Contribute to the community . You can wait a bit, until the cyberFoundation formation event. You will be then, able to get some CBD for donating ETH. All ETH donated during the formation event, will become the ownership of the DAO, managed by the contributors.","title":"Get CYB"},{"location":"cyberd/get_CYB/#how-to-get-cyb","text":"There are 3 ways to get tokens that allow you to participate in testnet either as a validator or as an search agent: Get it for free . 1 million Ethereum addresses have been included in the genesis block of cyber protocol based on the ranking defined in paper. You can verify how many tokens had been allocated to your address, by downloading web3 browser Cyb and searching for genesis there. Our roadmap has several distribution events before the genesis of the mainnet so we will probably expand ways to drop tokens in the future. Buy OTC . There is a way to buy CBD tokens from other web3 agents. Go to https://t.me/cybotc group and try to find someone who will sell you some tokens. Earn through coding . Go to Gitcoin and complete a bounty . For every completed bounty we have a 1B CYB prize tokens, as well as CBD prize. It is done so for a reason, that acquiring tokens in the testnetwork is difficult. Participation in the testnet requires certain skills from agents. So early participation make sense only for experienced users.","title":"How to get CYB?"},{"location":"cyberd/get_CYB/#how-to-get-cbd","text":"CBD is an ERC-20 proto token that serves a purpose to make CYB distribution more reliable and convinient for investors, and for the developers of the cyber protocol. Based on CBD balances, CYB balances are computed every new testnetwork according to the allocation model in the roadmap. It is much easier to get CBD than CYB, because they can be traded on any Ethereum DEX easily. The drawback of CBD is that you will need to wait for the next phase of development in order to actually use any part of the CBD value in the testnetwork, either as a validator or as an agent. There are several ways to buy CBD tokens: Buy OTC . Go to https://t.me/cybotc group and try to find someone who will sell you some CBD tokens. Buy on Forkdelta . Go to https://forkdelta.app/#!/trade/0x136c1121f21c29415D8cd71F8Bb140C7fF187033-ETH . Maybe someone is selling some CBD there? Contribute to the community . You can wait a bit, until the cyberFoundation formation event. You will be then, able to get some CBD for donating ETH. All ETH donated during the formation event, will become the ownership of the DAO, managed by the contributors.","title":"How to get CBD?"},{"location":"cyberd/keystore/","text":"Keystore management \u00b6","title":"Keystore management"},{"location":"cyberd/keystore/#keystore-management","text":"","title":"Keystore management"},{"location":"cyberd/launch_network/","text":"Launch network \u00b6 Export state from previous network \u00b6 To export network at given state you should have fullnode stopped at required height. You can use any existing fullnode\\validator node, or sync new node from the begging. Note: use fail-before-height flag to stop node before given height. Example: docker run -d --runtime = nvidia -v /cyberd/daemon:/root/.cyberd cyberd/cyberd:euler-x cyberd start --fail-before-height = 322 Assuming you node files are located under /cyberd/daemon path and current chain is euler-x , run export command docker run --rm --runtime = nvidia -v /cyberd/daemon:/root/.cyberd cyberd/cyberd:euler-x cyberd export Now, you will have two genesis files under path /cyberd/daemon/export . Generate new validators gentx \u00b6 Copy two genesis files into daemon config folder, for example /cyberd/daemon-y/config . Copy validator key to the same directory. To add initial valdator to the genesis.json run: docker run --rm --runtime = nvidia -v /cyberd/daemon-y:/root/.cyberd \\ -v /cyberd/cli:/root/.cyberdcli cyberd gentx --amount = 10000000cyb --name = wallet_key --moniker = hlb Update Dockerfile \u00b6 Upload new genesis.json and links files to IPFS. Update Dockerfile ipfs hashes. Build new image locally, upload it to Dockerhub registry. Launch seed node. \u00b6 You should backup seed node node_key.json from previous network. Using new image, launch seed node with given key. Launch first validator node. \u00b6 Using validators key from gentx step and new docker image launch first validator node. Knowing issues \u00b6 During cosmos sdk update a set of new params can be added to genesis.json, thus make current invalid. In such case, you need create new empty json via testnet command and use it as template for manually assembled genesis file.","title":"Launch network"},{"location":"cyberd/launch_network/#launch-network","text":"","title":"Launch network"},{"location":"cyberd/launch_network/#export-state-from-previous-network","text":"To export network at given state you should have fullnode stopped at required height. You can use any existing fullnode\\validator node, or sync new node from the begging. Note: use fail-before-height flag to stop node before given height. Example: docker run -d --runtime = nvidia -v /cyberd/daemon:/root/.cyberd cyberd/cyberd:euler-x cyberd start --fail-before-height = 322 Assuming you node files are located under /cyberd/daemon path and current chain is euler-x , run export command docker run --rm --runtime = nvidia -v /cyberd/daemon:/root/.cyberd cyberd/cyberd:euler-x cyberd export Now, you will have two genesis files under path /cyberd/daemon/export .","title":"Export state from previous network"},{"location":"cyberd/launch_network/#generate-new-validators-gentx","text":"Copy two genesis files into daemon config folder, for example /cyberd/daemon-y/config . Copy validator key to the same directory. To add initial valdator to the genesis.json run: docker run --rm --runtime = nvidia -v /cyberd/daemon-y:/root/.cyberd \\ -v /cyberd/cli:/root/.cyberdcli cyberd gentx --amount = 10000000cyb --name = wallet_key --moniker = hlb","title":"Generate new validators gentx"},{"location":"cyberd/launch_network/#update-dockerfile","text":"Upload new genesis.json and links files to IPFS. Update Dockerfile ipfs hashes. Build new image locally, upload it to Dockerhub registry.","title":"Update Dockerfile"},{"location":"cyberd/launch_network/#launch-seed-node","text":"You should backup seed node node_key.json from previous network. Using new image, launch seed node with given key.","title":"Launch seed node."},{"location":"cyberd/launch_network/#launch-first-validator-node","text":"Using validators key from gentx step and new docker image launch first validator node.","title":"Launch first validator node."},{"location":"cyberd/launch_network/#knowing-issues","text":"During cosmos sdk update a set of new params can be added to genesis.json, thus make current invalid. In such case, you need create new empty json via testnet command and use it as template for manually assembled genesis file.","title":"Knowing issues"},{"location":"cyberd/overview/","text":"://cyber staking and distribution overview \u00b6 Params \u00b6 Module Param Value Comment Staking UnbondingTime 3 weeks time duration of unbonding Staking MaxValidators 146 maximum number of active validators set Staking MaxEntries 7 max entries for either unbonding delegation or redelegation per delegator/validator pair(delegator/validator/validator for redelegation) Consensus MaxBytes 1mb block max bytes limit Rank RankCalcWindow 100 full rank recalculation window Distr CommunityTax 0% community funding tax, not used Distr BaseProposerReward 1% % of block inflation goes to proposer Distr BonusProposerReward 4% addition reward, calculated as % of included votes from validators set Slashing MaxEvidenceAge 3weeks misbehaviour evidence max age Slashing SignedBlocksWindow 30min window to calculate validators liveness Slashing MinSignedPerWindow 70% min singed block for window to not be jailed Slashing DowntimeJailDuration 0 unjail delay Slashing SlashFractionDoubleSign 20% % of stake reduction for double sign Slashing SlashFractionDowntime 0.1% % of stake reduction for being offline Mint TokensPerBlock 0.634195840 Gcyb validators block rewards Bandwidth RecoveryWindow 24h from 0 to max recovery period Bandwidth PriceSlidingWindow 24h price calculated based on network load for selected period Bandwidth PriceAdjustWindow 1m how ofter price is recalculated Bandwidth PriceMin 0.01 minimum price number (1 means normal price) Bandwidth LinkCost 100 link msg cost Bandwidth NonLinkCost 5 * LinkCost link msg cost Bandwidth TxCost 3 * LinkCost tx cost Bandwidth RecoveryWindowTotalBandwidth 2000 * 1000* LinkCost how much all users in average can spend for recover period Staking \u00b6 The cyberd is a public Proof-Of-Stake (PoS) blockchain, meaning that validator's weight is determined by the amount of staking tokens bonded as collateral. These tokens can be staked directly by the validator or delegated to them by token holders. The weight (i.e. total stake) of a validator determines whether or not it is an active validator, and also how frequently this node will have to propose a block and how much revenue it will obtain. Validator \u00b6 Any user in the system can declare its intention to become a validator by sending a create-validator transaction. From there, they become validators. Validator can set commission , that applied on revenue before it is distributed to their delegators. Each validator holds: - All bounded tokens(self and delegators). NOTE: not include distribution rewards. - Own distribution rewards (commission rewards) - Delegators distribution rewards - All delegators shares. Share is not mapped 1-to-1 to tokens. In a case a validator being punished for misbehaviour, bounded tokens will be reduced, while shares remain a same. Delegation \u00b6 Delegators are token holders who cannot, or do not want to run validator operations themselves. A user can delegate tokens to a validator and obtain a part of its revenue in exchange. Upon delegation a user converts his tokens to validator shares in a rate val_tokens/val_shares . Undelegation \u00b6 A user may want to cancel delegation to specific validator. To do so, he/she send undelegate transaction. Depending on current validator state, either user receive his revenue proportion and bounded tokens back immediately (for unbonded validator), or just start process of undelegation. If a validator is in unbonding state, than a user will receive tokens at a validator unbonding time. In last case, a user will wait full UnbondingTime period. Slashing \u00b6 If validators double sign, are frequently offline or do not participate in governance, their staked tokens (including tokens of users that delegated to them) can be destroyed, or 'slashed'. At the beginning of each block, we update the signing info for each validator and check if they've dipped below the liveness threshold MinSignedPerWindow over the tracked window SignedBlocksWindow . If so, their stake will be slashed by SlashFractionDowntime percentage and will be Jailed for DowntimeJailDuration . Distribution \u00b6 All minted tokens goes to fees pool. At each beginblock , the fees received on previous block are allocated to the proposer, community fund, and previous block active validators set according to next scheme: When the validator is the proposer of the round, that validator (and their delegators) receives between BaseProposerReward and BonusProposerReward of fee rewards. The amount of proposer reward is calculated from pre-commits Tendermint messages in order to incentives validators to wait and include additional pre-commits in the block. Community tax is then charged from full fees. The remainder is distributed proportionally by voting power to all bonded validators(and their delegators) independent of whether they voted (social distribution).","title":"Overview"},{"location":"cyberd/overview/#cyber-staking-and-distribution-overview","text":"","title":"://cyber staking and distribution overview"},{"location":"cyberd/overview/#params","text":"Module Param Value Comment Staking UnbondingTime 3 weeks time duration of unbonding Staking MaxValidators 146 maximum number of active validators set Staking MaxEntries 7 max entries for either unbonding delegation or redelegation per delegator/validator pair(delegator/validator/validator for redelegation) Consensus MaxBytes 1mb block max bytes limit Rank RankCalcWindow 100 full rank recalculation window Distr CommunityTax 0% community funding tax, not used Distr BaseProposerReward 1% % of block inflation goes to proposer Distr BonusProposerReward 4% addition reward, calculated as % of included votes from validators set Slashing MaxEvidenceAge 3weeks misbehaviour evidence max age Slashing SignedBlocksWindow 30min window to calculate validators liveness Slashing MinSignedPerWindow 70% min singed block for window to not be jailed Slashing DowntimeJailDuration 0 unjail delay Slashing SlashFractionDoubleSign 20% % of stake reduction for double sign Slashing SlashFractionDowntime 0.1% % of stake reduction for being offline Mint TokensPerBlock 0.634195840 Gcyb validators block rewards Bandwidth RecoveryWindow 24h from 0 to max recovery period Bandwidth PriceSlidingWindow 24h price calculated based on network load for selected period Bandwidth PriceAdjustWindow 1m how ofter price is recalculated Bandwidth PriceMin 0.01 minimum price number (1 means normal price) Bandwidth LinkCost 100 link msg cost Bandwidth NonLinkCost 5 * LinkCost link msg cost Bandwidth TxCost 3 * LinkCost tx cost Bandwidth RecoveryWindowTotalBandwidth 2000 * 1000* LinkCost how much all users in average can spend for recover period","title":"Params"},{"location":"cyberd/overview/#staking","text":"The cyberd is a public Proof-Of-Stake (PoS) blockchain, meaning that validator's weight is determined by the amount of staking tokens bonded as collateral. These tokens can be staked directly by the validator or delegated to them by token holders. The weight (i.e. total stake) of a validator determines whether or not it is an active validator, and also how frequently this node will have to propose a block and how much revenue it will obtain.","title":"Staking"},{"location":"cyberd/overview/#validator","text":"Any user in the system can declare its intention to become a validator by sending a create-validator transaction. From there, they become validators. Validator can set commission , that applied on revenue before it is distributed to their delegators. Each validator holds: - All bounded tokens(self and delegators). NOTE: not include distribution rewards. - Own distribution rewards (commission rewards) - Delegators distribution rewards - All delegators shares. Share is not mapped 1-to-1 to tokens. In a case a validator being punished for misbehaviour, bounded tokens will be reduced, while shares remain a same.","title":"Validator"},{"location":"cyberd/overview/#delegation","text":"Delegators are token holders who cannot, or do not want to run validator operations themselves. A user can delegate tokens to a validator and obtain a part of its revenue in exchange. Upon delegation a user converts his tokens to validator shares in a rate val_tokens/val_shares .","title":"Delegation"},{"location":"cyberd/overview/#undelegation","text":"A user may want to cancel delegation to specific validator. To do so, he/she send undelegate transaction. Depending on current validator state, either user receive his revenue proportion and bounded tokens back immediately (for unbonded validator), or just start process of undelegation. If a validator is in unbonding state, than a user will receive tokens at a validator unbonding time. In last case, a user will wait full UnbondingTime period.","title":"Undelegation"},{"location":"cyberd/overview/#slashing","text":"If validators double sign, are frequently offline or do not participate in governance, their staked tokens (including tokens of users that delegated to them) can be destroyed, or 'slashed'. At the beginning of each block, we update the signing info for each validator and check if they've dipped below the liveness threshold MinSignedPerWindow over the tracked window SignedBlocksWindow . If so, their stake will be slashed by SlashFractionDowntime percentage and will be Jailed for DowntimeJailDuration .","title":"Slashing"},{"location":"cyberd/overview/#distribution","text":"All minted tokens goes to fees pool. At each beginblock , the fees received on previous block are allocated to the proposer, community fund, and previous block active validators set according to next scheme: When the validator is the proposer of the round, that validator (and their delegators) receives between BaseProposerReward and BonusProposerReward of fee rewards. The amount of proposer reward is calculated from pre-commits Tendermint messages in order to incentives validators to wait and include additional pre-commits in the block. Community tax is then charged from full fees. The remainder is distributed proportionally by voting power to all bonded validators(and their delegators) independent of whether they voted (social distribution).","title":"Distribution"},{"location":"cyberd/rpc/","text":"API reference \u00b6 Cyberd provides a JSON-RPC API. Http endpoint is served under localhost:20657 . WebSockets are the preferred transport for cyberd RPC and are used by applications such as cyb. Default WebSocket connection endpoint for cyberd is ws://localhost:20657/websocket . There are test endpoints available at http://earth.cybernode.ai:34657 and ws://earth.cybernode.ai:34657/websocket . Standard Methods \u00b6 Query Example \u00b6 Query http endpoint using curl: curl --data '{\"method\":\"status\",\"params\":[],\"id\":\"1\",\"jsonrpc\":\"2.0\"}' \\ -H \"Content-Type: application/json\" -X POST earth.cybernode.ai:34657 Query ws endpoint from js: let websocket = new WebSocket ( \"ws://earth.cybernode.ai:34657/websocket\" ); websocket . send ( JSON . stringify ({ \"method\" : \"status\" , \"params\" : [], \"id\" : \"1\" , \"jsonrpc\" : \"2.0\" })); Method Overview \u00b6 The following is an overview of the RPC methods and their current status. Click the method name for further details such as parameter and return information. # Method Description 1 status Get node info, pubkey, latest block hash, app hash, block height and time. 2 account Get account nonce, pubkey, number, and coins. 3 account_bandwidth Get account bandwidth info for current height. 4 is_link_exist Return true, if given link exist. 5 current_bandwidth_price Returns current bandwidth credit price. 6 index_stats Returns current index entities count. Method Details \u00b6 Method status Parameters None Description Get node info, pubkey, latest block hash, app hash, block height and time. Return to Overview Method account Parameters 1. address (string, required) Description Get account nonce, pubkey, number, and coins. Return to Overview Method account_bandwidth Parameters 1. address (string, required) Description Get account bandwidth info for current height. Return to Overview Method is_link_exist Parameters 1. from (cid, required) 2. to (cid, required) 3. address (string, required) Description Return true, if given link exist. Return to Overview Method current_bandwidth_price Parameters None Description Returns current bandwidth credit price. Return to Overview Method index_stats Parameters None Description Returns current index entities count. Return to Overview Notifications (WebSocket-specific) \u00b6 Cyberd uses standard JSON-RPC notifications to notify clients of changes, rather than requiring clients to poll cyberd for updates. JSON-RPC notifications are a subset of requests, but do not contain an ID. The notification type is categorized by the query params field. Subscribe Example \u00b6 Subscribe for new blocks header from js: let websocket = new WebSocket ( \"ws://earth.cybernode.ai:34657/websocket\" ); websocket . send ( JSON . stringify ({ \"method\" : \"subscribe\" , \"params\" : [ \"tm.event='NewBlockHeader'\" ], \"id\" : \"1\" , \"jsonrpc\" : \"2.0\" })); Events Overview \u00b6 # Event Description 1 NewBlockHeader Sends block header notification when a new block is committed. 2 CoinsReceived Sends a notification when a new coins is arrived to given address. 3 CoinsSend Sends a notification when a new coins is send from given address. 4 \u0421idsLinked Notification of link created by given address. 5 SignedTxCommitted Notify when any tx for given signer is committed. Events Details \u00b6 NewBlockHeader \u00b6 Event NewBlockHeader Description Sends block header notification when a new block is committed. Query tm.event='NewBlockHeader' Return to Overview CoinsReceived \u00b6 Event CoinsReceived Description Sends a notification when a new coins is arrived to given address. Query tm.event='EventTx' AND recipient='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' Return to Overview CoinsSend \u00b6 Event CoinsSend Description Sends a notification when a new coins is send from given address. Query tm.event='EventTx' AND sender='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' Return to Overview \u0421idsLinked \u00b6 Event \u0421idsLinked Description Notification of link created by given address. Query tm.event='EventTx' AND signer='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' AND action='link' Return to Overview SignedTxCommitted \u00b6 Event SignedTxCommitted Description Notify when any tx for given signer is committed. Query tm.event='EventTx' AND signer='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' Return to Overview","title":"RPC"},{"location":"cyberd/rpc/#api-reference","text":"Cyberd provides a JSON-RPC API. Http endpoint is served under localhost:20657 . WebSockets are the preferred transport for cyberd RPC and are used by applications such as cyb. Default WebSocket connection endpoint for cyberd is ws://localhost:20657/websocket . There are test endpoints available at http://earth.cybernode.ai:34657 and ws://earth.cybernode.ai:34657/websocket .","title":"API reference"},{"location":"cyberd/rpc/#standard-methods","text":"","title":"Standard Methods"},{"location":"cyberd/rpc/#query-example","text":"Query http endpoint using curl: curl --data '{\"method\":\"status\",\"params\":[],\"id\":\"1\",\"jsonrpc\":\"2.0\"}' \\ -H \"Content-Type: application/json\" -X POST earth.cybernode.ai:34657 Query ws endpoint from js: let websocket = new WebSocket ( \"ws://earth.cybernode.ai:34657/websocket\" ); websocket . send ( JSON . stringify ({ \"method\" : \"status\" , \"params\" : [], \"id\" : \"1\" , \"jsonrpc\" : \"2.0\" }));","title":"Query Example"},{"location":"cyberd/rpc/#method-overview","text":"The following is an overview of the RPC methods and their current status. Click the method name for further details such as parameter and return information. # Method Description 1 status Get node info, pubkey, latest block hash, app hash, block height and time. 2 account Get account nonce, pubkey, number, and coins. 3 account_bandwidth Get account bandwidth info for current height. 4 is_link_exist Return true, if given link exist. 5 current_bandwidth_price Returns current bandwidth credit price. 6 index_stats Returns current index entities count.","title":"Method Overview"},{"location":"cyberd/rpc/#method-details","text":"Method status Parameters None Description Get node info, pubkey, latest block hash, app hash, block height and time. Return to Overview Method account Parameters 1. address (string, required) Description Get account nonce, pubkey, number, and coins. Return to Overview Method account_bandwidth Parameters 1. address (string, required) Description Get account bandwidth info for current height. Return to Overview Method is_link_exist Parameters 1. from (cid, required) 2. to (cid, required) 3. address (string, required) Description Return true, if given link exist. Return to Overview Method current_bandwidth_price Parameters None Description Returns current bandwidth credit price. Return to Overview Method index_stats Parameters None Description Returns current index entities count. Return to Overview","title":"Method Details"},{"location":"cyberd/rpc/#notifications-websocket-specific","text":"Cyberd uses standard JSON-RPC notifications to notify clients of changes, rather than requiring clients to poll cyberd for updates. JSON-RPC notifications are a subset of requests, but do not contain an ID. The notification type is categorized by the query params field.","title":"Notifications (WebSocket-specific)"},{"location":"cyberd/rpc/#subscribe-example","text":"Subscribe for new blocks header from js: let websocket = new WebSocket ( \"ws://earth.cybernode.ai:34657/websocket\" ); websocket . send ( JSON . stringify ({ \"method\" : \"subscribe\" , \"params\" : [ \"tm.event='NewBlockHeader'\" ], \"id\" : \"1\" , \"jsonrpc\" : \"2.0\" }));","title":"Subscribe Example"},{"location":"cyberd/rpc/#events-overview","text":"# Event Description 1 NewBlockHeader Sends block header notification when a new block is committed. 2 CoinsReceived Sends a notification when a new coins is arrived to given address. 3 CoinsSend Sends a notification when a new coins is send from given address. 4 \u0421idsLinked Notification of link created by given address. 5 SignedTxCommitted Notify when any tx for given signer is committed.","title":"Events Overview"},{"location":"cyberd/rpc/#events-details","text":"","title":"Events Details"},{"location":"cyberd/rpc/#newblockheader","text":"Event NewBlockHeader Description Sends block header notification when a new block is committed. Query tm.event='NewBlockHeader' Return to Overview","title":"NewBlockHeader"},{"location":"cyberd/rpc/#coinsreceived","text":"Event CoinsReceived Description Sends a notification when a new coins is arrived to given address. Query tm.event='EventTx' AND recipient='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' Return to Overview","title":"CoinsReceived"},{"location":"cyberd/rpc/#coinssend","text":"Event CoinsSend Description Sends a notification when a new coins is send from given address. Query tm.event='EventTx' AND sender='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' Return to Overview","title":"CoinsSend"},{"location":"cyberd/rpc/#idslinked","text":"Event \u0421idsLinked Description Notification of link created by given address. Query tm.event='EventTx' AND signer='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' AND action='link' Return to Overview","title":"\u0421idsLinked"},{"location":"cyberd/rpc/#signedtxcommitted","text":"Event SignedTxCommitted Description Notify when any tx for given signer is committed. Query tm.event='EventTx' AND signer='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' Return to Overview","title":"SignedTxCommitted"},{"location":"cyberd/help/port_forwarding_guide/","text":"Decentralization must be decentralized \u00b6 January 3, 2019, we've launched first public testnet Euler-3. Since this time we have 3 relaunches and much more we'll has in the future. Thanks to our testers and validators we're finding and fixing new bugs every day. But now one fundamental and critical bug is not fixed yet. Currently, we have just 2 seed nodes and they able to upload data and provide connection to other nodes. Unfortunately, this is not about decentralization. An obvious problem of decentralization is that no entity has a global vision of the system, and there is no central authority to direct nodes in making optimal decisions with regard to software updates, routing, or solving consensus. This makes the availability of a decentralized network more difficult to maintain, a factor significant enough to contribute to the failure of a system. By the way, a huge part of disconnections and, as result, validators jailing happens by this reason. Cyberd cli can\u2019t automatically configure your router to open port 26656 , you will need to manually configure your router. We\u2019ve can't make the following instructions to cover all router models; if you need specific help with your router, please ask for help on our devChat . Enabling inbound connections requires two steps: Giving your computer a static (unchanging) internal IP address by configuring the Dynamic Host Configuration Protocol (DHCP) on your router. Forwarding inbound connections from the Internet through your router to your computer where cyberd container can process them. Editing cyberd configuration file. Configuring DHCP \u00b6 In order for your router to direct incoming port 26656 connections to your computer, it needs to know your computer\u2019s internal IP address. However, routers usually give computers dynamic IP addresses that change frequently, so we need to ensure your router always gives your computer the same internal IP address. Start by logging into your router\u2019s administration interface. Most routers can be configured using one of the following URLs, so keep clicking links until you find one that works. If none work, consult your router\u2019s manual. http://192.168.0.1 (some Linksys/Cisco models) http://192.168.1.1 (some D-Link/Netgear models) http://192.168.2.1 (some Belkin/SMC models) http://192.168.123.254 (some US Robotics models) http://10.0.1.1 (some Apple models) Upon connecting, you will probably be prompted for a username and password. If you configured a password, enter it now. If not, the Router Passwords site provides a database of known default username and password pairs. After logging in, you want to search your router\u2019s menus for options related to DHCP, the Dynamic Host Configuration Protocol. These options may also be called Address Reservation. In the reservation configuration, some routers will display a list of computers and devices currently connected to your network, and then let you select a device to make its current IP address permanent. If that\u2019s the case, find the computer running cyberd container in the list, select it, and add it to the list of reserved addresses. Make a note of its current IP address\u2014we\u2019ll use the address in the next section. Other routers require a more manual configuration. For these routers, you will need to look up the fixed address (MAC address) for your computer\u2019s network card and add it to the list. Open a terminal and type ifconfig. Find the result that best matches your connection\u2014a result starting with wlan indicates a wireless connection. Find the field that starts with HWaddr and copy the immediately following field that looks like 01:23:45:67:89:ab . Use that value in the instructions below. Once you have the MAC address, you can fill it into to your router\u2019s manual DHCP assignment table. Also, choose an IP address and make a note of it for the instructions in the next subsection. After entering this information, click the Add or Save button. Then reboot your computer to ensure it gets assigned the address you selected and proceed to the Port Forwarding instructions below. Port Forwarding \u00b6 For this step, you need to know the local IP address of the computer running cyberd container. You should have this information from configuring the DHCP assignment table in the subsection above. Login to your router using the same steps described near the top of the DHCP subsection. Look for an option called Port Forwarding, Port Assignment, or anything with \u201cPort\u201d in its name. On some routers, this option is buried in an Applications & Gaming menu. The port forwarding settings should allow you to map an external port on your router to the \u201cinternal port\u201d of a device on your network. Both the external port and the internal port should be 26656 for cyberd container. Make sure the IP address you enter is the same one you configured in the previous subsection. After filling in the details for the mapping, save the entry. You should not need to restart anything. Just ask us in devChat about successful connection. If you still can\u2019t connect and you use a firewall, you probably need to change your firewall settings. Ubuntu comes with its firewall disabled by default, but if you have enabled it, see the Ubuntu wiki page for information about adding port forwarding rules. If something else went wrong, it\u2019s probably a problem with your router configuration. Re-read the instructions above to see if you missed anything, search the web for help with \u201cport forwarding\u201d, and ask for help on devChat . Configuring cyberd \u00b6 Go to cyberd daemon folder, then go to config folder and open config.toml file for editing. Find peer to peer configuration options section and edit external_address variable with your IP address and port 26656 Restart cyberd container. We call to you, validators, with a proposal to forwarding port 26656 and make you validator-nodes available to the incoming connection. Unfortunately, we can't provide all guides for port forwarding because of they different for each router. But if you faced on with some troubles feel free to contact us in our devChat .","title":"Port forwarding help"},{"location":"cyberd/help/port_forwarding_guide/#decentralization-must-be-decentralized","text":"January 3, 2019, we've launched first public testnet Euler-3. Since this time we have 3 relaunches and much more we'll has in the future. Thanks to our testers and validators we're finding and fixing new bugs every day. But now one fundamental and critical bug is not fixed yet. Currently, we have just 2 seed nodes and they able to upload data and provide connection to other nodes. Unfortunately, this is not about decentralization. An obvious problem of decentralization is that no entity has a global vision of the system, and there is no central authority to direct nodes in making optimal decisions with regard to software updates, routing, or solving consensus. This makes the availability of a decentralized network more difficult to maintain, a factor significant enough to contribute to the failure of a system. By the way, a huge part of disconnections and, as result, validators jailing happens by this reason. Cyberd cli can\u2019t automatically configure your router to open port 26656 , you will need to manually configure your router. We\u2019ve can't make the following instructions to cover all router models; if you need specific help with your router, please ask for help on our devChat . Enabling inbound connections requires two steps: Giving your computer a static (unchanging) internal IP address by configuring the Dynamic Host Configuration Protocol (DHCP) on your router. Forwarding inbound connections from the Internet through your router to your computer where cyberd container can process them. Editing cyberd configuration file.","title":"Decentralization must be decentralized"},{"location":"cyberd/help/port_forwarding_guide/#configuring-dhcp","text":"In order for your router to direct incoming port 26656 connections to your computer, it needs to know your computer\u2019s internal IP address. However, routers usually give computers dynamic IP addresses that change frequently, so we need to ensure your router always gives your computer the same internal IP address. Start by logging into your router\u2019s administration interface. Most routers can be configured using one of the following URLs, so keep clicking links until you find one that works. If none work, consult your router\u2019s manual. http://192.168.0.1 (some Linksys/Cisco models) http://192.168.1.1 (some D-Link/Netgear models) http://192.168.2.1 (some Belkin/SMC models) http://192.168.123.254 (some US Robotics models) http://10.0.1.1 (some Apple models) Upon connecting, you will probably be prompted for a username and password. If you configured a password, enter it now. If not, the Router Passwords site provides a database of known default username and password pairs. After logging in, you want to search your router\u2019s menus for options related to DHCP, the Dynamic Host Configuration Protocol. These options may also be called Address Reservation. In the reservation configuration, some routers will display a list of computers and devices currently connected to your network, and then let you select a device to make its current IP address permanent. If that\u2019s the case, find the computer running cyberd container in the list, select it, and add it to the list of reserved addresses. Make a note of its current IP address\u2014we\u2019ll use the address in the next section. Other routers require a more manual configuration. For these routers, you will need to look up the fixed address (MAC address) for your computer\u2019s network card and add it to the list. Open a terminal and type ifconfig. Find the result that best matches your connection\u2014a result starting with wlan indicates a wireless connection. Find the field that starts with HWaddr and copy the immediately following field that looks like 01:23:45:67:89:ab . Use that value in the instructions below. Once you have the MAC address, you can fill it into to your router\u2019s manual DHCP assignment table. Also, choose an IP address and make a note of it for the instructions in the next subsection. After entering this information, click the Add or Save button. Then reboot your computer to ensure it gets assigned the address you selected and proceed to the Port Forwarding instructions below.","title":"Configuring DHCP"},{"location":"cyberd/help/port_forwarding_guide/#port-forwarding","text":"For this step, you need to know the local IP address of the computer running cyberd container. You should have this information from configuring the DHCP assignment table in the subsection above. Login to your router using the same steps described near the top of the DHCP subsection. Look for an option called Port Forwarding, Port Assignment, or anything with \u201cPort\u201d in its name. On some routers, this option is buried in an Applications & Gaming menu. The port forwarding settings should allow you to map an external port on your router to the \u201cinternal port\u201d of a device on your network. Both the external port and the internal port should be 26656 for cyberd container. Make sure the IP address you enter is the same one you configured in the previous subsection. After filling in the details for the mapping, save the entry. You should not need to restart anything. Just ask us in devChat about successful connection. If you still can\u2019t connect and you use a firewall, you probably need to change your firewall settings. Ubuntu comes with its firewall disabled by default, but if you have enabled it, see the Ubuntu wiki page for information about adding port forwarding rules. If something else went wrong, it\u2019s probably a problem with your router configuration. Re-read the instructions above to see if you missed anything, search the web for help with \u201cport forwarding\u201d, and ask for help on devChat .","title":"Port Forwarding"},{"location":"cyberd/help/port_forwarding_guide/#configuring-cyberd","text":"Go to cyberd daemon folder, then go to config folder and open config.toml file for editing. Find peer to peer configuration options section and edit external_address variable with your IP address and port 26656 Restart cyberd container. We call to you, validators, with a proposal to forwarding port 26656 and make you validator-nodes available to the incoming connection. Unfortunately, we can't provide all guides for port forwarding because of they different for each router. But if you faced on with some troubles feel free to contact us in our devChat .","title":"Configuring cyberd"},{"location":"cyberd/help/run_validator/","text":"Join Cyberd Network As Validator \u00b6 Note . Currently active dev testnet is euler-4 (substitute with that value). Prepare your server \u00b6 First, you have to setup a server. You are supposed to run your validator node all time, so you will need a reliable server to keep it running. Also, you may consider to use any cloud services like AWS. Cyberd is based on Cosmos SDK written in Go. It should work on any platform which can compile and run programs in Go. However, I strongly recommend running the validator node on a Linux server. Rank calculation on a cyberd is benefit GPU computation. They easy to parallelize that why is the best way is to use GPU. Minimal requirements for the next two weeks (until the middle of February): CPU: 4 cores RAM: 16 GB SSD: 256 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS Recommended requirements: CPU: 6 cores RAM: 64 GB SSD: 512 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS Validator setup \u00b6 Third-party software \u00b6 Cyberd main distribution unit is a docker container. All images are located in default Dockerhub registry . In order to access GPU from the container, Nvidia drivers version 410+ and Nvidia docker runtime should be installed on the host system. For great user experience, we propose you to use portainer - docker containers manager. You can skip any subsection of this if you already had and configured necessary software. Docker installation \u00b6 Update the apt package index: sudo apt-get update Install packages to allow apt to use a repository over HTTPS: sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common May require curl installation apt-get install curl Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" Update the apt package index. sudo apt-get update Install the latest version of Docker CE and containerd, or go to the next step to install a specific version: sudo apt-get install docker-ce docker-ce-cli containerd.io If you don\u2019t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group. Create the docker group. sudo groupadd docker Add your user to the docker group. sudo usermod -aG docker $USER 8. Reboot the system for the changes to take effect. Portainer installation \u00b6 Before installing Portainer, download the Portainer image from the DockerHub using the docker pull command below. docker pull portainer/portainer Now run Portainer using the simple docker command below. docker run -d --restart always -p 9000 :9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer Open your browser and go to: localhost:9000 Set password, chose local tab and click connect . All containers will be available at containers tab. Nvidia drivers installation \u00b6 To proceed first add the ppa:graphics-drivers/ppa repository into your system: sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt update Next, identify your graphic card model and recommended driver: ubuntu-drivers devices You should see something like this: == /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00001BA1sv00001462sd000011E4bc03sc00i00 vendor : NVIDIA Corporation model : GP104M [ GeForce GTX 1070 Mobile ] driver : nvidia-driver-390 - third-party free driver : nvidia-driver-410 - third-party free driver : nvidia-driver-396 - third-party free driver : nvidia-driver-415 - third-party free recommended driver : xserver-xorg-video-nouveau - distro free builtin 3. We need 410+ drivers release. As we see v415 is recommended. The command below will install the recommended version of drivers. sudo ubuntu-drivers autoinstall Drivers will install due approximately 10 minutes. DKMS: install completed. Setting up libxdamage1:i386 ( 1 :1.1.4-3 ) ... Setting up libxext6:i386 ( 2 :1.3.3-1 ) ... Setting up libxfixes3:i386 ( 1 :5.0.3-1 ) ... Setting up libnvidia-decode-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up build-essential ( 12 .4ubuntu1 ) ... Setting up libnvidia-gl-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libnvidia-encode-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up nvidia-driver-415 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libxxf86vm1:i386 ( 1 :1.1.4-1 ) ... Setting up libglx-mesa0:i386 ( 18 .0.5-0ubuntu0~18.04.1 ) ... Setting up libglx0:i386 ( 1 .0.0-2ubuntu2.2 ) ... Setting up libgl1:i386 ( 1 .0.0-2ubuntu2.2 ) ... Setting up libnvidia-ifr1-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libnvidia-fbc1-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Processing triggers for libc-bin ( 2 .27-3ubuntu1 ) ... Processing triggers for initramfs-tools ( 0 .130ubuntu3.1 ) ... update-initramfs: Generating /boot/initrd.img-4.15.0-45-generic Reboot the system for the changes to take effect. Check installed drivers nvidia-smi You should see this: +-----------------------------------------------------------------------------+ | NVIDIA-SMI 415.27 Driver Version: 415.27 CUDA Version: 10.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 On | N/A | | N/A 54C P0 36W / N/A | 445MiB / 8117MiB | 0% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 882 G /usr/lib/xorg/Xorg 302MiB | | 0 1046 G /usr/bin/gnome-shell 139MiB | +-----------------------------------------------------------------------------+ Install Nvidia container runtime for docker \u00b6 Add the package repositories curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\ sudo apt-key add - distribution = $( . /etc/os-release ; echo $ID$VERSION_ID ) curl -s -L https://nvidia.github.io/nvidia-docker/ $distribution /nvidia-docker.list | \\ sudo tee /etc/apt/sources.list.d/nvidia-docker.list You should see this: deb https://nvidia.github.io/libnvidia-container/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-container-runtime/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-docker/ubuntu18.04/$(ARCH) / Install nvidia-docker2 and reload the Docker daemon configuration sudo apt-get update sudo apt-get install -y nvidia-docker2 sudo pkill -SIGHUP dockerd Test nvidia-smi with the latest official CUDA image docker run --runtime = nvidia --rm nvidia/cuda:10.0-base nvidia-smi Output logs must should coincide as earlier: Unable to find image 'nvidia/cuda:10.0-base' locally 10.0-base: Pulling from nvidia/cuda 38e2e6cd5626: Pull complete 705054bc3f5b: Pull complete c7051e069564: Pull complete 7308e914506c: Pull complete 5260e5fce42c: Pull complete 8e2b19e62adb: Pull complete Digest: sha256:625491db7e15efcc78a529d3a2e41b77ffb5b002015983fdf90bf28955277d68 Status: Downloaded newer image for nvidia/cuda:10.0-base Fri Feb 1 05:41:12 2019 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 415.27 Driver Version: 415.27 CUDA Version: 10.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 On | N/A | | N/A 55C P0 31W / N/A | 445MiB / 8117MiB | 38% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| +-----------------------------------------------------------------------------+ Your machine is ready to launch fullnode. Cyberd fullnode launching \u00b6 Create folders for keys and data storing where you want for example: mkdir /cyberd/daemon mkdir /cyberd/cli Run fullnode docker run -d --name = cyberd --restart always --runtime = nvidia -p 26656 :26656 -p 26657 :26657 -p 1317 :1317 -v /cyberd/daemon:/root/.cyberd -v /cyberd/cli:/root/.cyberdcli cyberd/cyberd:<testnet_chain_id> 3. After successful container pulling and launch run to check if your node is connected to the testnet: docker exec cyberd cyberdcli status The possible output looks like this: {\"node_info\":{\"protocol_version\":{\"p2p\":\"6\",\"block\":\"9\",\"app\":\"0\"},\"id\":\"93b776d3eb3f3ce9d9bda7164bc8af3acacff7b6\",\"listen_addr\":\"tcp://0.0.0.0:26656\",\"network\":\"euler-1\",\"version\":\"0.29.1\",\"channels\":\"4020212223303800\",\"moniker\":\"anonymous\",\"other\":{\"tx_index\":\"on\",\"rpc_address\":\"tcp://0.0.0.0:26657\"}},\"sync_info\":{\"latest_block_hash\":\"686B4E65415D4E56D3B406153C965C0897D0CE27004E9CABF65064B6A0ED4240\",\"latest_app_hash\":\"0A1F6D260945FD6E926785F07D41049B8060C60A132F5BA49DD54F7B1C5B2522\",\"latest_block_height\":\"45533\",\"latest_block_time\":\"2019-02-01T09:49:19.771375108Z\",\"catching_up\":false},\"validator_info\":{\"address\":\"66098853CF3B61C4313DD487BA21EDF8DECACDF0\",\"pub_key\":{\"type\":\"tendermint/PubKeyEd25519\",\"value\":\"uZrCCdZTJoHE1/v+EvhtZufJgA3zAm1bN4uZA3RyvoY=\"},\"voting_power\":\"0\"}} Your node has started to sync. The syncing process you can see in the terminal. Open a new tab and run following command: docker logs cyberd --follow Or go to localhost:9000 and open logs at cyberd container: Syncing has started. Syncing time depends on your internet bandwidth, connection and blockchain height. As at 2019/02/03 syncing time approximately 15-20 minutes. Once you see in logs that blocks syncing for 1 second your node is synced. Additional information available by API endpoint at localhost:26657 f.e. the number of active validators available here localhost:26657/validators Validator start \u00b6 After your node successful synced you can run validator. Prepare stake address \u00b6 If you already have address with CYB and know seed phrase or private key just restore it into your local keystore. docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover docker exec cyberd cyberdcli keys show <your_key_name> If you have been lucky enought and your Ethereum address has been included in genesis you can import ethereum private key Please, do not import high value Ethereum accounts. This can not be safe! cyberd software is a new software and is not battle tested yet. docker exec -ti cyberd cyberdcli keys add import_private <your_key_name> docker exec cyberd cyberdcli keys show <your_key_name> If you want to create new acccount use the command below. Also, you should send coins to that address to bound them later during validator submitting. docker exec -ti cyberd cyberdcli keys add <your_key_name> docker exec cyberd cyberdcli keys show <your_key_name> is any name you pick to represent this key pair. You have to refer to this later when you use the keys to sign transactions. It will ask you to enter your password twice to encrypt the key. You also need to enter your password when you use your key to sign any transaction. The command returns the address, public key and a seed phrase which you can use it to recover your account if you forget your password later. Keep the seed phrase in a safe place in case you have to use them. The address showing here is your account address. Let\u2019s call this . It stores your assets. Send create validator transaction \u00b6 Validators are actors on the network committing new blocks by submitting their votes. It refers to the node itself, not a single person or a single account. Therefore, the public key here is referring to the node public key, not the public key of the address you have just created. To get the node public key, run the following command: docker exec cyberd cyberd tendermint show-validator It will return a bech32 public key. Let\u2019s call it . The next step you have to declare a validator candidate. The validator candidate is the account which stake the coins. So the validator candidate is an account this time. To declare a validator candidate, run the following command adjusting stake amount and other fields. docker exec -ti cyberd cyberdcli tx staking create-validator \\ --amount = 10000000cyb \\ --min-self-delegation \"1000000\" \\ --pubkey = <your_node_pubkey> \\ --moniker = <your_node_nickname> \\ --trust-node \\ --from = <your_key_name> \\ --commission-rate = \"0.10\" \\ --commission-max-rate = \"0.20\" \\ --commission-max-change-rate = \"0.01\" \\ --chain-id = <testnet_chain_id> Verify that you validating \u00b6 docker exec -ti cyberd cyberdcli query staking validators --trust-node = true If you see your <your_node_nickname> with status Bonded and Jailed false everything must be good. You are validating the network. Maintenance of validator \u00b6 jailing \u00b6 If your validator go under slashing conditions it first go to jail. After this event operator must unjail it manually. docker exec -ti cyberd cyberdcli tx slashing unjail --from = <your_key_name> --chain-id = <testnet_chain_id> Upgrading of validator \u00b6 Updating is easy as pulling the new docker container and launching it again docker pull cyberd/cyberd:<testnet_chain_id> docker stop cyberd docker rm cyberd docker run -d --name = cyberd --restart always --runtime = nvidia \\ -p 26656 :26656 -p 26657 :26657 -p 26660 :26660 \\ -v /cyberd/daemon:/root/.cyberd \\ -v /cyberd/cli:/root/.cyberdcli \\ cyberd/cyberd:<testnet_chain_id> Don't forget to unjail if you was jailed during update.","title":"Run validator"},{"location":"cyberd/help/run_validator/#join-cyberd-network-as-validator","text":"Note . Currently active dev testnet is euler-4 (substitute with that value).","title":"Join Cyberd Network As Validator"},{"location":"cyberd/help/run_validator/#prepare-your-server","text":"First, you have to setup a server. You are supposed to run your validator node all time, so you will need a reliable server to keep it running. Also, you may consider to use any cloud services like AWS. Cyberd is based on Cosmos SDK written in Go. It should work on any platform which can compile and run programs in Go. However, I strongly recommend running the validator node on a Linux server. Rank calculation on a cyberd is benefit GPU computation. They easy to parallelize that why is the best way is to use GPU. Minimal requirements for the next two weeks (until the middle of February): CPU: 4 cores RAM: 16 GB SSD: 256 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS Recommended requirements: CPU: 6 cores RAM: 64 GB SSD: 512 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS","title":"Prepare your server"},{"location":"cyberd/help/run_validator/#validator-setup","text":"","title":"Validator setup"},{"location":"cyberd/help/run_validator/#third-party-software","text":"Cyberd main distribution unit is a docker container. All images are located in default Dockerhub registry . In order to access GPU from the container, Nvidia drivers version 410+ and Nvidia docker runtime should be installed on the host system. For great user experience, we propose you to use portainer - docker containers manager. You can skip any subsection of this if you already had and configured necessary software.","title":"Third-party software"},{"location":"cyberd/help/run_validator/#docker-installation","text":"Update the apt package index: sudo apt-get update Install packages to allow apt to use a repository over HTTPS: sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common May require curl installation apt-get install curl Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" Update the apt package index. sudo apt-get update Install the latest version of Docker CE and containerd, or go to the next step to install a specific version: sudo apt-get install docker-ce docker-ce-cli containerd.io If you don\u2019t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group. Create the docker group. sudo groupadd docker Add your user to the docker group. sudo usermod -aG docker $USER 8. Reboot the system for the changes to take effect.","title":"Docker installation"},{"location":"cyberd/help/run_validator/#portainer-installation","text":"Before installing Portainer, download the Portainer image from the DockerHub using the docker pull command below. docker pull portainer/portainer Now run Portainer using the simple docker command below. docker run -d --restart always -p 9000 :9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer Open your browser and go to: localhost:9000 Set password, chose local tab and click connect . All containers will be available at containers tab.","title":"Portainer installation"},{"location":"cyberd/help/run_validator/#nvidia-drivers-installation","text":"To proceed first add the ppa:graphics-drivers/ppa repository into your system: sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt update Next, identify your graphic card model and recommended driver: ubuntu-drivers devices You should see something like this: == /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00001BA1sv00001462sd000011E4bc03sc00i00 vendor : NVIDIA Corporation model : GP104M [ GeForce GTX 1070 Mobile ] driver : nvidia-driver-390 - third-party free driver : nvidia-driver-410 - third-party free driver : nvidia-driver-396 - third-party free driver : nvidia-driver-415 - third-party free recommended driver : xserver-xorg-video-nouveau - distro free builtin 3. We need 410+ drivers release. As we see v415 is recommended. The command below will install the recommended version of drivers. sudo ubuntu-drivers autoinstall Drivers will install due approximately 10 minutes. DKMS: install completed. Setting up libxdamage1:i386 ( 1 :1.1.4-3 ) ... Setting up libxext6:i386 ( 2 :1.3.3-1 ) ... Setting up libxfixes3:i386 ( 1 :5.0.3-1 ) ... Setting up libnvidia-decode-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up build-essential ( 12 .4ubuntu1 ) ... Setting up libnvidia-gl-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libnvidia-encode-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up nvidia-driver-415 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libxxf86vm1:i386 ( 1 :1.1.4-1 ) ... Setting up libglx-mesa0:i386 ( 18 .0.5-0ubuntu0~18.04.1 ) ... Setting up libglx0:i386 ( 1 .0.0-2ubuntu2.2 ) ... Setting up libgl1:i386 ( 1 .0.0-2ubuntu2.2 ) ... Setting up libnvidia-ifr1-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Setting up libnvidia-fbc1-415:i386 ( 415 .27-0ubuntu0~gpu18.04.1 ) ... Processing triggers for libc-bin ( 2 .27-3ubuntu1 ) ... Processing triggers for initramfs-tools ( 0 .130ubuntu3.1 ) ... update-initramfs: Generating /boot/initrd.img-4.15.0-45-generic Reboot the system for the changes to take effect. Check installed drivers nvidia-smi You should see this: +-----------------------------------------------------------------------------+ | NVIDIA-SMI 415.27 Driver Version: 415.27 CUDA Version: 10.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 On | N/A | | N/A 54C P0 36W / N/A | 445MiB / 8117MiB | 0% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 882 G /usr/lib/xorg/Xorg 302MiB | | 0 1046 G /usr/bin/gnome-shell 139MiB | +-----------------------------------------------------------------------------+","title":"Nvidia drivers installation"},{"location":"cyberd/help/run_validator/#install-nvidia-container-runtime-for-docker","text":"Add the package repositories curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\ sudo apt-key add - distribution = $( . /etc/os-release ; echo $ID$VERSION_ID ) curl -s -L https://nvidia.github.io/nvidia-docker/ $distribution /nvidia-docker.list | \\ sudo tee /etc/apt/sources.list.d/nvidia-docker.list You should see this: deb https://nvidia.github.io/libnvidia-container/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-container-runtime/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-docker/ubuntu18.04/$(ARCH) / Install nvidia-docker2 and reload the Docker daemon configuration sudo apt-get update sudo apt-get install -y nvidia-docker2 sudo pkill -SIGHUP dockerd Test nvidia-smi with the latest official CUDA image docker run --runtime = nvidia --rm nvidia/cuda:10.0-base nvidia-smi Output logs must should coincide as earlier: Unable to find image 'nvidia/cuda:10.0-base' locally 10.0-base: Pulling from nvidia/cuda 38e2e6cd5626: Pull complete 705054bc3f5b: Pull complete c7051e069564: Pull complete 7308e914506c: Pull complete 5260e5fce42c: Pull complete 8e2b19e62adb: Pull complete Digest: sha256:625491db7e15efcc78a529d3a2e41b77ffb5b002015983fdf90bf28955277d68 Status: Downloaded newer image for nvidia/cuda:10.0-base Fri Feb 1 05:41:12 2019 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 415.27 Driver Version: 415.27 CUDA Version: 10.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 On | N/A | | N/A 55C P0 31W / N/A | 445MiB / 8117MiB | 38% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| +-----------------------------------------------------------------------------+ Your machine is ready to launch fullnode.","title":"Install Nvidia container runtime for docker"},{"location":"cyberd/help/run_validator/#cyberd-fullnode-launching","text":"Create folders for keys and data storing where you want for example: mkdir /cyberd/daemon mkdir /cyberd/cli Run fullnode docker run -d --name = cyberd --restart always --runtime = nvidia -p 26656 :26656 -p 26657 :26657 -p 1317 :1317 -v /cyberd/daemon:/root/.cyberd -v /cyberd/cli:/root/.cyberdcli cyberd/cyberd:<testnet_chain_id> 3. After successful container pulling and launch run to check if your node is connected to the testnet: docker exec cyberd cyberdcli status The possible output looks like this: {\"node_info\":{\"protocol_version\":{\"p2p\":\"6\",\"block\":\"9\",\"app\":\"0\"},\"id\":\"93b776d3eb3f3ce9d9bda7164bc8af3acacff7b6\",\"listen_addr\":\"tcp://0.0.0.0:26656\",\"network\":\"euler-1\",\"version\":\"0.29.1\",\"channels\":\"4020212223303800\",\"moniker\":\"anonymous\",\"other\":{\"tx_index\":\"on\",\"rpc_address\":\"tcp://0.0.0.0:26657\"}},\"sync_info\":{\"latest_block_hash\":\"686B4E65415D4E56D3B406153C965C0897D0CE27004E9CABF65064B6A0ED4240\",\"latest_app_hash\":\"0A1F6D260945FD6E926785F07D41049B8060C60A132F5BA49DD54F7B1C5B2522\",\"latest_block_height\":\"45533\",\"latest_block_time\":\"2019-02-01T09:49:19.771375108Z\",\"catching_up\":false},\"validator_info\":{\"address\":\"66098853CF3B61C4313DD487BA21EDF8DECACDF0\",\"pub_key\":{\"type\":\"tendermint/PubKeyEd25519\",\"value\":\"uZrCCdZTJoHE1/v+EvhtZufJgA3zAm1bN4uZA3RyvoY=\"},\"voting_power\":\"0\"}} Your node has started to sync. The syncing process you can see in the terminal. Open a new tab and run following command: docker logs cyberd --follow Or go to localhost:9000 and open logs at cyberd container: Syncing has started. Syncing time depends on your internet bandwidth, connection and blockchain height. As at 2019/02/03 syncing time approximately 15-20 minutes. Once you see in logs that blocks syncing for 1 second your node is synced. Additional information available by API endpoint at localhost:26657 f.e. the number of active validators available here localhost:26657/validators","title":"Cyberd fullnode launching"},{"location":"cyberd/help/run_validator/#validator-start","text":"After your node successful synced you can run validator.","title":"Validator start"},{"location":"cyberd/help/run_validator/#prepare-stake-address","text":"If you already have address with CYB and know seed phrase or private key just restore it into your local keystore. docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover docker exec cyberd cyberdcli keys show <your_key_name> If you have been lucky enought and your Ethereum address has been included in genesis you can import ethereum private key Please, do not import high value Ethereum accounts. This can not be safe! cyberd software is a new software and is not battle tested yet. docker exec -ti cyberd cyberdcli keys add import_private <your_key_name> docker exec cyberd cyberdcli keys show <your_key_name> If you want to create new acccount use the command below. Also, you should send coins to that address to bound them later during validator submitting. docker exec -ti cyberd cyberdcli keys add <your_key_name> docker exec cyberd cyberdcli keys show <your_key_name> is any name you pick to represent this key pair. You have to refer to this later when you use the keys to sign transactions. It will ask you to enter your password twice to encrypt the key. You also need to enter your password when you use your key to sign any transaction. The command returns the address, public key and a seed phrase which you can use it to recover your account if you forget your password later. Keep the seed phrase in a safe place in case you have to use them. The address showing here is your account address. Let\u2019s call this . It stores your assets.","title":"Prepare stake address"},{"location":"cyberd/help/run_validator/#send-create-validator-transaction","text":"Validators are actors on the network committing new blocks by submitting their votes. It refers to the node itself, not a single person or a single account. Therefore, the public key here is referring to the node public key, not the public key of the address you have just created. To get the node public key, run the following command: docker exec cyberd cyberd tendermint show-validator It will return a bech32 public key. Let\u2019s call it . The next step you have to declare a validator candidate. The validator candidate is the account which stake the coins. So the validator candidate is an account this time. To declare a validator candidate, run the following command adjusting stake amount and other fields. docker exec -ti cyberd cyberdcli tx staking create-validator \\ --amount = 10000000cyb \\ --min-self-delegation \"1000000\" \\ --pubkey = <your_node_pubkey> \\ --moniker = <your_node_nickname> \\ --trust-node \\ --from = <your_key_name> \\ --commission-rate = \"0.10\" \\ --commission-max-rate = \"0.20\" \\ --commission-max-change-rate = \"0.01\" \\ --chain-id = <testnet_chain_id>","title":"Send create validator transaction"},{"location":"cyberd/help/run_validator/#verify-that-you-validating","text":"docker exec -ti cyberd cyberdcli query staking validators --trust-node = true If you see your <your_node_nickname> with status Bonded and Jailed false everything must be good. You are validating the network.","title":"Verify that you validating"},{"location":"cyberd/help/run_validator/#maintenance-of-validator","text":"","title":"Maintenance of validator"},{"location":"cyberd/help/run_validator/#jailing","text":"If your validator go under slashing conditions it first go to jail. After this event operator must unjail it manually. docker exec -ti cyberd cyberdcli tx slashing unjail --from = <your_key_name> --chain-id = <testnet_chain_id>","title":"jailing"},{"location":"cyberd/help/run_validator/#upgrading-of-validator","text":"Updating is easy as pulling the new docker container and launching it again docker pull cyberd/cyberd:<testnet_chain_id> docker stop cyberd docker rm cyberd docker run -d --name = cyberd --restart always --runtime = nvidia \\ -p 26656 :26656 -p 26657 :26657 -p 26660 :26660 \\ -v /cyberd/daemon:/root/.cyberd \\ -v /cyberd/cli:/root/.cyberdcli \\ cyberd/cyberd:<testnet_chain_id> Don't forget to unjail if you was jailed during update.","title":"Upgrading of validator"},{"location":"cyberd/help/setup_dev_env/","text":"Setup development environment \u00b6 Prestart \u00b6 Install Golang 1.11+ Install GoLand IDE Import project to GoLand \u00b6 Open Project in GoLand by selecting: Open Project -> selecting cloned repository root folder Enable go mod package management Wait for dependency downloading and indexation Add Run Configurations \u00b6 Add testnet configuration Add run configuration Add reset configuration Running Node \u00b6 Before node running, execute generate testnet run configuration. Folder mytestnet will be added to the project root. In node0 subfolder you can find daemon and cli folders. Daemon folder will contain validator node data. In cli folder you can find initial validator seed. After, just run run node run configuration. You can reset chains data to genesis at any time by executing reset run configuration","title":"Setup Dev Environment"},{"location":"cyberd/help/setup_dev_env/#setup-development-environment","text":"","title":"Setup development environment"},{"location":"cyberd/help/setup_dev_env/#prestart","text":"Install Golang 1.11+ Install GoLand IDE","title":"Prestart"},{"location":"cyberd/help/setup_dev_env/#import-project-to-goland","text":"Open Project in GoLand by selecting: Open Project -> selecting cloned repository root folder Enable go mod package management Wait for dependency downloading and indexation","title":"Import project to GoLand"},{"location":"cyberd/help/setup_dev_env/#add-run-configurations","text":"Add testnet configuration Add run configuration Add reset configuration","title":"Add Run Configurations"},{"location":"cyberd/help/setup_dev_env/#running-node","text":"Before node running, execute generate testnet run configuration. Folder mytestnet will be added to the project root. In node0 subfolder you can find daemon and cli folders. Daemon folder will contain validator node data. In cli folder you can find initial validator seed. After, just run run node run configuration. You can reset chains data to genesis at any time by executing reset run configuration","title":"Running Node"},{"location":"cyberd/help/ultimate-commands-guide_v2/","text":"Ultimate cyberd CLI guide. Testnet: Euler-3 \u00b6 If something wrong... \u00b6 First of all I would like to encourage you to use --help feature if you want to get better experience of using cyberdcli. This is really easy way to find all necessary commands with options and flags. For example you can enter: docker exec cyberd cyberdcli --help You should see this message: Command line interface for interacting with cyberd Usage: cyberdcli [ command ] Available Commands: status Query remote node for status query Querying subcommands tx Transactions subcommands keys Add or view local private keys rest-server Start LCD ( light-client daemon ) , a local REST server version Print the app version link Create and sign a link tx help Help about any command Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding ( hex | b64 | btc ) ( default \"hex\" ) -h, --help help for cyberdcli --home string directory for config and data ( default \"/root/.cyberdcli\" ) -o, --output string Output format ( text | json ) ( default \"text\" ) --trace print out full stack trace on errors Help feature working as a stairs - you can use it with any command to find available options, subcommands and flags. For example lets explore query subcommands: docker exec cyberd cyberdcli query --help now, you can see subcommand structure: Usage: cyberdcli query [ command ] and available subcommands and flags: Available Commands: tendermint-validator-set Get the full tendermint validator set at given height block Get verified data for a the block at given height txs Search for all transactions that match the given tags. tx Matches this txhash over all committed blocks account Query account balance gov Querying commands for the governance module distr Querying commands for the distribution module staking Querying commands for the staking module slashing Querying commands for the slashing module Flags: -h, --help help for query Global Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding ( hex | b64 | btc ) ( default \"hex\" ) --home string directory for config and data ( default \"/root/.cyberdcli\" ) -o, --output string Output format ( text | json ) ( default \"text\" ) --trace print out full stack trace on errors Alright, lets explore account subcommand: docker exec cyberd cyberdcli query account --help Now we see all options available at this subcommands, namely, account address and flags: Usage: cyberdcli query account [ address ] [ flags ] In most cases you need just two extra flags: --from = <your_key_name> \\ --chain-id = <testnet_chain_id> That it. This is very useful ability for using cyberdcli and troubleshooting. Glossary \u00b6 Bandwidth - The recovered unit of your account. Used to complete transactions in the cyberd blockchain. The amount of your bandwidth calculates like: your_cyb_tokens / all_cyb_tokens_in_cyberd * 2000*1000*100 . Messages cost is 500 (exclude link). Transaction consists of one or more messages m_1, m_2, ..., m_n . Transaction cost is 300 + c_1 + c_2 ... + c_n , where c_i - cost of m_i message. Full bandwidth regeneration time is 86400 blocks (24 hours) commission - tokens that you've earned with validation. You can take them at any time. illiquid tokens - non-transferable tokens that you've delegated to the validator. Delegation process duration - 1 block. Unbonding process, or taking back share - 3 weeks. link - reference between CID key and CID value. Link message cost is 100*n , where n is quantity of links in message. Link finalization time is 1 block. New rank for CIDs of link will be recalculated at period from 100 to 200 blocks (from 100 to 200 seconds). liquid tokens - transferable tokens in cyberd blockchain local keystore - store with keys in you local machine rewards - tokens that you've earned with the delegation. To reduce network loads all rewards storing in a pool. You can take your part of bounty at any time by commands at delegator section. - the commission that validator get for the work. Must be fraction >0 and <=1 - delegator address. Starts with cyber most often coinciding with - account address. Starts with cyber - name of account in cybercli - validator address. Starts with cybervaloper - the part of illiquid tokens that you want to unbonding or redelegate. Must be fraction >0 and <=1 - version of testnet. General commands \u00b6 Show all validators \u00b6 Return set of all active and jailed validators. docker exec cyberd cyberdcli query staking validators --trust-node Show chain status \u00b6 Return general chain information docker exec cyberd cyberdcli status --indent Distribution params \u00b6 docker exec cyberd cyberdcli query distr params --trust-node The amount of outstanding rewards \u00b6 Return the sum of rewards in a pool docker exec cyberd cyberdcli query distr outstanding-rewards --trust-node Staking params \u00b6 Chain staking info docker exec cyberd cyberdcli query staking params --trust-node Staking pool \u00b6 docker exec cyberd cyberdcli query staking pool --trust-node Account management \u00b6 Import an account by seed phrase and store it in local keystore \u00b6 docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover Import an account by private key and store it in local keystore (private key could be your ETH private key) \u00b6 docker exec -ti cyberd cyberdcli keys add import_private <your_key_name> Create a new account \u00b6 docker exec -ti cyberd cyberdcli keys add <your_key_name> Show account information \u00b6 Name, address and public key of current account docker exec cyberd cyberdcli keys show <your_key_name> Show account balance. \u00b6 Return account number, balance, public key in 16 and sequence. Don't work if from current account no outgoing transactions. Issue in progress docker exec cyberd cyberdcli query account <your_key_address> List existing keys \u00b6 Return all keys in cyberdcli docker exec cyberd cyberdcli keys list Delete account from cybercli \u00b6 docker exec -ti cyberd cyberdcli keys delete <deleting_key_name> Update account password \u00b6 docker exec -ti cyberd cyberdcli keys update <your_key_name> Send tokens \u00b6 docker exec -ti cyberd cyberdcli tx send <to_address> <amount_cyb> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Linking content \u00b6 Just ipfs hashes available as a CID docker exec -ti cyberd cyberdcli link \\ --from = <your_key_name> \\ --cid-from = <key_phrase_to_link> \\ --cid-to = <content_that_you_want_to_link> \\ --chain-id = <testnet_chain_id> Validator commands \u00b6 Get all validators \u00b6 docker exec cyberd cyberdcli query staking validators \\ --trust-node The amount of commission \u00b6 Available to withdraw validator commission. docker exec cyberd cyberdcli query distr commission <operator_address> State of current validator \u00b6 docker exec cyberd cyberdcli query staking validator <operator_address> Return all delegations to validator \u00b6 docker exec cyberd cyberdcli query staking delegations-to <operator_address> Edit commission in existing validator account \u00b6 docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --commission-rate = <new_comission_rate_percentage> \\ --chain-id = <testnet_chain_id> Withdraw commission for either a delegation \u00b6 docker exec -ti cyberd cyberdcli tx distr withdraw-rewards <operator_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> \\ --commission Edit site and description in existing validator account \u00b6 Will be available at description section docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --details = \"<description>\" \\ --website = <your_website> \\ --chain-id = <testnet_chain_id> Unjail validator previously jailed for downtime \u00b6 docker exec -ti cyberd cyberdcli tx slashing unjail \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Get info about redelegation process from validator \u00b6 docker exec -ti cyberd cyberdcli query staking redelegations-from <operator_address> Delegator commands \u00b6 Return distribution delegator rewards according current validator \u00b6 docker exec -ti cyberd cyberdcli query distr rewards <delegator_address> <operator_address> Return delegator shares with current validator \u00b6 docker exec -ti cyberd cyberdcli query staking delegation <delegator_address> <operator_address> Return all delegations made from one delegator \u00b6 docker exec -ti cyberd cyberdcli query staking delegations <delegator_address> Return all unbonding delegatations from a validator \u00b6 docker exec -ti cyberd cyberdcli query staking unbonding-delegations-from <operator_address> Withdraw rewards for either a delegation \u00b6 docker exec -ti cyberd cyberdcli tx distr withdraw-rewards <operator_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Withdraw all delegation rewards \u00b6 docker exec -ti cyberd cyberdcli tx distr withdraw-all-rewards \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Change the default withdraw address for rewards associated with an address \u00b6 docker exec -ti cyberd cyberdcli tx distr set-withdraw-addr <your_new_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Delegate liquid tokens to a validator \u00b6 docker exec -ti cyberd cyberdcli tx staking delegate <operator_address> <amount_cyb> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Redelegate illiquid tokens from one validator to another in absolute cyb value \u00b6 3 weeks for redelegation. Amount must be less than already delegated. docker exec -ti cyberd cyberdcli tx staking redelegate <old_operator_address> <new_operator_address> <amount_cyb> --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Redelegate illiquid tokens from one validator to another in percentages \u00b6 3 weeks for redelegation. docker exec -ti cyberd cyberdcli tx staking redelegate <old_operator_address> <new_operator_address> <shares_percentage> --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Unbond shares from a validator in absolute cyb value \u00b6 3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond <operator_address> <amount_cyb> --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Unbond shares from a validator in percentages \u00b6 3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond <operator_address> <shares_percentage> --from = <your_key_name> \\ --chain-id = <testnet_chain_id> Get info about unbonding delegation process to current validator \u00b6 docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address> <operator_address> Get info about unbonding delegation process to all unbonded validators \u00b6 docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address> Get info about redelegation process from to current validator \u00b6 docker exec -ti cyberd cyberdcli query staking redelegation <delegator_address> <old_operator_address> <new_operator_address> Get info about all redelegation processes by one delegator \u00b6 docker exec -ti cyberd cyberdcli query staking redelegations <delegator_address>","title":"Cyberdcli help"},{"location":"cyberd/help/ultimate-commands-guide_v2/#ultimate-cyberd-cli-guide-testnet-euler-3","text":"","title":"Ultimate cyberd CLI guide. Testnet: Euler-3"},{"location":"cyberd/help/ultimate-commands-guide_v2/#if-something-wrong","text":"First of all I would like to encourage you to use --help feature if you want to get better experience of using cyberdcli. This is really easy way to find all necessary commands with options and flags. For example you can enter: docker exec cyberd cyberdcli --help You should see this message: Command line interface for interacting with cyberd Usage: cyberdcli [ command ] Available Commands: status Query remote node for status query Querying subcommands tx Transactions subcommands keys Add or view local private keys rest-server Start LCD ( light-client daemon ) , a local REST server version Print the app version link Create and sign a link tx help Help about any command Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding ( hex | b64 | btc ) ( default \"hex\" ) -h, --help help for cyberdcli --home string directory for config and data ( default \"/root/.cyberdcli\" ) -o, --output string Output format ( text | json ) ( default \"text\" ) --trace print out full stack trace on errors Help feature working as a stairs - you can use it with any command to find available options, subcommands and flags. For example lets explore query subcommands: docker exec cyberd cyberdcli query --help now, you can see subcommand structure: Usage: cyberdcli query [ command ] and available subcommands and flags: Available Commands: tendermint-validator-set Get the full tendermint validator set at given height block Get verified data for a the block at given height txs Search for all transactions that match the given tags. tx Matches this txhash over all committed blocks account Query account balance gov Querying commands for the governance module distr Querying commands for the distribution module staking Querying commands for the staking module slashing Querying commands for the slashing module Flags: -h, --help help for query Global Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding ( hex | b64 | btc ) ( default \"hex\" ) --home string directory for config and data ( default \"/root/.cyberdcli\" ) -o, --output string Output format ( text | json ) ( default \"text\" ) --trace print out full stack trace on errors Alright, lets explore account subcommand: docker exec cyberd cyberdcli query account --help Now we see all options available at this subcommands, namely, account address and flags: Usage: cyberdcli query account [ address ] [ flags ] In most cases you need just two extra flags: --from = <your_key_name> \\ --chain-id = <testnet_chain_id> That it. This is very useful ability for using cyberdcli and troubleshooting.","title":"If something wrong..."},{"location":"cyberd/help/ultimate-commands-guide_v2/#glossary","text":"Bandwidth - The recovered unit of your account. Used to complete transactions in the cyberd blockchain. The amount of your bandwidth calculates like: your_cyb_tokens / all_cyb_tokens_in_cyberd * 2000*1000*100 . Messages cost is 500 (exclude link). Transaction consists of one or more messages m_1, m_2, ..., m_n . Transaction cost is 300 + c_1 + c_2 ... + c_n , where c_i - cost of m_i message. Full bandwidth regeneration time is 86400 blocks (24 hours) commission - tokens that you've earned with validation. You can take them at any time. illiquid tokens - non-transferable tokens that you've delegated to the validator. Delegation process duration - 1 block. Unbonding process, or taking back share - 3 weeks. link - reference between CID key and CID value. Link message cost is 100*n , where n is quantity of links in message. Link finalization time is 1 block. New rank for CIDs of link will be recalculated at period from 100 to 200 blocks (from 100 to 200 seconds). liquid tokens - transferable tokens in cyberd blockchain local keystore - store with keys in you local machine rewards - tokens that you've earned with the delegation. To reduce network loads all rewards storing in a pool. You can take your part of bounty at any time by commands at delegator section. - the commission that validator get for the work. Must be fraction >0 and <=1 - delegator address. Starts with cyber most often coinciding with - account address. Starts with cyber - name of account in cybercli - validator address. Starts with cybervaloper - the part of illiquid tokens that you want to unbonding or redelegate. Must be fraction >0 and <=1 - version of testnet.","title":"Glossary"},{"location":"cyberd/help/ultimate-commands-guide_v2/#general-commands","text":"","title":"General commands"},{"location":"cyberd/help/ultimate-commands-guide_v2/#show-all-validators","text":"Return set of all active and jailed validators. docker exec cyberd cyberdcli query staking validators --trust-node","title":"Show all validators"},{"location":"cyberd/help/ultimate-commands-guide_v2/#show-chain-status","text":"Return general chain information docker exec cyberd cyberdcli status --indent","title":"Show chain status"},{"location":"cyberd/help/ultimate-commands-guide_v2/#distribution-params","text":"docker exec cyberd cyberdcli query distr params --trust-node","title":"Distribution params"},{"location":"cyberd/help/ultimate-commands-guide_v2/#the-amount-of-outstanding-rewards","text":"Return the sum of rewards in a pool docker exec cyberd cyberdcli query distr outstanding-rewards --trust-node","title":"The amount of outstanding rewards"},{"location":"cyberd/help/ultimate-commands-guide_v2/#staking-params","text":"Chain staking info docker exec cyberd cyberdcli query staking params --trust-node","title":"Staking params"},{"location":"cyberd/help/ultimate-commands-guide_v2/#staking-pool","text":"docker exec cyberd cyberdcli query staking pool --trust-node","title":"Staking pool"},{"location":"cyberd/help/ultimate-commands-guide_v2/#account-management","text":"","title":"Account management"},{"location":"cyberd/help/ultimate-commands-guide_v2/#import-an-account-by-seed-phrase-and-store-it-in-local-keystore","text":"docker exec -ti cyberd cyberdcli keys add <your_key_name> --recover","title":"Import an account by seed phrase and store it in local keystore"},{"location":"cyberd/help/ultimate-commands-guide_v2/#import-an-account-by-private-key-and-store-it-in-local-keystore-private-key-could-be-your-eth-private-key","text":"docker exec -ti cyberd cyberdcli keys add import_private <your_key_name>","title":"Import an account by private key and store it in local keystore (private key could be your ETH private key)"},{"location":"cyberd/help/ultimate-commands-guide_v2/#create-a-new-account","text":"docker exec -ti cyberd cyberdcli keys add <your_key_name>","title":"Create a new account"},{"location":"cyberd/help/ultimate-commands-guide_v2/#show-account-information","text":"Name, address and public key of current account docker exec cyberd cyberdcli keys show <your_key_name>","title":"Show account information"},{"location":"cyberd/help/ultimate-commands-guide_v2/#show-account-balance","text":"Return account number, balance, public key in 16 and sequence. Don't work if from current account no outgoing transactions. Issue in progress docker exec cyberd cyberdcli query account <your_key_address>","title":"Show account balance."},{"location":"cyberd/help/ultimate-commands-guide_v2/#list-existing-keys","text":"Return all keys in cyberdcli docker exec cyberd cyberdcli keys list","title":"List existing keys"},{"location":"cyberd/help/ultimate-commands-guide_v2/#delete-account-from-cybercli","text":"docker exec -ti cyberd cyberdcli keys delete <deleting_key_name>","title":"Delete account from cybercli"},{"location":"cyberd/help/ultimate-commands-guide_v2/#update-account-password","text":"docker exec -ti cyberd cyberdcli keys update <your_key_name>","title":"Update account password"},{"location":"cyberd/help/ultimate-commands-guide_v2/#send-tokens","text":"docker exec -ti cyberd cyberdcli tx send <to_address> <amount_cyb> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Send tokens"},{"location":"cyberd/help/ultimate-commands-guide_v2/#linking-content","text":"Just ipfs hashes available as a CID docker exec -ti cyberd cyberdcli link \\ --from = <your_key_name> \\ --cid-from = <key_phrase_to_link> \\ --cid-to = <content_that_you_want_to_link> \\ --chain-id = <testnet_chain_id>","title":"Linking content"},{"location":"cyberd/help/ultimate-commands-guide_v2/#validator-commands","text":"","title":"Validator commands"},{"location":"cyberd/help/ultimate-commands-guide_v2/#get-all-validators","text":"docker exec cyberd cyberdcli query staking validators \\ --trust-node","title":"Get all validators"},{"location":"cyberd/help/ultimate-commands-guide_v2/#the-amount-of-commission","text":"Available to withdraw validator commission. docker exec cyberd cyberdcli query distr commission <operator_address>","title":"The amount of commission"},{"location":"cyberd/help/ultimate-commands-guide_v2/#state-of-current-validator","text":"docker exec cyberd cyberdcli query staking validator <operator_address>","title":"State of current validator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#return-all-delegations-to-validator","text":"docker exec cyberd cyberdcli query staking delegations-to <operator_address>","title":"Return all delegations to validator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#edit-commission-in-existing-validator-account","text":"docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --commission-rate = <new_comission_rate_percentage> \\ --chain-id = <testnet_chain_id>","title":"Edit commission in existing validator account"},{"location":"cyberd/help/ultimate-commands-guide_v2/#withdraw-commission-for-either-a-delegation","text":"docker exec -ti cyberd cyberdcli tx distr withdraw-rewards <operator_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id> \\ --commission","title":"Withdraw commission for either a delegation"},{"location":"cyberd/help/ultimate-commands-guide_v2/#edit-site-and-description-in-existing-validator-account","text":"Will be available at description section docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from = <your_key_name> \\ --details = \"<description>\" \\ --website = <your_website> \\ --chain-id = <testnet_chain_id>","title":"Edit site and description in existing validator account"},{"location":"cyberd/help/ultimate-commands-guide_v2/#unjail-validator-previously-jailed-for-downtime","text":"docker exec -ti cyberd cyberdcli tx slashing unjail \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Unjail validator previously jailed for downtime"},{"location":"cyberd/help/ultimate-commands-guide_v2/#get-info-about-redelegation-process-from-validator","text":"docker exec -ti cyberd cyberdcli query staking redelegations-from <operator_address>","title":"Get info about redelegation process from validator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#delegator-commands","text":"","title":"Delegator commands"},{"location":"cyberd/help/ultimate-commands-guide_v2/#return-distribution-delegator-rewards-according-current-validator","text":"docker exec -ti cyberd cyberdcli query distr rewards <delegator_address> <operator_address>","title":"Return distribution delegator rewards according current validator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#return-delegator-shares-with-current-validator","text":"docker exec -ti cyberd cyberdcli query staking delegation <delegator_address> <operator_address>","title":"Return delegator shares with current validator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#return-all-delegations-made-from-one-delegator","text":"docker exec -ti cyberd cyberdcli query staking delegations <delegator_address>","title":"Return all delegations made from one delegator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#return-all-unbonding-delegatations-from-a-validator","text":"docker exec -ti cyberd cyberdcli query staking unbonding-delegations-from <operator_address>","title":"Return all unbonding delegatations from a validator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#withdraw-rewards-for-either-a-delegation","text":"docker exec -ti cyberd cyberdcli tx distr withdraw-rewards <operator_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Withdraw rewards for either a delegation"},{"location":"cyberd/help/ultimate-commands-guide_v2/#withdraw-all-delegation-rewards","text":"docker exec -ti cyberd cyberdcli tx distr withdraw-all-rewards \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Withdraw all delegation rewards"},{"location":"cyberd/help/ultimate-commands-guide_v2/#change-the-default-withdraw-address-for-rewards-associated-with-an-address","text":"docker exec -ti cyberd cyberdcli tx distr set-withdraw-addr <your_new_address> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Change the default withdraw address for rewards associated with an address"},{"location":"cyberd/help/ultimate-commands-guide_v2/#delegate-liquid-tokens-to-a-validator","text":"docker exec -ti cyberd cyberdcli tx staking delegate <operator_address> <amount_cyb> \\ --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Delegate liquid tokens to a validator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#redelegate-illiquid-tokens-from-one-validator-to-another-in-absolute-cyb-value","text":"3 weeks for redelegation. Amount must be less than already delegated. docker exec -ti cyberd cyberdcli tx staking redelegate <old_operator_address> <new_operator_address> <amount_cyb> --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Redelegate illiquid tokens from one validator to another in absolute cyb value"},{"location":"cyberd/help/ultimate-commands-guide_v2/#redelegate-illiquid-tokens-from-one-validator-to-another-in-percentages","text":"3 weeks for redelegation. docker exec -ti cyberd cyberdcli tx staking redelegate <old_operator_address> <new_operator_address> <shares_percentage> --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Redelegate illiquid tokens from one validator to another in percentages"},{"location":"cyberd/help/ultimate-commands-guide_v2/#unbond-shares-from-a-validator-in-absolute-cyb-value","text":"3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond <operator_address> <amount_cyb> --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Unbond shares from a validator in absolute cyb value"},{"location":"cyberd/help/ultimate-commands-guide_v2/#unbond-shares-from-a-validator-in-percentages","text":"3 weeks unbonding. docker exec -ti cyberd cyberdcli tx staking unbond <operator_address> <shares_percentage> --from = <your_key_name> \\ --chain-id = <testnet_chain_id>","title":"Unbond shares from a validator in percentages"},{"location":"cyberd/help/ultimate-commands-guide_v2/#get-info-about-unbonding-delegation-process-to-current-validator","text":"docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address> <operator_address>","title":"Get info about unbonding delegation process to current validator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#get-info-about-unbonding-delegation-process-to-all-unbonded-validators","text":"docker exec -ti cyberd cyberdcli query staking unbonding-delegation <delegator_address>","title":"Get info about unbonding delegation process to all unbonded validators"},{"location":"cyberd/help/ultimate-commands-guide_v2/#get-info-about-redelegation-process-from-to-current-validator","text":"docker exec -ti cyberd cyberdcli query staking redelegation <delegator_address> <old_operator_address> <new_operator_address>","title":"Get info about redelegation process from to current validator"},{"location":"cyberd/help/ultimate-commands-guide_v2/#get-info-about-all-redelegation-processes-by-one-delegator","text":"docker exec -ti cyberd cyberdcli query staking redelegations <delegator_address>","title":"Get info about all redelegation processes by one delegator"},{"location":"js-amino/Changelog/","text":"Change Log \u00b6 Unreleased \u00b6 Closed issues: Question: Cosmos SDK types library #41 Encoding of default values #27 Converting type to typ3 with considering options. #24 Typo on field options #23 webpack babel package error #17 publish to npm #16 Add options for encode/decode Like Go-Amino #14 Encoding int32, int64 to signed varint? #9 Bug when encoding byte slice #8 Can I create slice of interface? #7 How to create slice of structs? #6 Is this repo maintained? #5 Need to provide unit test #3 Support encode and decode with int32,int64,int16 - The same feature for unsigned integer #2 Add examples #1 Merged pull requests: Rename comos_base_account.js to cosmos_base_account.js #42 ( jordansexton ) 30 add ci components for release #40 ( SaveTheAles ) 30 add ci components for release #39 ( SaveTheAles ) docs for first major release #38 ( litvintech ) docs: add ethanfrey as a contributor #37 ( allcontributors[bot] ) docs: add cyberadmin as a contributor #36 ( allcontributors[bot] ) docs: add litvintech as a contributor #35 ( allcontributors[bot] ) docs: add SaveTheAles as a contributor #34 ( allcontributors[bot] ) docs: add philipstanislaus as a contributor #33 ( allcontributors[bot] ) docs: add TanNgocDo as a contributor #32 ( allcontributors[bot] ) docs: add Thunnini as a contributor #31 ( allcontributors[bot] ) Fixed default encoding #28 ( litvintech ) Add test interface array #26 ( Thunnini ) Fix encoding int32, 64 to binFixed #25 ( Thunnini ) Support test for simple struct #22 ( Thunnini ) Initial support testing #20 ( Thunnini ) add int16 encoding #19 ( Thunnini ) Add documentation, fix broken examples #18 ( philipstanislaus ) Experimentally support json encoding/decoding #13 ( Thunnini ) Add support to encode, decode utf8 #12 ( Thunnini ) * This Change Log was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"js-amino/Changelog/#change-log","text":"","title":"Change Log"},{"location":"js-amino/Changelog/#unreleased","text":"Closed issues: Question: Cosmos SDK types library #41 Encoding of default values #27 Converting type to typ3 with considering options. #24 Typo on field options #23 webpack babel package error #17 publish to npm #16 Add options for encode/decode Like Go-Amino #14 Encoding int32, int64 to signed varint? #9 Bug when encoding byte slice #8 Can I create slice of interface? #7 How to create slice of structs? #6 Is this repo maintained? #5 Need to provide unit test #3 Support encode and decode with int32,int64,int16 - The same feature for unsigned integer #2 Add examples #1 Merged pull requests: Rename comos_base_account.js to cosmos_base_account.js #42 ( jordansexton ) 30 add ci components for release #40 ( SaveTheAles ) 30 add ci components for release #39 ( SaveTheAles ) docs for first major release #38 ( litvintech ) docs: add ethanfrey as a contributor #37 ( allcontributors[bot] ) docs: add cyberadmin as a contributor #36 ( allcontributors[bot] ) docs: add litvintech as a contributor #35 ( allcontributors[bot] ) docs: add SaveTheAles as a contributor #34 ( allcontributors[bot] ) docs: add philipstanislaus as a contributor #33 ( allcontributors[bot] ) docs: add TanNgocDo as a contributor #32 ( allcontributors[bot] ) docs: add Thunnini as a contributor #31 ( allcontributors[bot] ) Fixed default encoding #28 ( litvintech ) Add test interface array #26 ( Thunnini ) Fix encoding int32, 64 to binFixed #25 ( Thunnini ) Support test for simple struct #22 ( Thunnini ) Initial support testing #20 ( Thunnini ) add int16 encoding #19 ( Thunnini ) Add documentation, fix broken examples #18 ( philipstanislaus ) Experimentally support json encoding/decoding #13 ( Thunnini ) Add support to encode, decode utf8 #12 ( Thunnini ) * This Change Log was automatically generated by github_changelog_generator","title":"Unreleased"},{"location":"js-amino/Contributing/","text":"Contributing to js-amino \u00b6 Thank you for considering a contribution to js-amino ! This guide explains how to: * Get started * Development workflow * Get help if you encounter trouble Get in touch \u00b6 Before starting to work on a feature or a fix, please open an issue to discuss the use case or bug with us. This can save both you and us a lot of time. For any non-trivial change, we'll ask you to create a short design document explaining: Why is this change done? What's the use case? What test cases should it have? What could go wrong? How will it roughly be implemented? (We'll happily provide code pointers to save you time) Development Workflow \u00b6 Fork repo \u00b6 Fork repo to your account to continue work there. Creating Commits And Writing Commit Messages \u00b6 The commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages: Keep commits discrete: avoid including multiple unrelated changes in a single commit Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation Include GitHub issue in the commit message on a first line at the beginning. Example: #123 Refactor CONTRIBUTING.md --Add Creating Commits And Writing Commit Messages Section Submitting Your Change \u00b6 After you submit your pull request, a core developer will review it. It is normal that this takes several iterations, so don't get discouraged by change requests. They ensure the high quality that we all enjoy. Getting Help \u00b6 If you run into any trouble, please reach out to us on the issue you are working on. Our Thanks \u00b6 We deeply appreciate your effort toward improving js-amino. For any contribution, large or small, you will be immortalized in the release notes for the version you've contributed to.","title":"Contributing"},{"location":"js-amino/Contributing/#contributing-to-js-amino","text":"Thank you for considering a contribution to js-amino ! This guide explains how to: * Get started * Development workflow * Get help if you encounter trouble","title":"Contributing to js-amino"},{"location":"js-amino/Contributing/#get-in-touch","text":"Before starting to work on a feature or a fix, please open an issue to discuss the use case or bug with us. This can save both you and us a lot of time. For any non-trivial change, we'll ask you to create a short design document explaining: Why is this change done? What's the use case? What test cases should it have? What could go wrong? How will it roughly be implemented? (We'll happily provide code pointers to save you time)","title":"Get in touch"},{"location":"js-amino/Contributing/#development-workflow","text":"","title":"Development Workflow"},{"location":"js-amino/Contributing/#fork-repo","text":"Fork repo to your account to continue work there.","title":"Fork repo"},{"location":"js-amino/Contributing/#creating-commits-and-writing-commit-messages","text":"The commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages: Keep commits discrete: avoid including multiple unrelated changes in a single commit Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation Include GitHub issue in the commit message on a first line at the beginning. Example: #123 Refactor CONTRIBUTING.md --Add Creating Commits And Writing Commit Messages Section","title":"Creating Commits And Writing Commit Messages"},{"location":"js-amino/Contributing/#submitting-your-change","text":"After you submit your pull request, a core developer will review it. It is normal that this takes several iterations, so don't get discouraged by change requests. They ensure the high quality that we all enjoy.","title":"Submitting Your Change"},{"location":"js-amino/Contributing/#getting-help","text":"If you run into any trouble, please reach out to us on the issue you are working on.","title":"Getting Help"},{"location":"js-amino/Contributing/#our-thanks","text":"We deeply appreciate your effort toward improving js-amino. For any contribution, large or small, you will be immortalized in the release notes for the version you've contributed to.","title":"Our Thanks"},{"location":"js-amino/Overview/","text":"An Implementation of Amino for clients with Javascript Current state: 1.0.0 First major public release Built and maintenance by contributors and cyber\u2022Congress For more information spec, please refer: https://github.com/tendermint/go-amino Features: \u00b6 Encode and Decode simple types: ints 8/16/32/64, booleans, strings, bytes Encode and Decode recursive Structs and Interfaces, Arrays Encode simple Time data Install From NPM: \u00b6 Run npm i js-amino Install From Source \u00b6 Run npm install Running The Examples \u00b6 cd src/examples go get Run examples, e. g. in Go: go run string.go and in JS node string.js Running The Unit Test \u00b6 Run npm test To Do: \u00b6 Full support for Time encoding and decoding More Unit test Benchmarking Gitcoin program \u00b6 We want to pay you for your contribution! We constantly fund our issues on gitcoin and attach good description for them with project state and user stories. We try to answer to comments regular in issues and in our devChat . Our cosmos ecosystem initiative \u00b6 Usage (MsgMultiSend example) \u00b6 const { Codec , FieldOtions , TypeFactory , Utils , Types , WireTypes , } = require ( '../index' ); let StdTx = TypeFactory . create ( 'StdTx' , [{ name : 'msg' , type : Types . ArrayInterface , }, { name : 'fee' , type : Types . Struct , }, { name : 'signatures' , type : Types . ArrayStruct , }, { name : 'memo' , type : Types . String , }, ]); let MsgMultiSend = TypeFactory . create ( 'MsgMultiSend' , [{ name : \"inputs\" , type : Types . ArrayStruct }, { name : \"outputs\" , type : Types . ArrayStruct } ]); let Coin = TypeFactory . create ( 'coin' , [{ name : 'denom' , type : Types . String , }, { name : 'amount' , type : Types . String , } ]); let Input = TypeFactory . create ( 'input' , [{ name : 'address' , type : Types . String , }, { name : 'coins' , type : Types . ArrayStruct , } ]); let Output = TypeFactory . create ( 'output' , [{ name : 'address' , type : Types . String , }, { name : 'coins' , type : Types . ArrayStruct , } ]); let Fee = TypeFactory . create ( 'fee' , [{ name : 'amount' , type : Types . ArrayStruct , }, { name : 'gas' , type : Types . Int64 , } ]); let PubKeySecp256k1 = TypeFactory . create ( 'PubKeySecp256k1' , [{ name : 's' , type : Types . ByteSlice , }], Types . ByteSlice ) let Signature = TypeFactory . create ( 'signature' , [{ name : 'pub_key' , type : Types . Interface , }, { name : 'signature' , type : Types . ByteSlice , } ]) let codec = new Codec (); codec . registerConcrete ( new StdTx (), 'auth/StdTx' , {}); codec . registerConcrete ( new MsgMultiSend (), 'cosmos-sdk/MsgMultiSend' , {}); codec . registerConcrete ( new PubKeySecp256k1 (), 'tendermint/PubKeySecp256k1' , {}); let coin = new Coin ( 'cyb' , \"10000\" ); let addressFrom = [ 59 , 58 , 243 , 13 , 132 , 163 , 164 , 202 , 233 , 7 , 236 , 93 , 136 , 166 , 181 , 175 , 236 , 69 , 48 , 186 ] let addressTo = [ 94 , 222 , 114 , 42 , 196 , 107 , 51 , 203 , 139 , 142 , 219 , 243 , 137 , 60 , 54 , 250 , 139 , 153 , 46 , 168 ] let input = new Input ( addressFrom , [ coin ]); let output = new Output ( addressTo , [ coin ]); let sendMultiMsg = new MsgMultiSend ([ input ], [ output ]); let fee = new Fee ([ new Coin ( 'cyb' , '0' )], 200000 ); let pubKey = new PubKeySecp256k1 ([ 2 , 27 , 24 , 0 , 255 , 96 , 147 , 21 , 64 , 29 , 132 , 192 , 108 , 219 , 59 , 134 , 206 , 201 , 126 , 224 , 63 , 160 , 24 , 236 , 170 , 124 , 164 , 95 , 43 , 180 , 6 , 246 , 250 ]); let signature = [ 165 , 76 , 109 , 61 , 53 , 129 , 190 , 147 , 52 , 224 , 34 , 106 , 235 , 208 , 224 , 36 , 190 , 25 , 204 , 36 , 226 , 129 , 97 , 109 , 35 , 130 , 217 , 228 , 144 , 106 , 10 , 134 , 14 , 183 , 95 , 252 , 219 , 235 , 22 , 92 , 37 , 53 , 3 , 89 , 111 , 173 , 12 , 158 , 146 , 71 , 82 , 113 , 236 , 241 , 170 , 121 , 217 , 20 , 236 , 23 , 131 , 35 , 80 , 29 ]; let sig = new Signature ( pubKey , signature ); let stdTx = new StdTx ([ sendMultiMsg ], fee , [ sig ], 'elonmusk' ); let jsonTx = codec . marshalJson ( stdTx ); let decodedDataTx = new StdTx (); console . log ( \"Binary stdTx:\\n\" , ( codec . marshalBinary ( stdTx )). toString ()); console . log ( \"Json:\\n\" , jsonTx ); codec . unMarshalBinary ( codec . marshalBinary ( stdTx ), decodedDataTx ); console . log ( \"Decoded data:\\n\" , decodedDataTx . JsObject ()); Binary stdTx : 220 , 1 , 240 , 98 , 93 , 238 , 10 , 80 , 194 , 104 , 154 , 209 , 10 , 36 , 10 , 20 , 59 , 58 , 243 , 13 , 132 , 163 , 164 , 202 , 233 , 7 , 236 , 93 , 136 , 166 , 181 , 175 , 236 , 69 , 48 , 186 , 18 , 12 , 10 , 3 , 99 , 121 , 98 , 18 , 5 , 49 , 48 , 48 , 48 , 48 , 18 , 36 , 10 , 20 , 94 , 222 , 114 , 42 , 196 , 107 , 51 , 203 , 139 , 142 , 219 , 243 , 137 , 60 , 54 , 250 , 139 , 153 , 46 , 168 , 18 , 12 , 10 , 3 , 99 , 121 , 98 , 18 , 5 , 49 , 48 , 48 , 48 , 48 , 18 , 14 , 10 , 8 , 10 , 3 , 99 , 121 , 98 , 18 , 1 , 48 , 16 , 192 , 154 , 12 , 26 , 106 , 10 , 38 , 235 , 90 , 233 , 135 , 33 , 2 , 27 , 24 , 0 , 255 , 96 , 147 , 21 , 64 , 29 , 132 , 192 , 108 , 219 , 59 , 134 , 206 , 201 , 126 , 224 , 63 , 160 , 24 , 236 , 170 , 124 , 164 , 95 , 43 , 180 , 6 , 246 , 250 , 18 , 64 , 165 , 76 , 109 , 61 , 53 , 129 , 190 , 147 , 52 , 224 , 34 , 106 , 235 , 208 , 224 , 36 , 190 , 25 , 204 , 36 , 226 , 129 , 97 , 109 , 35 , 130 , 217 , 228 , 144 , 106 , 10 , 134 , 14 , 183 , 95 , 252 , 219 , 235 , 22 , 92 , 37 , 53 , 3 , 89 , 111 , 173 , 12 , 158 , 146 , 71 , 82 , 113 , 236 , 241 , 170 , 121 , 217 , 20 , 236 , 23 , 131 , 35 , 80 , 29 , 34 , 8 , 101 , 108 , 111 , 110 , 109 , 117 , 115 , 107 Json : { \"type\" : \"auth/StdTx\" , \"value\" : { \"msg\" : [{ \"type\" : \"cosmos-sdk/MsgMultiSend\" , \"value\" : { \"inputs\" : [{ \"address\" : [ 59 , 58 , 243 , 13 , 132 , 163 , 164 , 202 , 233 , 7 , 236 , 93 , 136 , 166 , 181 , 175 , 236 , 69 , 48 , 186 ], \"coins\" : [{ \"denom\" : \"cyb\" , \"amount\" : \"10000\" }]}], \"outputs\" : [{ \"address\" : [ 94 , 222 , 114 , 42 , 196 , 107 , 51 , 203 , 139 , 142 , 219 , 243 , 137 , 60 , 54 , 250 , 139 , 153 , 46 , 168 ], \"coins\" : [{ \"denom\" : \"cyb\" , \"amount\" : \"10000\" }]}]}}], \"fee\" : { \"amount\" : [{ \"denom\" : \"cyb\" , \"amount\" : \"0\" }], \"gas\" : \"200000\" }, \"signatures\" : [{ \"pub_key\" : { \"type\" : \"tendermint/PubKeySecp256k1\" , \"value\" : \"AhsYAP9gkxVAHYTAbNs7hs7JfuA/oBjsqnykXyu0Bvb6\" }, \"signature\" : \"pUxtPTWBvpM04CJq69DgJL4ZzCTigWFtI4LZ5JBqCoYOt1/82+sWXCU1A1lvrQyekkdScezxqnnZFOwXgyNQHQ==\" }], \"memo\" : \"elonmusk\" }} Decoded data : { msg : [ { inputs : [ Array ], outputs : [ Array ] } ], fee : { amount : [ [ Object ] ], gas : 200000 }, signatures : [ { pub_key : [ Array ], signature : [ Array ] } ], memo : 'elonmusk' } Contributing Guide \u00b6 Contribution are welcome! Please read this guide before contributing. Contributors \u00b6 Thanks goes to these wonderful people ( emoji key ): JungHwan Tony Yun \ud83d\udcbb TanNgocDo \ud83d\udcbb \ud83d\udea7 philipstanislaus \ud83d\udcd6 Ales Puchilo \ud83d\udcc6 Valery Litvin \ud83d\udcbb Cyber Admin \ud83d\udcd6 Ethan Frey \u26a0\ufe0f This project follows the all-contributors specification. Contributions of any kind welcome! License \u00b6 Code are licensed under MIT license by contributors","title":"Overview"},{"location":"js-amino/Overview/#features","text":"Encode and Decode simple types: ints 8/16/32/64, booleans, strings, bytes Encode and Decode recursive Structs and Interfaces, Arrays Encode simple Time data","title":"Features:"},{"location":"js-amino/Overview/#install-from-npm","text":"Run npm i js-amino","title":"Install From NPM:"},{"location":"js-amino/Overview/#install-from-source","text":"Run npm install","title":"Install From Source"},{"location":"js-amino/Overview/#running-the-examples","text":"cd src/examples go get Run examples, e. g. in Go: go run string.go and in JS node string.js","title":"Running The Examples"},{"location":"js-amino/Overview/#running-the-unit-test","text":"Run npm test","title":"Running The Unit Test"},{"location":"js-amino/Overview/#to-do","text":"Full support for Time encoding and decoding More Unit test Benchmarking","title":"To Do:"},{"location":"js-amino/Overview/#gitcoin-program","text":"We want to pay you for your contribution! We constantly fund our issues on gitcoin and attach good description for them with project state and user stories. We try to answer to comments regular in issues and in our devChat .","title":"Gitcoin program"},{"location":"js-amino/Overview/#our-cosmos-ecosystem-initiative","text":"","title":"Our cosmos ecosystem initiative"},{"location":"js-amino/Overview/#usage-msgmultisend-example","text":"const { Codec , FieldOtions , TypeFactory , Utils , Types , WireTypes , } = require ( '../index' ); let StdTx = TypeFactory . create ( 'StdTx' , [{ name : 'msg' , type : Types . ArrayInterface , }, { name : 'fee' , type : Types . Struct , }, { name : 'signatures' , type : Types . ArrayStruct , }, { name : 'memo' , type : Types . String , }, ]); let MsgMultiSend = TypeFactory . create ( 'MsgMultiSend' , [{ name : \"inputs\" , type : Types . ArrayStruct }, { name : \"outputs\" , type : Types . ArrayStruct } ]); let Coin = TypeFactory . create ( 'coin' , [{ name : 'denom' , type : Types . String , }, { name : 'amount' , type : Types . String , } ]); let Input = TypeFactory . create ( 'input' , [{ name : 'address' , type : Types . String , }, { name : 'coins' , type : Types . ArrayStruct , } ]); let Output = TypeFactory . create ( 'output' , [{ name : 'address' , type : Types . String , }, { name : 'coins' , type : Types . ArrayStruct , } ]); let Fee = TypeFactory . create ( 'fee' , [{ name : 'amount' , type : Types . ArrayStruct , }, { name : 'gas' , type : Types . Int64 , } ]); let PubKeySecp256k1 = TypeFactory . create ( 'PubKeySecp256k1' , [{ name : 's' , type : Types . ByteSlice , }], Types . ByteSlice ) let Signature = TypeFactory . create ( 'signature' , [{ name : 'pub_key' , type : Types . Interface , }, { name : 'signature' , type : Types . ByteSlice , } ]) let codec = new Codec (); codec . registerConcrete ( new StdTx (), 'auth/StdTx' , {}); codec . registerConcrete ( new MsgMultiSend (), 'cosmos-sdk/MsgMultiSend' , {}); codec . registerConcrete ( new PubKeySecp256k1 (), 'tendermint/PubKeySecp256k1' , {}); let coin = new Coin ( 'cyb' , \"10000\" ); let addressFrom = [ 59 , 58 , 243 , 13 , 132 , 163 , 164 , 202 , 233 , 7 , 236 , 93 , 136 , 166 , 181 , 175 , 236 , 69 , 48 , 186 ] let addressTo = [ 94 , 222 , 114 , 42 , 196 , 107 , 51 , 203 , 139 , 142 , 219 , 243 , 137 , 60 , 54 , 250 , 139 , 153 , 46 , 168 ] let input = new Input ( addressFrom , [ coin ]); let output = new Output ( addressTo , [ coin ]); let sendMultiMsg = new MsgMultiSend ([ input ], [ output ]); let fee = new Fee ([ new Coin ( 'cyb' , '0' )], 200000 ); let pubKey = new PubKeySecp256k1 ([ 2 , 27 , 24 , 0 , 255 , 96 , 147 , 21 , 64 , 29 , 132 , 192 , 108 , 219 , 59 , 134 , 206 , 201 , 126 , 224 , 63 , 160 , 24 , 236 , 170 , 124 , 164 , 95 , 43 , 180 , 6 , 246 , 250 ]); let signature = [ 165 , 76 , 109 , 61 , 53 , 129 , 190 , 147 , 52 , 224 , 34 , 106 , 235 , 208 , 224 , 36 , 190 , 25 , 204 , 36 , 226 , 129 , 97 , 109 , 35 , 130 , 217 , 228 , 144 , 106 , 10 , 134 , 14 , 183 , 95 , 252 , 219 , 235 , 22 , 92 , 37 , 53 , 3 , 89 , 111 , 173 , 12 , 158 , 146 , 71 , 82 , 113 , 236 , 241 , 170 , 121 , 217 , 20 , 236 , 23 , 131 , 35 , 80 , 29 ]; let sig = new Signature ( pubKey , signature ); let stdTx = new StdTx ([ sendMultiMsg ], fee , [ sig ], 'elonmusk' ); let jsonTx = codec . marshalJson ( stdTx ); let decodedDataTx = new StdTx (); console . log ( \"Binary stdTx:\\n\" , ( codec . marshalBinary ( stdTx )). toString ()); console . log ( \"Json:\\n\" , jsonTx ); codec . unMarshalBinary ( codec . marshalBinary ( stdTx ), decodedDataTx ); console . log ( \"Decoded data:\\n\" , decodedDataTx . JsObject ()); Binary stdTx : 220 , 1 , 240 , 98 , 93 , 238 , 10 , 80 , 194 , 104 , 154 , 209 , 10 , 36 , 10 , 20 , 59 , 58 , 243 , 13 , 132 , 163 , 164 , 202 , 233 , 7 , 236 , 93 , 136 , 166 , 181 , 175 , 236 , 69 , 48 , 186 , 18 , 12 , 10 , 3 , 99 , 121 , 98 , 18 , 5 , 49 , 48 , 48 , 48 , 48 , 18 , 36 , 10 , 20 , 94 , 222 , 114 , 42 , 196 , 107 , 51 , 203 , 139 , 142 , 219 , 243 , 137 , 60 , 54 , 250 , 139 , 153 , 46 , 168 , 18 , 12 , 10 , 3 , 99 , 121 , 98 , 18 , 5 , 49 , 48 , 48 , 48 , 48 , 18 , 14 , 10 , 8 , 10 , 3 , 99 , 121 , 98 , 18 , 1 , 48 , 16 , 192 , 154 , 12 , 26 , 106 , 10 , 38 , 235 , 90 , 233 , 135 , 33 , 2 , 27 , 24 , 0 , 255 , 96 , 147 , 21 , 64 , 29 , 132 , 192 , 108 , 219 , 59 , 134 , 206 , 201 , 126 , 224 , 63 , 160 , 24 , 236 , 170 , 124 , 164 , 95 , 43 , 180 , 6 , 246 , 250 , 18 , 64 , 165 , 76 , 109 , 61 , 53 , 129 , 190 , 147 , 52 , 224 , 34 , 106 , 235 , 208 , 224 , 36 , 190 , 25 , 204 , 36 , 226 , 129 , 97 , 109 , 35 , 130 , 217 , 228 , 144 , 106 , 10 , 134 , 14 , 183 , 95 , 252 , 219 , 235 , 22 , 92 , 37 , 53 , 3 , 89 , 111 , 173 , 12 , 158 , 146 , 71 , 82 , 113 , 236 , 241 , 170 , 121 , 217 , 20 , 236 , 23 , 131 , 35 , 80 , 29 , 34 , 8 , 101 , 108 , 111 , 110 , 109 , 117 , 115 , 107 Json : { \"type\" : \"auth/StdTx\" , \"value\" : { \"msg\" : [{ \"type\" : \"cosmos-sdk/MsgMultiSend\" , \"value\" : { \"inputs\" : [{ \"address\" : [ 59 , 58 , 243 , 13 , 132 , 163 , 164 , 202 , 233 , 7 , 236 , 93 , 136 , 166 , 181 , 175 , 236 , 69 , 48 , 186 ], \"coins\" : [{ \"denom\" : \"cyb\" , \"amount\" : \"10000\" }]}], \"outputs\" : [{ \"address\" : [ 94 , 222 , 114 , 42 , 196 , 107 , 51 , 203 , 139 , 142 , 219 , 243 , 137 , 60 , 54 , 250 , 139 , 153 , 46 , 168 ], \"coins\" : [{ \"denom\" : \"cyb\" , \"amount\" : \"10000\" }]}]}}], \"fee\" : { \"amount\" : [{ \"denom\" : \"cyb\" , \"amount\" : \"0\" }], \"gas\" : \"200000\" }, \"signatures\" : [{ \"pub_key\" : { \"type\" : \"tendermint/PubKeySecp256k1\" , \"value\" : \"AhsYAP9gkxVAHYTAbNs7hs7JfuA/oBjsqnykXyu0Bvb6\" }, \"signature\" : \"pUxtPTWBvpM04CJq69DgJL4ZzCTigWFtI4LZ5JBqCoYOt1/82+sWXCU1A1lvrQyekkdScezxqnnZFOwXgyNQHQ==\" }], \"memo\" : \"elonmusk\" }} Decoded data : { msg : [ { inputs : [ Array ], outputs : [ Array ] } ], fee : { amount : [ [ Object ] ], gas : 200000 }, signatures : [ { pub_key : [ Array ], signature : [ Array ] } ], memo : 'elonmusk' }","title":"Usage (MsgMultiSend example)"},{"location":"js-amino/Overview/#contributing-guide","text":"Contribution are welcome! Please read this guide before contributing.","title":"Contributing Guide"},{"location":"js-amino/Overview/#contributors","text":"Thanks goes to these wonderful people ( emoji key ): JungHwan Tony Yun \ud83d\udcbb TanNgocDo \ud83d\udcbb \ud83d\udea7 philipstanislaus \ud83d\udcd6 Ales Puchilo \ud83d\udcc6 Valery Litvin \ud83d\udcbb Cyber Admin \ud83d\udcd6 Ethan Frey \u26a0\ufe0f This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Contributors"},{"location":"js-amino/Overview/#license","text":"Code are licensed under MIT license by contributors","title":"License"},{"location":"\u0441haingear/Changelog/","text":"Change Log \u00b6 Unreleased \u00b6 Full Changelog Closed issues: Create awesome gif for readme #1067 Consensus around basic chaingear utility in Cyb #1066 Remove linter warnings from console #1057 New fee splitting contracts #1055 Check and update cross contract interfaces for contracts #1054 Rewrite beneficiary contract frontend interfaces #1053 Root registry structure #1047 Make .chaingear frontend work with Main Ethereum network #1044 Release first iteration of chaingear paper #1030 Master audit #1001 Deploy to mainnet #997 Decreasing gas consumption, audit #993 0.1 chaingear release #974 Merged pull requests: edit docs org and config.yml in CI #1068 ( SaveTheAles ) UPD CI job docs upd #1033 ( SaveTheAles ) 0.1.0 (2019-01-28) \u00b6 Full Changelog Closed issues: Verification of databases on Etherscan #1046 Add favicon for chaingear landing #1045 Create components for chaingear #1043 Polish design of new chaingear #1042 New registry UI #1041 Delete registry only when it is paused #1040 Multistep registry creation on UI #1039 Save registry ABI into the blockchain. \u041a\u0430\u0442\u0435\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0438 #1038 Signing account do not chooses properly #1037 ABI do not resolve given ipfs hash #1036 Cannot add records if registry fee has been changed from non zero ETH #1035 Add registryID as field of registry contract #1034 Add stand-alone initialization of schema to registry #1031 Update UI for chaingear app #1029 Add shares logic for registry #1027 Add entry creation policy logic to registry #1025 Split registry creation and deploy in 3 stagess #1024 Sprint 20 report #1023 Upgrade migration for async/await and add migrations for schemas #1020 Fix burning/deletion of token/entry in chaingear/registry contracts #1019 Upgrade docs for 0.1 Euler release #1018 Upgrade application with more contracts data #1017 Fix application logic for most compatibility with contracts #1016 Refactoring of chaingear's web3 app #1015 Gitcoin minutes first post #1014 Upgrade project after code review #1012 Upgrade project after code review #1011 Update Chaingear UI concepts #1008 Prepare project to audit #996 Security audit of chaingear's contracts #994 Random tests failing with raw truffle test command #992 Update NatSpec in all contracts #990 Create issues for community in gitcoin #988 Display registry symbol in registry list #985 Chaingear kovan unstable deployment #984 Create a landing page for chaingear project #977 Integrate Etherscan verification #975 First side code review of chaingear #972 Integration of whitelist entry policy to Registry #971 Integration of IPFSeable to Registry #970 Integration of IPFSeable to Chaingear #969 get contracts for address #966 unical record field in array #965 Deploy chaingear contracts to Kovan testnet #962 Initial release of chaingear #960 Distinct field for registry constructor as option #948 Reduce js file size #940 Code generation base validation #939 Save abi to ipfs node not only local cache #938 Develop App Registry for CYB #936 Integrate with Etherscan #916 Initial version of registries #792 Merged pull requests: Chaingear's EVM 0.1 Euler Release #1056 ( litvintech ) Rebuild chaingear #1021 ( litvintech ) UPD config.yml knowledge -> wiki #1013 ( SaveTheAles ) Review by anton #1009 ( AnthonyAkentiev ) Update landing according to new design #1007 ( SaveTheAles ) landing remaking #1006 ( SaveTheAles ) 996 refactoring before audit #1004 ( litvintech ) remove debugger #1003 ( vstavetski ) 996 refactoring before audit #1002 ( litvintech ) fixes #992 #995 ( rsercano ) v0.1.0-alpha (2018-07-11) \u00b6 Closed issues: Allow change of Registry name #989 Add EntryCore example with field uniqueness check #987 Check funds before deleting entry in Registry #986 Publish sprint 12 Changelog #983 Integrate initial chaingear app with cyb #982 Review chainger initial release by ha #981 Draw logo and patern for Chaingear #979 Upgrade web3 app with initial release #978 Add Changelog for Sprint 9 #961 Initial gas tests for Chaingear/Rs and evaluation of cost #959 Refactoring for Chaingear/Rs #958 Improve access logic for Registry #957 Improve access logic for Chaingear #956 Write basic tests for Chaingear #955 Write basic tests for Registry #954 Perfomance testing scenario for cyberd #953 Perfomance testing of PoA networks #952 Update Library #951 Implement funding for chaingear/Rs #947 Add entries funding to registries base #946 Implement 721's cross-integration between chaingear and registries #945 Integrate ERC721 to Registry base #944 Integrate ERC721 to chaingear #943 Provide documentation for Chaingear contracts in NatSpec #942 Provide documentation for Registry contracts in NatSpec #941 Setup truffle's documentation for chaingear/Rs #937 Research on ERC 721 integration to chaingear/Rs entries #935 Improve docs for Chaingear project #934 Setup Registry with basic logic #933 Add registration to RR for basic logic of Registry contract base #932 Setup documentation for Registry and Entries CRUD pipeline #931 Setup chaingear RoR RoR contract with basic logic #930 Migrate old chaingear to a new project #927 Change Button Placement Put to the Header Put to the Header #919 Create decentralized data storage #914 Develop new frontend #913 Develop new centralized data storage #912 Finalize data structure #911 Finalize application form development #910 Develop an administration interface #909 Invalid toml file #884 Invalid toml file #883 Setup CI with data validation #871 Invalid toml file #859 Invalid toml file #858 Invalid toml file #857 Invalid toml file #856 Invalid toml file #855 Invalid toml file #854 Invalid toml file #853 Invalid toml file #852 Invalid toml file #848 Invalid toml file #812 Invalid toml file #811 Invalid toml file #783 Invalid toml file #782 Invalid toml file #781 Invalid toml file #780 Invalid toml file #779 Invalid toml file #778 Invalid toml file #777 http://toastycoin.com/ #776 https://www.citadel.ink/ #775 https://cyber.fund/system/Oracles _Network #760 omega.one - 2018 #742 Nebulas - TBA #740 https://cyber.fund/system/Solar _Bankers #734 https://github.com/TokenBnk/ #733 Solarbankers - 21/11 #732 Tokenbnk - 30/11 #731 Metronome.io #730 https://bitcoingold.org/ #729 MakerDAO - Dec 17 #718 Truebit #717 https://www.sweetbridge.com - 17.11 #714 Metronome - March 2018 #713 http://fragmented.world - TBA #712 http://quickblocks.io - TBA #711 http://lightstreams.network/ - Q2 2018 #710 https://wepower.network/ #709 https://dharma.io ICO date TBA #708 Pre-Sale add please from 30 th October to 3 rd November #705 Blockstack - 13 Nov - open-source, contract to come #685 Mobius - 8 Nov Open source/contract to come #684 FundRequest - 20 Nov #683 Add navigation to Active, Upcoming, Anticipated and Successful on Radar page #682 Resolve why some projects are displayed twice on Radar #681 Find transformation manager for Chaingear #674 Ocean protocol #660 Develop scripts for export Chaingear to Google Spreadsheet #637 Move data from Google Spreadsheet to Chaingear #636 Kill submit form on site #635 Monthly report \"Decrypted\" or \"Unfiated\" #634 Raiden Network - 18 Oct #614 Andaction #610 True Flip Markets #603 EAS #601 Publica - 25 Oct #580 Quantstamp - 12/11 #579 True Flip #529 Remove all ICO data for Contingency on website #511 Raiden Network Oct - ? #510 FansUnite #509 PROPS project - 20 Nov #508 Leverj - 7 Nov - Open source/contract to come #507 https://decent.ch/ #506 ICON 20 Oct #505 Livepeer #504 https://protos.tokenhub.com/ 25 Sept pre-ICO / 17 Oct ICO #503 https://biocoin.bio/ru 9 Nov #502 Climatecoin 1 Nov #501 Kyber Network ICO over #483 Verif-y - 25 Oct #481 Brickblock 31 Oct #476 ChainLink #475 Solidified #472 Moneypot 17 Sept #471 Zephyr 6 Oct #470 Correct ICO time for Paragon #466 WePower Network - ICO planned on February 1 st , 2018 #457 Render 5 Oct #456 Mercury Protocol - 25 Oct - open code, contract to come soon #455 Zen Protocol #454 plasma.io #453 dharma.io - 2018 #452 WanChain 3 Oct #451 ChainLink 19 Sept #450 ties.network 21 Sept #449 Sweetbridge #448 Aventus - closed #447 DOVU.io #446 Airswap - 10 Oct - code partially closed #445 BitJob ICO ongoing #444 Graft.network #443 Gimli 18 Sept #442 The cyber Fund website does not display any changes #440 Starbase 27 Sept #435 Resolve comments to submissions #434 Grid+ / 30 Oct #433 FaceCoin #432 AirToken 19 Sept #428 Flovio #427 Goldmint 17 Sept #426 Atlant.io ongoing #425 Streamr - 12 Oct - code partially closed #424 Doc.ai 28 Sept #417 ** https://databrokerdao.com/ 18 Sept pre-ICO #416 **swap.tech #415 Lendroid #414 Bloom #413 Etherparty 1 Oct #412 AutoNomic #411 Aidos Kunen #410 QRL #409 Metaverse #408 FunFair #407 Paragon 15 Sept #406 Zeppelin OS #405 Polkadot #404 https://neo.org/ #403 Aion #402 Filecoin #239 0x project #226 Migrate escrow and proof from Stats to escrow in Ballances #214 rexmls.com #213 Create google excel sheet with all tokens with their decimals #212 Move ICO Submit to ICO Stats #203 Concept first post-ICO report #201 propy.com #200 coindash.io #198 MyBit #197 district0x #196 \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043e\u0442\u0447\u0435\u0442\u0430 \u0437\u0430 \u0438\u044e\u043d\u044c #195 Update Post-ICO data #183 DAO Casino #176 EOS #167 Finish Aeternity Crowdsale #165 Tezos #164 AdChain #163 OmiseGo #162 Civic #158 Status #138 SONM #137 Bancor draft #136 Cofound.it #122 Starbase #117 Final fraft Starbase #108 BAT #103 Pre-draft BAT #102 Setup link checker #98 Add data label #97 https://cyber.fund/EMC #96 Bancor #94 Pre-draft Bancor #93 Mysterium #92 \u041d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e \u043a\u0430\u043a \u043e\u043d\u0438 \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u0432 \u0420\u0430\u0434\u0430\u0440\u0435 \u0432\u043d\u0438\u0437\u0443 \u0432\u043d\u0438\u0437\u0443 #89 Fix first price and date #74 add missing icons #68 crowdsale times #46 Fix incorrect Storj cap calculation #42 Quality report calculation #32 Move aliases.CurrencyName to a token.token_name #31 Links for Stellar #29 Clean up API and source data #28 Clear garbage systems #27 Fix incorrect Cap due to wrong supply #26 Chaingear Init #25 Sync users with dev #24 Autoupdated assets don't star system #23 How to add tokenless protocols? #22 List of systems to rename #21 Change address/path for generated API #20 Regeps for systems in Satoshi\u2022Fund #16 Fix currencies names #15 BitBTC icon #14 Add icons for BitAssets #13 Blockchain IDs for rated systems #12 Chaingear landing #11 Chaingear docs #10 Fix rating for \u272a\u272a systems #9 Reconsile Coinmarketcap names #8 Rename Objects and Arrays #7 Update rating #6 Merge dublicates #4 One chain - one folder #3 Switch to TOML #2 Merged pull requests: Setup landing page for Chaingear #991 ( SaveTheAles ) Initial release #980 ( litvintech ) Improved docs for chaingear #976 ( litvintech ) 954 basic tests for registry #968 ( hleb-albau ) NatSpec descriptions for .chaingear and .registry #967 ( SaveTheAles ) Chaingear and Registry tokenized linking #964 ( litvintech ) Add class diagramm of Chaingear.sol #950 ( SaveTheAles ) ENSF noties #949 ( SaveTheAles ) Update chaingear.json #929 ( ninjascant ) Add: Lightstreams #928 ( ninjascant ) Block #926 ( ninjascant ) Add: Marcelo #925 ( ninjascant ) Add: Kryll_io #924 ( ninjascant ) Update: KERBEROS #923 ( ninjascant ) Add: KERBEROS #922 ( ninjascant ) Add: Block #921 ( ninjascant ) Add: BharathTrade #920 ( ninjascant ) Add: OnLive #917 ( ninjascant ) Add: PlayBets #897 ( goloschaingear ) Add: Naviaddress #896 ( goloschaingear ) Update Dether.toml #892 ( mohdether ) Add: ADAMANT #890 ( ninjascant ) Add: Neunet #889 ( ninjascant ) Add: MyWish #888 ( ninjascant ) Add: MyTrackNet #887 ( ninjascant ) Add: Movement App #886 ( ninjascant ) Update: ATFS Project; convert to new data structure #885 ( ninjascant ) Add: MindSports #882 ( ninjascant ) Add: MediBloc #881 ( ninjascant ) Add: e-Chat ICO #880 ( ninjascant ) Add: Lockcoin #879 ( ninjascant ) Add: GraphGrail Ai #878 ( ninjascant ) Add: GOALBONANZA #877 ( ninjascant ) Add: DropDeck #876 ( ninjascant ) Fix headline #875 ( ninjascant ) Fix chaingear.json #874 ( ninjascant ) Add: VRTworld #873 ( goloschaingear ) Add CI and data validation #872 ( abitrolly ) Add: BlockNum #869 ( goloschaingear ) Update Adshares ICO end date #868 ( jzemlo ) Blockarray #867 ( ninjascant ) Update: BANKEX #866 ( goloschaingear ) Update: BANKEX #865 ( goloschaingear ) Add Karbo logo #860 ( ninjascant ) Add: TrakInvest #851 ( goloschaingear ) Update Cryptics.toml #850 ( halsoi ) Update Dether.toml #849 ( mohdether ) Add new data structure #847 ( ninjascant ) Add new structure template #846 ( ninjascant ) Add: new data structture template #845 ( ninjascant ) Add: TrakInvest #844 ( goloschaingear ) Add: MARK.SPACE #843 ( ninjascant ) Add: Legacy #842 ( ninjascant ) Add: Kr8os #841 ( ninjascant ) Add: JibrelNetwork #840 ( ninjascant ) Add: iungo #839 ( ninjascant ) Add: InsurePal #838 ( ninjascant ) Add: HOQU #837 ( ninjascant ) Add: GraftNetwork #836 ( ninjascant ) Add: DFS #835 ( ninjascant ) Add: DAXT #834 ( ninjascant ) Add: SOLA #833 ( ninjascant ) Add: DADI #832 ( ninjascant ) Add: CycloShieldCoin #831 ( ninjascant ) Add: Cryptopus #830 ( ninjascant ) Add: CryptoAlias #829 ( ninjascant ) Blockarray #828 ( ninjascant ) Blockarray #827 ( ninjascant ) Add: Chainium #825 ( ninjascant ) Add: Cardstack #824 ( ninjascant ) Add: Bottos #823 ( ninjascant ) Add: Blockmesh #822 ( ninjascant ) Add: Blocklancer #821 ( ninjascant ) Add: BankEx #820 ( ninjascant ) Add: ATFS Project #819 ( ninjascant ) Add: AdMine #818 ( ninjascant ) Add: Aditus #817 ( ninjascant ) Add: Karbo #816 ( goloschaingear ) Add: TradePlayz #815 ( goloschaingear ) Add: TokenGo #810 ( goloschaingear ) Add: DAXT #809 ( goloschaingear ) Add: RaidenNetwork #790 ( goloschaingear ) Add: DCX #785 ( goloschaingear ) Add: CLN #774 ( ninjascant ) Add: DCX #773 ( ninjascant ) Add: Volk #772 ( ninjascant ) Add: Polkadot #771 ( goloschaingear ) Change dates #770 ( Bilous4singree ) Add: xChange logo #769 ( ninjascant ) Add: xChange #768 ( ninjascant ) Add: xChange #767 ( goloschaingear ) BitClave TokenSale Update #766 ( mike-tih ) Add: TSSToken #765 ( goloschaingear ) Add: SophiaTX #763 ( goloschaingear ) Add: SMMarket #762 ( goloschaingear ) Add: ParetoNetwork #761 ( goloschaingear ) Update: chaingear.json #759 ( ninjascant ) Add: WePower #758 ( ninjascant ) Add Experty logo #757 ( ninjascant ) Update: chaingear.json #756 ( ninjascant ) Add: TokenBnk #755 ( ninjascant ) Update: chaingear.json #754 ( ninjascant ) Add: Game Machine #753 ( ninjascant ) Add: DaoPlayMarket 2.0 #752 ( ninjascant ) Add: Blockarray #751 ( ninjascant ) Update: chaingear.json #750 ( Protectorofcode ) Add: Expert #748 ( goloschaingear ) Add: Debitum #747 ( ninjascant ) Add: BitcoinGold #746 ( ninjascant ) Update: chaingear.json #744 ( ninjascant ) Update: chaingear.json #743 ( ninjascant ) Add: Neuromation #741 ( goloschaingear ) Add: Rentberry #739 ( ninjascant ) Add: RightMesh #738 ( ninjascant ) Add: SelfKey #737 ( ninjascant ) Add: StopTheFakes #736 ( ninjascant ) Add: VinChainToken #735 ( ninjascant ) Update: chaingear.json #728 ( Protectorofcode ) Update: chaingear.json #727 ( Protectorofcode ) Update: chaingear.json #726 ( Protectorofcode ) Update: chaingear.json #725 ( Protectorofcode ) Update: chaingear #724 ( Protectorofcode ) Update: chaingear.json #722 ( Protectorofcode ) Update Opporty.toml #721 ( Protectorofcode ) Add: wysToken #720 ( ninjascant ) Add: Bloom #719 ( goloschaingear ) Update: chaingear.json #716 ( ninjascant ) Add: NAU #715 ( ninjascant ) Update: chaingear.json #707 ( ninjascant ) Update: chaingear.json #706 ( ninjascant ) Add: Dogezer #704 ( ninjascant ) Add: BitClave #703 ( ninjascant ) Add: AppCoins #702 ( ninjascant ) Add: Blockstack #701 ( ninjascant ) Update: chaingear.json #700 ( ninjascant ) Update: chaingear #699 ( Protectorofcode ) Add: Confideal #695 ( ninjascant ) Update toml. #693 ( Bilous4singree ) Update: chaingear.son #692 ( ninjascant ) Rega #691 ( ninjascant ) Delete: Bitnation #690 ( Protectorofcode ) Update: Gizer #689 ( Protectorofcode ) Rega #688 ( ninjascant ) Rega #687 ( ninjascant ) Add: Leverj #686 ( ninjascant ) Add: FansUnite #680 ( ninjascant ) Add: IACCrowdsale #679 ( ninjascant ) Add: SimpleToken #678 ( ninjascant ) Add: MBCH #677 ( ninjascant ) Add: Universa #676 ( ninjascant ) Add: AntiBureaucracy #675 ( ninjascant ) Add: Lamden #673 ( ninjascant ) Add: Rega #672 ( ninjascant ) Update: chaingear.json #671 ( ninjascant ) Update: Polkadot #670 ( ninjascant ) Update: RaidenNetwork logo #669 ( ninjascant ) Update: chaingear.json #668 ( Protectorofcode ) Update: chaingear.json #667 ( Protectorofcode ) Update: chaingear.json #666 ( Protectorofcode ) Raiden2 #664 ( ninjascant ) Add: RaidenNetwork #662 ( ninjascant ) Add: E4ROW #661 ( Protectorofcode ) Add: chaingear.json #659 ( Protectorofcode ) Update Fidcom.toml #658 ( Bolikus ) Add: Sense #657 ( ninjascant ) Add: DalaToken #656 ( ninjascant ) Add: Prizm #655 ( Protectorofcode ) Add: Nimiq #654 ( Protectorofcode ) Add: Real #653 ( Protectorofcode ) Add: Propy #652 ( Protectorofcode ) Add: Qointum #651 ( Protectorofcode ) Update: chaingear.json #650 ( Protectorofcode ) Add: Equibit #649 ( Protectorofcode ) Add: Vega Fund #648 ( Protectorofcode ) Update: chaingear.json #647 ( Protectorofcode ) Add: Leviar Coin #646 ( Protectorofcode ) Add: TrueBit #645 ( Protectorofcode ) Add: Agrello #644 ( Protectorofcode ) Update: chaingear.json #643 ( Protectorofcode ) Update: chaingear.json #642 ( Protectorofcode ) Add: Dether #641 ( Protectorofcode ) Update: chaingear.json #639 ( Protectorofcode ) Update: chaingear.json #638 ( Protectorofcode ) Update: chaingear.json #633 ( Protectorofcode ) Update: ARToken #632 ( Protectorofcode ) Update: chaingear.json #631 ( Protectorofcode ) Add: ARToken #630 ( Protectorofcode ) Add: KredX #629 ( ninjascant ) Add: Gimli #628 ( Protectorofcode ) Add: Ties Network #627 ( Protectorofcode ) Update: chaingear.json #626 ( Protectorofcode ) Update: Wanchain #625 ( Protectorofcode ) Add: Chimaera #624 ( ninjascant ) Update: Brickblock #623 ( Protectorofcode ) Update: chaingear.json #622 ( Protectorofcode ) Add: Divi Project #621 ( Protectorofcode ) Add: Gizer #620 ( Protectorofcode ) Update: chaingear.json #619 ( Protectorofcode ) Update: chaingear.json #618 ( Protectorofcode ) Add: Enigma #617 ( Protectorofcode ) Update: chaingear.json #616 ( Protectorofcode ) Add: Lendroid #615 ( Protectorofcode ) Add: FortySevenBank #613 ( ninjascant ) Update: chaingear.json #612 ( Protectorofcode ) Add: Pangea #611 ( ninjascant ) Update: chaingear.json #608 ( Protectorofcode ) Add: HeroCoin #607 ( Protectorofcode ) Add: ARToken #606 ( Protectorofcode ) Update: chaingear.json #605 ( Protectorofcode ) Update: Mercury Protocol #604 ( Protectorofcode ) Add: Dream Team #602 ( Protectorofcode ) Update: DMarket #600 ( Protectorofcode ) Add: Gaze Coin #599 ( Protectorofcode ) Add: MatchPay #598 ( Protectorofcode ) Add: Ripio Credit Network #597 ( Protectorofcode ) Add: Jibrel Network #596 ( Protectorofcode ) Add: Stimus #595 ( Protectorofcode ) Update: chaingear.json #594 ( Protectorofcode ) Add: Dome Platform #593 ( Protectorofcode ) Add: Rhea #592 ( Protectorofcode ) Add: Genesis Vision #591 ( Protectorofcode ) Add: Opporty #590 ( Protectorofcode ) Update: chaingear.json #589 ( Protectorofcode ) Fix True Flip Lottery Markets #588 ( gamedevsam ) Update: chaingear.json #587 ( Protectorofcode ) Update: Jincor #586 ( Protectorofcode ) Update: chaingear.json #585 ( Protectorofcode ) Add: Crypto Improvement Fund #584 ( Protectorofcode ) Update: chaingear.json #583 ( Protectorofcode ) Add: Zenome #582 ( Protectorofcode ) Update Privatix.toml #581 ( devalexandr ) Update Crypto 20.toml #578 ( skolobov ) Update: chaingear.json #577 ( Protectorofcode ) Add: MingoCoin #576 ( Protectorofcode ) Add: BioPayCoin #575 ( Protectorofcode ) Add: Sparc #574 ( Protectorofcode ) Add: DarfChain #573 ( Protectorofcode ) Add: Harbor #572 ( Protectorofcode ) Add: Udiar #571 ( Protectorofcode ) Add: Quantstamp #570 ( Protectorofcode ) Add: Fidcom #569 ( Protectorofcode ) Update Papyrus.toml #568 ( ashwets ) Add: Databroker DAO #567 ( Protectorofcode ) Add: Dinnerful Network #566 ( Protectorofcode ) Add: TripAlly #565 ( Protectorofcode ) Add: Lescoin #564 ( Protectorofcode ) Add: Hirematch #563 ( Protectorofcode ) Update: chaingear.json #562 ( Protectorofcode ) Add: CoinDrive #561 ( Protectorofcode ) Add: Auctus #560 ( Protectorofcode ) Add: Snip #559 ( Protectorofcode ) Update: chaingear.json #558 ( Protectorofcode ) Add: Papyrus #557 ( Protectorofcode ) Add: CarTaxi #556 ( Protectorofcode ) Add: Crypto 20 #555 ( Protectorofcode ) Add: SRG-Play&Earn #554 ( Protectorofcode ) Update: chaingear.json #553 ( Protectorofcode ) Add: Hacken #552 ( Protectorofcode ) Add: DLS Academy #551 ( Protectorofcode ) Add: Snovio #550 ( Protectorofcode ) Add: Acebusters #549 ( Protectorofcode ) Add: Relest #548 ( Protectorofcode ) Add: Soma #547 ( Protectorofcode ) Add: Ethbet #546 ( Protectorofcode ) Add: Stash #545 ( Protectorofcode ) Add: Privatix #544 ( Protectorofcode ) Add: Etch #543 ( Protectorofcode ) Add: Galactikka #542 ( Protectorofcode ) Add: Icon #541 ( Protectorofcode ) Update: chaingear.json #540 ( Protectorofcode ) Update: chaingear.json #539 ( Protectorofcode ) Update: Aion #538 ( Protectorofcode ) Update: chaingear.json #537 ( Protectorofcode ) Add: Crypto.tickets #536 ( Protectorofcode ) Add: Polkadot #535 ( Protectorofcode ) Add: Wanchain #534 ( Protectorofcode ) Update: chaingear.json #533 ( Protectorofcode ) Update: True Flip Lottery #532 ( Protectorofcode ) Update: chaingear.json #531 ( Protectorofcode ) Add: True Flip Lottery #530 ( Protectorofcode ) Update: Brickblock #528 ( Protectorofcode ) Update: Etherparty #527 ( Protectorofcode ) Update: Chaingear.json #526 ( Protectorofcode ) Add: Zen Protocol #525 ( Protectorofcode ) Update: Kyber #524 ( Protectorofcode ) Add: Livepeer #523 ( Protectorofcode ) Add: Internxt #522 ( Protectorofcode ) Add: Evr #521 ( Protectorofcode ) Add: Cove Identity #520 ( Protectorofcode ) Add: Alloy #519 ( Protectorofcode ) Update: chaingear.json #518 ( Protectorofcode ) Update: Cointingency #517 ( Protectorofcode ) Update: chaingear.json #516 ( Protectorofcode ) Update: ChainLink #515 ( Protectorofcode ) Update: Cointingency #513 ( Protectorofcode ) Update: Contingency #512 ( Protectorofcode ) Update: chaingear.json #500 ( Protectorofcode ) Add: Atlant #499 ( Protectorofcode ) Update: Crystal Clear #498 ( Protectorofcode ) Update: chaingear.json #497 ( Protectorofcode ) Add: Verif-y #496 ( Protectorofcode ) Add: AirSwap #495 ( Protectorofcode ) Add: ChainLink #493 ( Protectorofcode ) Add: Grid+ #492 ( Protectorofcode ) Update: Metaverse #491 ( Protectorofcode ) Update: Aira #490 ( Protectorofcode ) Update: Omega One #489 ( Protectorofcode ) Update: Adchain #488 ( Protectorofcode ) Update: Loopring #487 ( Protectorofcode ) Add: Loopring #486 ( Protectorofcode ) Add: Mercury Protocol #485 ( Protectorofcode ) Update: chaingear.json #484 ( Protectorofcode ) Add: RockChain #482 ( Protectorofcode ) Add: Mito #480 ( Protectorofcode ) Add: Hagglin #479 ( Protectorofcode ) Add: Flip Coin #478 ( Protectorofcode ) Add: VoteCoin #477 ( Protectorofcode ) Update: chaingear.json #474 ( Protectorofcode ) Update: Electroneum #473 ( Protectorofcode ) Please change the end date to 2017 10 31. #469 ( asanezz7 ) Update: chaingear.json #468 ( Protectorofcode ) Update: Paragon ICO #467 ( Protectorofcode ) Update: chaingear.json #465 ( Protectorofcode ) Update: AntShares -> NEO #464 ( Protectorofcode ) Add: Quantum Resistant Ledger #463 ( Protectorofcode ) Update: BOScoin #462 ( Protectorofcode ) Add: Metaverse #461 ( Protectorofcode ) Update: Aidos Kuneen #460 ( Protectorofcode ) Add: Aidos Kuneen #459 ( Protectorofcode ) Add: Aion #458 ( Protectorofcode ) Add: OpenZeppelin #441 ( Protectorofcode ) Add: FaceCoin #439 ( Protectorofcode ) Update: chaingear.json #438 ( Protectorofcode ) Update: Starbase #437 ( Protectorofcode ) Update: chaingear.json #436 ( Protectorofcode ) Update: FunFair #431 ( Protectorofcode ) Update: chaingear.json #430 ( Protectorofcode ) Add: Funfair #429 ( Protectorofcode ) Update: chaingear.json #423 ( Protectorofcode ) Add: Cash Poker Pro #422 ( Protectorofcode ) Add: EventChain #421 ( Protectorofcode ) Add: LAToken #420 ( Protectorofcode ) Add: Rouge Project #419 ( Protectorofcode ) Add: Detector #418 ( Protectorofcode ) Add: Spheris #401 ( Protectorofcode ) Add: Graft #400 ( Protectorofcode ) Add: DomRaider #399 ( Protectorofcode ) Add: Crystal Clear #398 ( Protectorofcode ) Add: Matryx #397 ( Protectorofcode ) Delete: Kin #396 ( Protectorofcode ) Add CombiCoin #395 ( Protectorofcode ) Add: Paragon #394 ( Protectorofcode ) Update: chaingear.json #392 ( Protectorofcode ) Update: Kin #391 ( Protectorofcode ) Update: chaingear.json #390 ( Protectorofcode ) Update: Decentraland #389 ( Protectorofcode ) Update: Filecoin #388 ( Protectorofcode ) Update: chaingear.json #387 ( Protectorofcode ) Update: chaingear.json #386 ( Protectorofcode ) Add: Urbit #385 ( Protectorofcode ) Add: Streamr #384 ( Protectorofcode ) Add: Solar Bankers #383 ( Protectorofcode ) Add: Oracles Network #382 ( Protectorofcode ) Add: Omega One #381 ( Protectorofcode ) Add: Kyber #380 ( Protectorofcode ) Add: Etherparty #379 ( Protectorofcode ) Add: Doc.ai #378 ( Protectorofcode ) Add: Aira #377 ( Protectorofcode ) Update: Adshares #376 ( Protectorofcode ) Update: Indorse #375 ( Protectorofcode ) Update: Cindicator #374 ( Protectorofcode ) Pylon Network #373 ( klenergy ) Update: chaingear.json #372 ( Protectorofcode ) Add: AirToken #371 ( Protectorofcode ) Add: Modum #370 ( Protectorofcode ) Update: Viberate #369 ( Protectorofcode ) Update: chaingear.json #368 ( Protectorofcode ) Update: Mybit #367 ( Protectorofcode ) Update: Rex #366 ( Protectorofcode ) Update: chaingear.json #365 ( Protectorofcode ) Update: Filecoin #364 ( Protectorofcode ) Update: Dimcoin #363 ( Protectorofcode ) Update: Presearch #362 ( Protectorofcode ) Update: Jincor #361 ( Protectorofcode ) Update: Vibe #360 ( Protectorofcode ) Update: Stable #359 ( Protectorofcode ) Update: Everex #358 ( Protectorofcode ) Update: Enjin Coin #357 ( Protectorofcode ) Update: Tieron #356 ( Protectorofcode ) Update: chaingear.json #355 ( Protectorofcode ) Update: Indorse #354 ( Protectorofcode ) Update: chaingear.json #353 ( Protectorofcode ) Update: Gilgam #352 ( Protectorofcode ) Add: TenX #351 ( Protectorofcode ) Add: Stox #350 ( Protectorofcode ) Add: Pillar #349 ( Protectorofcode ) Add: Opus #348 ( Protectorofcode ) Add: OpenAnx #347 ( Protectorofcode ) Add: Make It Viral #346 ( Protectorofcode ) Update: IO Coin #345 ( Protectorofcode ) Add: Digital Developers Fund #344 ( Protectorofcode ) Add: Decentraland #343 ( Protectorofcode ) Add: Crypviser #342 ( Protectorofcode ) Add: Bitjob #341 ( Protectorofcode ) Add: Asch #340 ( Protectorofcode ) Add: adToken #339 ( Protectorofcode ) Add: AdEx #338 ( Protectorofcode ) Add: Disledger #337 ( Protectorofcode ) Update: chaingear.js #336 ( Protectorofcode ) Update: 0x #335 ( Protectorofcode ) Update: chaingear.json #334 ( Protectorofcode ) Add: Umbrella Coin #333 ( Protectorofcode ) Add: Trackr #332 ( Protectorofcode ) Update: Solar DAO #331 ( Protectorofcode ) Add: Solar DAO #330 ( Protectorofcode ) Add: Slot N Slot #329 ( Protectorofcode ) Add: Pylon Network #328 ( Protectorofcode ) Add: OpenZen #327 ( Protectorofcode ) Add: Neblio #326 ( Protectorofcode ) Add: Magos #325 ( Protectorofcode ) Add: Lordmancer #324 ( Protectorofcode ) Add: Lampix #323 ( Protectorofcode ) Add: Fijinto #322 ( Protectorofcode ) Add: Fluence #321 ( Protectorofcode ) Add: Electroneum #319 ( Protectorofcode ) Add: DMarket #318 ( Protectorofcode ) Add: Dimcoin #317 ( Protectorofcode ) Add: Crowdholding #316 ( Protectorofcode ) Add: Cindicator #315 ( Protectorofcode ) Add: aventus #314 ( Protectorofcode ) Add: Anryze #313 ( Protectorofcode ) Updating Indorse links & token sale details #310 ( avadhootkulkarni ) Update: chaingear.json #309 ( Protectorofcode ) Update: FileCoin #308 ( Protectorofcode ) Update: chaingear.json #307 ( Protectorofcode ) Update: Filecoin #306 ( Protectorofcode ) Update: chaingear.json #305 ( Protectorofcode ) Add: Spectiv #304 ( Protectorofcode ) Add: Presearch #303 ( Protectorofcode ) Add: Poet #302 ( Protectorofcode ) Add: Indorse #301 ( Protectorofcode ) Add: CoinDash #300 ( Protectorofcode ) Add: Adshares #299 ( Protectorofcode ) Add: 8 Curcuit Studios #298 ( Protectorofcode ) Update: chaingear.json #297 ( Protectorofcode ) Add: U.CASH #296 ( Protectorofcode ) Add: Silent Notary #295 ( Protectorofcode ) Add: MooseCoin #294 ( Protectorofcode ) Add: Kairos #293 ( Protectorofcode ) Add: Jincor #292 ( Protectorofcode ) Add: Gluon #291 ( Protectorofcode ) Add: DigiCoinMaker #290 ( Protectorofcode ) Add: Blocklancer #289 ( Protectorofcode ) Update: chaingear.json #288 ( Protectorofcode ) Update: Kickico #287 ( Protectorofcode ) Update: chaingear.json #286 ( Protectorofcode ) Update: Starbase #285 ( Protectorofcode ) Update: Starbase #284 ( Protectorofcode ) Update: 0x #283 ( Protectorofcode ) Add: Vibe Hub #282 ( Protectorofcode ) Add: Stable #281 ( Protectorofcode ) Add: Sift #280 ( Protectorofcode ) Add: Gamerbits #279 ( Protectorofcode ) Add: Coss #278 ( Protectorofcode ) Add: Centra #277 ( Protectorofcode ) Add: Bitsdigit #276 ( Protectorofcode ) We've updated some info. Please, update Kickico.toml #275 ( KICKICOPR ) Update: chaingear.json #274 ( Protectorofcode ) Update: Bitcoin Cash #273 ( Protectorofcode ) Update: chaingear.json #272 ( Protectorofcode ) Update: Bitcoin Cash #271 ( Protectorofcode ) Add: Bitcoin Cash #270 ( Protectorofcode ) Update: chaingear.json #269 ( Protectorofcode ) Update: Kuna #268 ( Protectorofcode ) Update: chaingear.json #267 ( Protectorofcode ) Cha #266 ( Protectorofcode ) Update: chaingear.json #264 ( Protectorofcode ) Update: Kuna #263 ( Protectorofcode ) Update: chaingear.json #262 ( Protectorofcode ) Update: Brickblock #261 ( Protectorofcode ) Add: Brickblock #260 ( Protectorofcode ) Add: Nimfamoney #259 ( Protectorofcode ) Add: Monkey Capital #258 ( Protectorofcode ) Add: Kuna #257 ( Protectorofcode ) Add: Enjin Coin #256 ( Protectorofcode ) Update: chaingear.js #255 ( Protectorofcode ) Update: chaingear.js #254 ( Protectorofcode ) Update: Kickico #253 ( Protectorofcode ) Update: Skycoin #251 ( Protectorofcode ) update logo skycoin #250 ( Protectorofcode ) Add: Prospectors #248 ( Protectorofcode ) Add: Nexxus Parthers #247 ( Protectorofcode ) Add: Embermine #246 ( Protectorofcode ) Add: BOScoin #245 ( Protectorofcode ) Add: Viberate #243 ( Protectorofcode ) Add: Kickico #242 ( Protectorofcode ) Update: Skycoin #238 ( LucianMincu ) Delete Scam: Kibo #237 ( Protectorofcode ) Add: FundYourSelf #236 ( Protectorofcode ) Add: Apptrade #235 ( Protectorofcode ) Add: Encryptotel #234 ( Protectorofcode ) Add: Veritaseum #233 ( Protectorofcode ) Add: ZrCoin #232 ( Protectorofcode ) Add: Chain of Points #231 ( Protectorofcode ) Add: Everex #230 ( Protectorofcode ) Add: Kibo Platform #229 ( Protectorofcode ) Update: Blockfreight #228 ( Protectorofcode ) Add: SlognCoin #227 ( Protectorofcode ) Add: Ziber #224 ( Protectorofcode ) Add: Tieron #223 ( Protectorofcode ) Add: Rex #222 ( Protectorofcode ) Add: 0x #221 ( Protectorofcode ) Add: Ethbits iTrade #220 ( Protectorofcode ) Add: Lunyr #219 ( Protectorofcode ) Add: CreativeChain #218 ( Protectorofcode ) Add: Suretly #217 ( Protectorofcode ) Update: Tezos #216 ( Protectorofcode ) Update: Mybit #215 ( Protectorofcode ) Update: TokenCard #211 ( Protectorofcode ) Update: Mysterium #210 ( Protectorofcode ) Update: Bat #209 ( Protectorofcode ) Update: Cofound #208 ( Protectorofcode ) Update: Bancor #207 ( Protectorofcode ) Update: Civic #206 ( Protectorofcode ) Update: Status #205 ( Protectorofcode ) Update: Mybit #202 ( Protectorofcode ) Add: District0x #199 ( Protectorofcode ) Add: Edgeless #194 ( Protectorofcode ) Add: LeoCoin #193 ( Protectorofcode ) Add: Ubiq #192 ( Protectorofcode ) Add: Numeraire #191 ( Protectorofcode ) Add: ZCoin #190 ( Protectorofcode ) Add: Nexus #189 ( Protectorofcode ) Add: MobileGo #188 ( Protectorofcode ) Add: MCAP #187 ( Protectorofcode ) Add: Komodo #186 ( Protectorofcode ) Update : Tezos #185 ( Protectorofcode ) Update: DaoCasino #184 ( Protectorofcode ) Update Time: Omise #182 ( Protectorofcode ) Update: Tezos #173 ( Protectorofcode ) Update: Sonm #170 ( Protectorofcode ) Add: Eos #168 ( Protectorofcode ) Update: Civic #166 ( Protectorofcode ) Update: Status #161 ( Protectorofcode ) Update fundrequest ico date #160 ( karelstriegel ) Update: Sonm #159 ( Protectorofcode ) Update: bancor #157 ( Protectorofcode ) Update: Bancor #156 ( Protectorofcode ) Update: Storjcoin X #155 ( Protectorofcode ) Add: OmiseGO #154 ( Protectorofcode ) Add: Populous #153 ( Protectorofcode ) Slight update to time +4h +4h #152 ( Razaberry ) Update: Bancor #151 ( Protectorofcode ) Add: Kin #150 ( Protectorofcode ) Add: Bitquence #149 ( Protectorofcode ) Add: Monaco #148 ( Protectorofcode ) Update: Cofound #147 ( Protectorofcode ) Add: Ecobit #146 ( Protectorofcode ) Update: Aeternity #145 ( Protectorofcode ) Add: MyBit #144 ( Protectorofcode ) Update: Bat #143 ( Protectorofcode ) Add: 21Million #142 ( Protectorofcode ) Updated BNT sale date as per twitter annoucement #141 ( Razaberry ) Update: Bat #140 ( Protectorofcode ) Add: Cofound #139 ( Protectorofcode ) Update: DaoCasino #132 ( Protectorofcode ) Update: DaoCasino #130 ( Protectorofcode ) Add: Starbase #129 ( Protectorofcode ) Add: Civic #128 ( Protectorofcode ) New Bancor ICO start date: June 15 #127 ( Razaberry ) Add: Sonm #126 ( Protectorofcode ) Update: Voise #125 ( Protectorofcode ) Update: Tezos #124 ( Protectorofcode ) Add: Beth #123 ( Protectorofcode ) Add: Polybius #121 ( Protectorofcode ) Update: Status #120 ( Protectorofcode ) Update: Bancor #119 ( Protectorofcode ) Add: DCORP #118 ( Protectorofcode ) Add: Starta #116 ( Protectorofcode ) Add: Gilgam.es #115 ( Protectorofcode ) Add: Ark #114 ( Protectorofcode ) Add: Lykke #113 ( Protectorofcode ) Add: Bat #112 ( Protectorofcode ) Update: Mysterium #111 ( Protectorofcode ) Update: Storj #110 ( Protectorofcode ) Add: DaoCasino #109 ( Protectorofcode ) Fix link to Ripple web site #107 ( abitrolly ) Add: Mysterium #106 ( Protectorofcode ) Update: Storj #105 ( Protectorofcode ) BTCD - fix some links #99 ( abitrolly ) add bitworldvip #87 ( bitworldvip ) Update: Btsr, MassNetwork, Synereo, vDice #86 ( Protectorofcode ) add : Veltor, Voise, TokenCard #85 ( Protectorofcode ) add: Veltor #84 ( Protectorofcode ) Add: Tezos #83 ( Protectorofcode ) Bancor #82 ( Protectorofcode ) Add GBG #79 ( xhipster ) project update to seven blockchain systems #78 ( agent725 ) adjusted end-date for fundraiser, and subtle changes #77 ( agent725 ) Upcoming Musicoin Genesis #76 ( musicoiner ) Internet of Coins TOML specification #75 ( agent725 ) Add FundRequest Dapp #73 ( karelstriegel ) logo change #72 ( jamesgroton ) Update vDice.toml #70 ( jamesgroton ) Inchain`s ICO dates changed #69 ( trummax ) Big mistakes about the starting date. #66 ( zikilemini ) Added Beyond The Void #64 ( zikilemini ) Total Supply Update #63 ( chris4210 ) Update AntShares.toml from the Antshares Team #60 ( PeterLinX ) Update AntShares.toml from Antshares team #59 ( DavidthePangwaer ) Add files via upload #58 ( JasonMcz ) creating HONG profile #56 ( hongcoiner ) Add AntShares #55 ( PeterLinX ) Okcash Integration #54 ( oktoshi ) Add EnergyCoin #53 ( coin1hub ) Adding BTSR and ICOO assets #52 ( OpenLedgerDev ) Gh pages #51 ( ElephantDevelopment ) We are using Bitbucket instead of Github now. #50 ( justindonnaruma ) Add Rise.Vision Foundation #49 ( justindonnaruma ) Add MINEUM #48 ( antho281 ) Dash Forum migrated to new link #47 ( thelazier ) fix link name, hashtag #45 ( thelazier ) Fix some consensus descriptions #43 ( xhipster ) Add a Gitter chat badge to README.md #41 ( gitter-badger ) Update: Consensus data #40 ( xhipster ) Update: Consensus data for 6 systems #39 ( xhipster ) Update: Consensus data for 10 systems #38 ( xhipster ) Update: Consensus data for 10 systems #37 ( xhipster ) Update: All consensus data #36 ( xhipster ) Update Dash Whitepaper #34 ( thelazier ) Update Dash.toml #33 ( thelazier ) Update github link and remove redundancies #30 ( johansten ) Update NuBits.toml #19 ( CoinGame ) Update NuShares.toml #18 ( CoinGame ) Link updates #17 ( phideas ) aliases #1 ( ghost ) * This Change Log was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"\u0441haingear/Changelog/#change-log","text":"","title":"Change Log"},{"location":"\u0441haingear/Changelog/#unreleased","text":"Full Changelog Closed issues: Create awesome gif for readme #1067 Consensus around basic chaingear utility in Cyb #1066 Remove linter warnings from console #1057 New fee splitting contracts #1055 Check and update cross contract interfaces for contracts #1054 Rewrite beneficiary contract frontend interfaces #1053 Root registry structure #1047 Make .chaingear frontend work with Main Ethereum network #1044 Release first iteration of chaingear paper #1030 Master audit #1001 Deploy to mainnet #997 Decreasing gas consumption, audit #993 0.1 chaingear release #974 Merged pull requests: edit docs org and config.yml in CI #1068 ( SaveTheAles ) UPD CI job docs upd #1033 ( SaveTheAles )","title":"Unreleased"},{"location":"\u0441haingear/Changelog/#010-2019-01-28","text":"Full Changelog Closed issues: Verification of databases on Etherscan #1046 Add favicon for chaingear landing #1045 Create components for chaingear #1043 Polish design of new chaingear #1042 New registry UI #1041 Delete registry only when it is paused #1040 Multistep registry creation on UI #1039 Save registry ABI into the blockchain. \u041a\u0430\u0442\u0435\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0438 #1038 Signing account do not chooses properly #1037 ABI do not resolve given ipfs hash #1036 Cannot add records if registry fee has been changed from non zero ETH #1035 Add registryID as field of registry contract #1034 Add stand-alone initialization of schema to registry #1031 Update UI for chaingear app #1029 Add shares logic for registry #1027 Add entry creation policy logic to registry #1025 Split registry creation and deploy in 3 stagess #1024 Sprint 20 report #1023 Upgrade migration for async/await and add migrations for schemas #1020 Fix burning/deletion of token/entry in chaingear/registry contracts #1019 Upgrade docs for 0.1 Euler release #1018 Upgrade application with more contracts data #1017 Fix application logic for most compatibility with contracts #1016 Refactoring of chaingear's web3 app #1015 Gitcoin minutes first post #1014 Upgrade project after code review #1012 Upgrade project after code review #1011 Update Chaingear UI concepts #1008 Prepare project to audit #996 Security audit of chaingear's contracts #994 Random tests failing with raw truffle test command #992 Update NatSpec in all contracts #990 Create issues for community in gitcoin #988 Display registry symbol in registry list #985 Chaingear kovan unstable deployment #984 Create a landing page for chaingear project #977 Integrate Etherscan verification #975 First side code review of chaingear #972 Integration of whitelist entry policy to Registry #971 Integration of IPFSeable to Registry #970 Integration of IPFSeable to Chaingear #969 get contracts for address #966 unical record field in array #965 Deploy chaingear contracts to Kovan testnet #962 Initial release of chaingear #960 Distinct field for registry constructor as option #948 Reduce js file size #940 Code generation base validation #939 Save abi to ipfs node not only local cache #938 Develop App Registry for CYB #936 Integrate with Etherscan #916 Initial version of registries #792 Merged pull requests: Chaingear's EVM 0.1 Euler Release #1056 ( litvintech ) Rebuild chaingear #1021 ( litvintech ) UPD config.yml knowledge -> wiki #1013 ( SaveTheAles ) Review by anton #1009 ( AnthonyAkentiev ) Update landing according to new design #1007 ( SaveTheAles ) landing remaking #1006 ( SaveTheAles ) 996 refactoring before audit #1004 ( litvintech ) remove debugger #1003 ( vstavetski ) 996 refactoring before audit #1002 ( litvintech ) fixes #992 #995 ( rsercano )","title":"0.1.0 (2019-01-28)"},{"location":"\u0441haingear/Changelog/#v010-alpha-2018-07-11","text":"Closed issues: Allow change of Registry name #989 Add EntryCore example with field uniqueness check #987 Check funds before deleting entry in Registry #986 Publish sprint 12 Changelog #983 Integrate initial chaingear app with cyb #982 Review chainger initial release by ha #981 Draw logo and patern for Chaingear #979 Upgrade web3 app with initial release #978 Add Changelog for Sprint 9 #961 Initial gas tests for Chaingear/Rs and evaluation of cost #959 Refactoring for Chaingear/Rs #958 Improve access logic for Registry #957 Improve access logic for Chaingear #956 Write basic tests for Chaingear #955 Write basic tests for Registry #954 Perfomance testing scenario for cyberd #953 Perfomance testing of PoA networks #952 Update Library #951 Implement funding for chaingear/Rs #947 Add entries funding to registries base #946 Implement 721's cross-integration between chaingear and registries #945 Integrate ERC721 to Registry base #944 Integrate ERC721 to chaingear #943 Provide documentation for Chaingear contracts in NatSpec #942 Provide documentation for Registry contracts in NatSpec #941 Setup truffle's documentation for chaingear/Rs #937 Research on ERC 721 integration to chaingear/Rs entries #935 Improve docs for Chaingear project #934 Setup Registry with basic logic #933 Add registration to RR for basic logic of Registry contract base #932 Setup documentation for Registry and Entries CRUD pipeline #931 Setup chaingear RoR RoR contract with basic logic #930 Migrate old chaingear to a new project #927 Change Button Placement Put to the Header Put to the Header #919 Create decentralized data storage #914 Develop new frontend #913 Develop new centralized data storage #912 Finalize data structure #911 Finalize application form development #910 Develop an administration interface #909 Invalid toml file #884 Invalid toml file #883 Setup CI with data validation #871 Invalid toml file #859 Invalid toml file #858 Invalid toml file #857 Invalid toml file #856 Invalid toml file #855 Invalid toml file #854 Invalid toml file #853 Invalid toml file #852 Invalid toml file #848 Invalid toml file #812 Invalid toml file #811 Invalid toml file #783 Invalid toml file #782 Invalid toml file #781 Invalid toml file #780 Invalid toml file #779 Invalid toml file #778 Invalid toml file #777 http://toastycoin.com/ #776 https://www.citadel.ink/ #775 https://cyber.fund/system/Oracles _Network #760 omega.one - 2018 #742 Nebulas - TBA #740 https://cyber.fund/system/Solar _Bankers #734 https://github.com/TokenBnk/ #733 Solarbankers - 21/11 #732 Tokenbnk - 30/11 #731 Metronome.io #730 https://bitcoingold.org/ #729 MakerDAO - Dec 17 #718 Truebit #717 https://www.sweetbridge.com - 17.11 #714 Metronome - March 2018 #713 http://fragmented.world - TBA #712 http://quickblocks.io - TBA #711 http://lightstreams.network/ - Q2 2018 #710 https://wepower.network/ #709 https://dharma.io ICO date TBA #708 Pre-Sale add please from 30 th October to 3 rd November #705 Blockstack - 13 Nov - open-source, contract to come #685 Mobius - 8 Nov Open source/contract to come #684 FundRequest - 20 Nov #683 Add navigation to Active, Upcoming, Anticipated and Successful on Radar page #682 Resolve why some projects are displayed twice on Radar #681 Find transformation manager for Chaingear #674 Ocean protocol #660 Develop scripts for export Chaingear to Google Spreadsheet #637 Move data from Google Spreadsheet to Chaingear #636 Kill submit form on site #635 Monthly report \"Decrypted\" or \"Unfiated\" #634 Raiden Network - 18 Oct #614 Andaction #610 True Flip Markets #603 EAS #601 Publica - 25 Oct #580 Quantstamp - 12/11 #579 True Flip #529 Remove all ICO data for Contingency on website #511 Raiden Network Oct - ? #510 FansUnite #509 PROPS project - 20 Nov #508 Leverj - 7 Nov - Open source/contract to come #507 https://decent.ch/ #506 ICON 20 Oct #505 Livepeer #504 https://protos.tokenhub.com/ 25 Sept pre-ICO / 17 Oct ICO #503 https://biocoin.bio/ru 9 Nov #502 Climatecoin 1 Nov #501 Kyber Network ICO over #483 Verif-y - 25 Oct #481 Brickblock 31 Oct #476 ChainLink #475 Solidified #472 Moneypot 17 Sept #471 Zephyr 6 Oct #470 Correct ICO time for Paragon #466 WePower Network - ICO planned on February 1 st , 2018 #457 Render 5 Oct #456 Mercury Protocol - 25 Oct - open code, contract to come soon #455 Zen Protocol #454 plasma.io #453 dharma.io - 2018 #452 WanChain 3 Oct #451 ChainLink 19 Sept #450 ties.network 21 Sept #449 Sweetbridge #448 Aventus - closed #447 DOVU.io #446 Airswap - 10 Oct - code partially closed #445 BitJob ICO ongoing #444 Graft.network #443 Gimli 18 Sept #442 The cyber Fund website does not display any changes #440 Starbase 27 Sept #435 Resolve comments to submissions #434 Grid+ / 30 Oct #433 FaceCoin #432 AirToken 19 Sept #428 Flovio #427 Goldmint 17 Sept #426 Atlant.io ongoing #425 Streamr - 12 Oct - code partially closed #424 Doc.ai 28 Sept #417 ** https://databrokerdao.com/ 18 Sept pre-ICO #416 **swap.tech #415 Lendroid #414 Bloom #413 Etherparty 1 Oct #412 AutoNomic #411 Aidos Kunen #410 QRL #409 Metaverse #408 FunFair #407 Paragon 15 Sept #406 Zeppelin OS #405 Polkadot #404 https://neo.org/ #403 Aion #402 Filecoin #239 0x project #226 Migrate escrow and proof from Stats to escrow in Ballances #214 rexmls.com #213 Create google excel sheet with all tokens with their decimals #212 Move ICO Submit to ICO Stats #203 Concept first post-ICO report #201 propy.com #200 coindash.io #198 MyBit #197 district0x #196 \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043e\u0442\u0447\u0435\u0442\u0430 \u0437\u0430 \u0438\u044e\u043d\u044c #195 Update Post-ICO data #183 DAO Casino #176 EOS #167 Finish Aeternity Crowdsale #165 Tezos #164 AdChain #163 OmiseGo #162 Civic #158 Status #138 SONM #137 Bancor draft #136 Cofound.it #122 Starbase #117 Final fraft Starbase #108 BAT #103 Pre-draft BAT #102 Setup link checker #98 Add data label #97 https://cyber.fund/EMC #96 Bancor #94 Pre-draft Bancor #93 Mysterium #92 \u041d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e \u043a\u0430\u043a \u043e\u043d\u0438 \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u0432 \u0420\u0430\u0434\u0430\u0440\u0435 \u0432\u043d\u0438\u0437\u0443 \u0432\u043d\u0438\u0437\u0443 #89 Fix first price and date #74 add missing icons #68 crowdsale times #46 Fix incorrect Storj cap calculation #42 Quality report calculation #32 Move aliases.CurrencyName to a token.token_name #31 Links for Stellar #29 Clean up API and source data #28 Clear garbage systems #27 Fix incorrect Cap due to wrong supply #26 Chaingear Init #25 Sync users with dev #24 Autoupdated assets don't star system #23 How to add tokenless protocols? #22 List of systems to rename #21 Change address/path for generated API #20 Regeps for systems in Satoshi\u2022Fund #16 Fix currencies names #15 BitBTC icon #14 Add icons for BitAssets #13 Blockchain IDs for rated systems #12 Chaingear landing #11 Chaingear docs #10 Fix rating for \u272a\u272a systems #9 Reconsile Coinmarketcap names #8 Rename Objects and Arrays #7 Update rating #6 Merge dublicates #4 One chain - one folder #3 Switch to TOML #2 Merged pull requests: Setup landing page for Chaingear #991 ( SaveTheAles ) Initial release #980 ( litvintech ) Improved docs for chaingear #976 ( litvintech ) 954 basic tests for registry #968 ( hleb-albau ) NatSpec descriptions for .chaingear and .registry #967 ( SaveTheAles ) Chaingear and Registry tokenized linking #964 ( litvintech ) Add class diagramm of Chaingear.sol #950 ( SaveTheAles ) ENSF noties #949 ( SaveTheAles ) Update chaingear.json #929 ( ninjascant ) Add: Lightstreams #928 ( ninjascant ) Block #926 ( ninjascant ) Add: Marcelo #925 ( ninjascant ) Add: Kryll_io #924 ( ninjascant ) Update: KERBEROS #923 ( ninjascant ) Add: KERBEROS #922 ( ninjascant ) Add: Block #921 ( ninjascant ) Add: BharathTrade #920 ( ninjascant ) Add: OnLive #917 ( ninjascant ) Add: PlayBets #897 ( goloschaingear ) Add: Naviaddress #896 ( goloschaingear ) Update Dether.toml #892 ( mohdether ) Add: ADAMANT #890 ( ninjascant ) Add: Neunet #889 ( ninjascant ) Add: MyWish #888 ( ninjascant ) Add: MyTrackNet #887 ( ninjascant ) Add: Movement App #886 ( ninjascant ) Update: ATFS Project; convert to new data structure #885 ( ninjascant ) Add: MindSports #882 ( ninjascant ) Add: MediBloc #881 ( ninjascant ) Add: e-Chat ICO #880 ( ninjascant ) Add: Lockcoin #879 ( ninjascant ) Add: GraphGrail Ai #878 ( ninjascant ) Add: GOALBONANZA #877 ( ninjascant ) Add: DropDeck #876 ( ninjascant ) Fix headline #875 ( ninjascant ) Fix chaingear.json #874 ( ninjascant ) Add: VRTworld #873 ( goloschaingear ) Add CI and data validation #872 ( abitrolly ) Add: BlockNum #869 ( goloschaingear ) Update Adshares ICO end date #868 ( jzemlo ) Blockarray #867 ( ninjascant ) Update: BANKEX #866 ( goloschaingear ) Update: BANKEX #865 ( goloschaingear ) Add Karbo logo #860 ( ninjascant ) Add: TrakInvest #851 ( goloschaingear ) Update Cryptics.toml #850 ( halsoi ) Update Dether.toml #849 ( mohdether ) Add new data structure #847 ( ninjascant ) Add new structure template #846 ( ninjascant ) Add: new data structture template #845 ( ninjascant ) Add: TrakInvest #844 ( goloschaingear ) Add: MARK.SPACE #843 ( ninjascant ) Add: Legacy #842 ( ninjascant ) Add: Kr8os #841 ( ninjascant ) Add: JibrelNetwork #840 ( ninjascant ) Add: iungo #839 ( ninjascant ) Add: InsurePal #838 ( ninjascant ) Add: HOQU #837 ( ninjascant ) Add: GraftNetwork #836 ( ninjascant ) Add: DFS #835 ( ninjascant ) Add: DAXT #834 ( ninjascant ) Add: SOLA #833 ( ninjascant ) Add: DADI #832 ( ninjascant ) Add: CycloShieldCoin #831 ( ninjascant ) Add: Cryptopus #830 ( ninjascant ) Add: CryptoAlias #829 ( ninjascant ) Blockarray #828 ( ninjascant ) Blockarray #827 ( ninjascant ) Add: Chainium #825 ( ninjascant ) Add: Cardstack #824 ( ninjascant ) Add: Bottos #823 ( ninjascant ) Add: Blockmesh #822 ( ninjascant ) Add: Blocklancer #821 ( ninjascant ) Add: BankEx #820 ( ninjascant ) Add: ATFS Project #819 ( ninjascant ) Add: AdMine #818 ( ninjascant ) Add: Aditus #817 ( ninjascant ) Add: Karbo #816 ( goloschaingear ) Add: TradePlayz #815 ( goloschaingear ) Add: TokenGo #810 ( goloschaingear ) Add: DAXT #809 ( goloschaingear ) Add: RaidenNetwork #790 ( goloschaingear ) Add: DCX #785 ( goloschaingear ) Add: CLN #774 ( ninjascant ) Add: DCX #773 ( ninjascant ) Add: Volk #772 ( ninjascant ) Add: Polkadot #771 ( goloschaingear ) Change dates #770 ( Bilous4singree ) Add: xChange logo #769 ( ninjascant ) Add: xChange #768 ( ninjascant ) Add: xChange #767 ( goloschaingear ) BitClave TokenSale Update #766 ( mike-tih ) Add: TSSToken #765 ( goloschaingear ) Add: SophiaTX #763 ( goloschaingear ) Add: SMMarket #762 ( goloschaingear ) Add: ParetoNetwork #761 ( goloschaingear ) Update: chaingear.json #759 ( ninjascant ) Add: WePower #758 ( ninjascant ) Add Experty logo #757 ( ninjascant ) Update: chaingear.json #756 ( ninjascant ) Add: TokenBnk #755 ( ninjascant ) Update: chaingear.json #754 ( ninjascant ) Add: Game Machine #753 ( ninjascant ) Add: DaoPlayMarket 2.0 #752 ( ninjascant ) Add: Blockarray #751 ( ninjascant ) Update: chaingear.json #750 ( Protectorofcode ) Add: Expert #748 ( goloschaingear ) Add: Debitum #747 ( ninjascant ) Add: BitcoinGold #746 ( ninjascant ) Update: chaingear.json #744 ( ninjascant ) Update: chaingear.json #743 ( ninjascant ) Add: Neuromation #741 ( goloschaingear ) Add: Rentberry #739 ( ninjascant ) Add: RightMesh #738 ( ninjascant ) Add: SelfKey #737 ( ninjascant ) Add: StopTheFakes #736 ( ninjascant ) Add: VinChainToken #735 ( ninjascant ) Update: chaingear.json #728 ( Protectorofcode ) Update: chaingear.json #727 ( Protectorofcode ) Update: chaingear.json #726 ( Protectorofcode ) Update: chaingear.json #725 ( Protectorofcode ) Update: chaingear #724 ( Protectorofcode ) Update: chaingear.json #722 ( Protectorofcode ) Update Opporty.toml #721 ( Protectorofcode ) Add: wysToken #720 ( ninjascant ) Add: Bloom #719 ( goloschaingear ) Update: chaingear.json #716 ( ninjascant ) Add: NAU #715 ( ninjascant ) Update: chaingear.json #707 ( ninjascant ) Update: chaingear.json #706 ( ninjascant ) Add: Dogezer #704 ( ninjascant ) Add: BitClave #703 ( ninjascant ) Add: AppCoins #702 ( ninjascant ) Add: Blockstack #701 ( ninjascant ) Update: chaingear.json #700 ( ninjascant ) Update: chaingear #699 ( Protectorofcode ) Add: Confideal #695 ( ninjascant ) Update toml. #693 ( Bilous4singree ) Update: chaingear.son #692 ( ninjascant ) Rega #691 ( ninjascant ) Delete: Bitnation #690 ( Protectorofcode ) Update: Gizer #689 ( Protectorofcode ) Rega #688 ( ninjascant ) Rega #687 ( ninjascant ) Add: Leverj #686 ( ninjascant ) Add: FansUnite #680 ( ninjascant ) Add: IACCrowdsale #679 ( ninjascant ) Add: SimpleToken #678 ( ninjascant ) Add: MBCH #677 ( ninjascant ) Add: Universa #676 ( ninjascant ) Add: AntiBureaucracy #675 ( ninjascant ) Add: Lamden #673 ( ninjascant ) Add: Rega #672 ( ninjascant ) Update: chaingear.json #671 ( ninjascant ) Update: Polkadot #670 ( ninjascant ) Update: RaidenNetwork logo #669 ( ninjascant ) Update: chaingear.json #668 ( Protectorofcode ) Update: chaingear.json #667 ( Protectorofcode ) Update: chaingear.json #666 ( Protectorofcode ) Raiden2 #664 ( ninjascant ) Add: RaidenNetwork #662 ( ninjascant ) Add: E4ROW #661 ( Protectorofcode ) Add: chaingear.json #659 ( Protectorofcode ) Update Fidcom.toml #658 ( Bolikus ) Add: Sense #657 ( ninjascant ) Add: DalaToken #656 ( ninjascant ) Add: Prizm #655 ( Protectorofcode ) Add: Nimiq #654 ( Protectorofcode ) Add: Real #653 ( Protectorofcode ) Add: Propy #652 ( Protectorofcode ) Add: Qointum #651 ( Protectorofcode ) Update: chaingear.json #650 ( Protectorofcode ) Add: Equibit #649 ( Protectorofcode ) Add: Vega Fund #648 ( Protectorofcode ) Update: chaingear.json #647 ( Protectorofcode ) Add: Leviar Coin #646 ( Protectorofcode ) Add: TrueBit #645 ( Protectorofcode ) Add: Agrello #644 ( Protectorofcode ) Update: chaingear.json #643 ( Protectorofcode ) Update: chaingear.json #642 ( Protectorofcode ) Add: Dether #641 ( Protectorofcode ) Update: chaingear.json #639 ( Protectorofcode ) Update: chaingear.json #638 ( Protectorofcode ) Update: chaingear.json #633 ( Protectorofcode ) Update: ARToken #632 ( Protectorofcode ) Update: chaingear.json #631 ( Protectorofcode ) Add: ARToken #630 ( Protectorofcode ) Add: KredX #629 ( ninjascant ) Add: Gimli #628 ( Protectorofcode ) Add: Ties Network #627 ( Protectorofcode ) Update: chaingear.json #626 ( Protectorofcode ) Update: Wanchain #625 ( Protectorofcode ) Add: Chimaera #624 ( ninjascant ) Update: Brickblock #623 ( Protectorofcode ) Update: chaingear.json #622 ( Protectorofcode ) Add: Divi Project #621 ( Protectorofcode ) Add: Gizer #620 ( Protectorofcode ) Update: chaingear.json #619 ( Protectorofcode ) Update: chaingear.json #618 ( Protectorofcode ) Add: Enigma #617 ( Protectorofcode ) Update: chaingear.json #616 ( Protectorofcode ) Add: Lendroid #615 ( Protectorofcode ) Add: FortySevenBank #613 ( ninjascant ) Update: chaingear.json #612 ( Protectorofcode ) Add: Pangea #611 ( ninjascant ) Update: chaingear.json #608 ( Protectorofcode ) Add: HeroCoin #607 ( Protectorofcode ) Add: ARToken #606 ( Protectorofcode ) Update: chaingear.json #605 ( Protectorofcode ) Update: Mercury Protocol #604 ( Protectorofcode ) Add: Dream Team #602 ( Protectorofcode ) Update: DMarket #600 ( Protectorofcode ) Add: Gaze Coin #599 ( Protectorofcode ) Add: MatchPay #598 ( Protectorofcode ) Add: Ripio Credit Network #597 ( Protectorofcode ) Add: Jibrel Network #596 ( Protectorofcode ) Add: Stimus #595 ( Protectorofcode ) Update: chaingear.json #594 ( Protectorofcode ) Add: Dome Platform #593 ( Protectorofcode ) Add: Rhea #592 ( Protectorofcode ) Add: Genesis Vision #591 ( Protectorofcode ) Add: Opporty #590 ( Protectorofcode ) Update: chaingear.json #589 ( Protectorofcode ) Fix True Flip Lottery Markets #588 ( gamedevsam ) Update: chaingear.json #587 ( Protectorofcode ) Update: Jincor #586 ( Protectorofcode ) Update: chaingear.json #585 ( Protectorofcode ) Add: Crypto Improvement Fund #584 ( Protectorofcode ) Update: chaingear.json #583 ( Protectorofcode ) Add: Zenome #582 ( Protectorofcode ) Update Privatix.toml #581 ( devalexandr ) Update Crypto 20.toml #578 ( skolobov ) Update: chaingear.json #577 ( Protectorofcode ) Add: MingoCoin #576 ( Protectorofcode ) Add: BioPayCoin #575 ( Protectorofcode ) Add: Sparc #574 ( Protectorofcode ) Add: DarfChain #573 ( Protectorofcode ) Add: Harbor #572 ( Protectorofcode ) Add: Udiar #571 ( Protectorofcode ) Add: Quantstamp #570 ( Protectorofcode ) Add: Fidcom #569 ( Protectorofcode ) Update Papyrus.toml #568 ( ashwets ) Add: Databroker DAO #567 ( Protectorofcode ) Add: Dinnerful Network #566 ( Protectorofcode ) Add: TripAlly #565 ( Protectorofcode ) Add: Lescoin #564 ( Protectorofcode ) Add: Hirematch #563 ( Protectorofcode ) Update: chaingear.json #562 ( Protectorofcode ) Add: CoinDrive #561 ( Protectorofcode ) Add: Auctus #560 ( Protectorofcode ) Add: Snip #559 ( Protectorofcode ) Update: chaingear.json #558 ( Protectorofcode ) Add: Papyrus #557 ( Protectorofcode ) Add: CarTaxi #556 ( Protectorofcode ) Add: Crypto 20 #555 ( Protectorofcode ) Add: SRG-Play&Earn #554 ( Protectorofcode ) Update: chaingear.json #553 ( Protectorofcode ) Add: Hacken #552 ( Protectorofcode ) Add: DLS Academy #551 ( Protectorofcode ) Add: Snovio #550 ( Protectorofcode ) Add: Acebusters #549 ( Protectorofcode ) Add: Relest #548 ( Protectorofcode ) Add: Soma #547 ( Protectorofcode ) Add: Ethbet #546 ( Protectorofcode ) Add: Stash #545 ( Protectorofcode ) Add: Privatix #544 ( Protectorofcode ) Add: Etch #543 ( Protectorofcode ) Add: Galactikka #542 ( Protectorofcode ) Add: Icon #541 ( Protectorofcode ) Update: chaingear.json #540 ( Protectorofcode ) Update: chaingear.json #539 ( Protectorofcode ) Update: Aion #538 ( Protectorofcode ) Update: chaingear.json #537 ( Protectorofcode ) Add: Crypto.tickets #536 ( Protectorofcode ) Add: Polkadot #535 ( Protectorofcode ) Add: Wanchain #534 ( Protectorofcode ) Update: chaingear.json #533 ( Protectorofcode ) Update: True Flip Lottery #532 ( Protectorofcode ) Update: chaingear.json #531 ( Protectorofcode ) Add: True Flip Lottery #530 ( Protectorofcode ) Update: Brickblock #528 ( Protectorofcode ) Update: Etherparty #527 ( Protectorofcode ) Update: Chaingear.json #526 ( Protectorofcode ) Add: Zen Protocol #525 ( Protectorofcode ) Update: Kyber #524 ( Protectorofcode ) Add: Livepeer #523 ( Protectorofcode ) Add: Internxt #522 ( Protectorofcode ) Add: Evr #521 ( Protectorofcode ) Add: Cove Identity #520 ( Protectorofcode ) Add: Alloy #519 ( Protectorofcode ) Update: chaingear.json #518 ( Protectorofcode ) Update: Cointingency #517 ( Protectorofcode ) Update: chaingear.json #516 ( Protectorofcode ) Update: ChainLink #515 ( Protectorofcode ) Update: Cointingency #513 ( Protectorofcode ) Update: Contingency #512 ( Protectorofcode ) Update: chaingear.json #500 ( Protectorofcode ) Add: Atlant #499 ( Protectorofcode ) Update: Crystal Clear #498 ( Protectorofcode ) Update: chaingear.json #497 ( Protectorofcode ) Add: Verif-y #496 ( Protectorofcode ) Add: AirSwap #495 ( Protectorofcode ) Add: ChainLink #493 ( Protectorofcode ) Add: Grid+ #492 ( Protectorofcode ) Update: Metaverse #491 ( Protectorofcode ) Update: Aira #490 ( Protectorofcode ) Update: Omega One #489 ( Protectorofcode ) Update: Adchain #488 ( Protectorofcode ) Update: Loopring #487 ( Protectorofcode ) Add: Loopring #486 ( Protectorofcode ) Add: Mercury Protocol #485 ( Protectorofcode ) Update: chaingear.json #484 ( Protectorofcode ) Add: RockChain #482 ( Protectorofcode ) Add: Mito #480 ( Protectorofcode ) Add: Hagglin #479 ( Protectorofcode ) Add: Flip Coin #478 ( Protectorofcode ) Add: VoteCoin #477 ( Protectorofcode ) Update: chaingear.json #474 ( Protectorofcode ) Update: Electroneum #473 ( Protectorofcode ) Please change the end date to 2017 10 31. #469 ( asanezz7 ) Update: chaingear.json #468 ( Protectorofcode ) Update: Paragon ICO #467 ( Protectorofcode ) Update: chaingear.json #465 ( Protectorofcode ) Update: AntShares -> NEO #464 ( Protectorofcode ) Add: Quantum Resistant Ledger #463 ( Protectorofcode ) Update: BOScoin #462 ( Protectorofcode ) Add: Metaverse #461 ( Protectorofcode ) Update: Aidos Kuneen #460 ( Protectorofcode ) Add: Aidos Kuneen #459 ( Protectorofcode ) Add: Aion #458 ( Protectorofcode ) Add: OpenZeppelin #441 ( Protectorofcode ) Add: FaceCoin #439 ( Protectorofcode ) Update: chaingear.json #438 ( Protectorofcode ) Update: Starbase #437 ( Protectorofcode ) Update: chaingear.json #436 ( Protectorofcode ) Update: FunFair #431 ( Protectorofcode ) Update: chaingear.json #430 ( Protectorofcode ) Add: Funfair #429 ( Protectorofcode ) Update: chaingear.json #423 ( Protectorofcode ) Add: Cash Poker Pro #422 ( Protectorofcode ) Add: EventChain #421 ( Protectorofcode ) Add: LAToken #420 ( Protectorofcode ) Add: Rouge Project #419 ( Protectorofcode ) Add: Detector #418 ( Protectorofcode ) Add: Spheris #401 ( Protectorofcode ) Add: Graft #400 ( Protectorofcode ) Add: DomRaider #399 ( Protectorofcode ) Add: Crystal Clear #398 ( Protectorofcode ) Add: Matryx #397 ( Protectorofcode ) Delete: Kin #396 ( Protectorofcode ) Add CombiCoin #395 ( Protectorofcode ) Add: Paragon #394 ( Protectorofcode ) Update: chaingear.json #392 ( Protectorofcode ) Update: Kin #391 ( Protectorofcode ) Update: chaingear.json #390 ( Protectorofcode ) Update: Decentraland #389 ( Protectorofcode ) Update: Filecoin #388 ( Protectorofcode ) Update: chaingear.json #387 ( Protectorofcode ) Update: chaingear.json #386 ( Protectorofcode ) Add: Urbit #385 ( Protectorofcode ) Add: Streamr #384 ( Protectorofcode ) Add: Solar Bankers #383 ( Protectorofcode ) Add: Oracles Network #382 ( Protectorofcode ) Add: Omega One #381 ( Protectorofcode ) Add: Kyber #380 ( Protectorofcode ) Add: Etherparty #379 ( Protectorofcode ) Add: Doc.ai #378 ( Protectorofcode ) Add: Aira #377 ( Protectorofcode ) Update: Adshares #376 ( Protectorofcode ) Update: Indorse #375 ( Protectorofcode ) Update: Cindicator #374 ( Protectorofcode ) Pylon Network #373 ( klenergy ) Update: chaingear.json #372 ( Protectorofcode ) Add: AirToken #371 ( Protectorofcode ) Add: Modum #370 ( Protectorofcode ) Update: Viberate #369 ( Protectorofcode ) Update: chaingear.json #368 ( Protectorofcode ) Update: Mybit #367 ( Protectorofcode ) Update: Rex #366 ( Protectorofcode ) Update: chaingear.json #365 ( Protectorofcode ) Update: Filecoin #364 ( Protectorofcode ) Update: Dimcoin #363 ( Protectorofcode ) Update: Presearch #362 ( Protectorofcode ) Update: Jincor #361 ( Protectorofcode ) Update: Vibe #360 ( Protectorofcode ) Update: Stable #359 ( Protectorofcode ) Update: Everex #358 ( Protectorofcode ) Update: Enjin Coin #357 ( Protectorofcode ) Update: Tieron #356 ( Protectorofcode ) Update: chaingear.json #355 ( Protectorofcode ) Update: Indorse #354 ( Protectorofcode ) Update: chaingear.json #353 ( Protectorofcode ) Update: Gilgam #352 ( Protectorofcode ) Add: TenX #351 ( Protectorofcode ) Add: Stox #350 ( Protectorofcode ) Add: Pillar #349 ( Protectorofcode ) Add: Opus #348 ( Protectorofcode ) Add: OpenAnx #347 ( Protectorofcode ) Add: Make It Viral #346 ( Protectorofcode ) Update: IO Coin #345 ( Protectorofcode ) Add: Digital Developers Fund #344 ( Protectorofcode ) Add: Decentraland #343 ( Protectorofcode ) Add: Crypviser #342 ( Protectorofcode ) Add: Bitjob #341 ( Protectorofcode ) Add: Asch #340 ( Protectorofcode ) Add: adToken #339 ( Protectorofcode ) Add: AdEx #338 ( Protectorofcode ) Add: Disledger #337 ( Protectorofcode ) Update: chaingear.js #336 ( Protectorofcode ) Update: 0x #335 ( Protectorofcode ) Update: chaingear.json #334 ( Protectorofcode ) Add: Umbrella Coin #333 ( Protectorofcode ) Add: Trackr #332 ( Protectorofcode ) Update: Solar DAO #331 ( Protectorofcode ) Add: Solar DAO #330 ( Protectorofcode ) Add: Slot N Slot #329 ( Protectorofcode ) Add: Pylon Network #328 ( Protectorofcode ) Add: OpenZen #327 ( Protectorofcode ) Add: Neblio #326 ( Protectorofcode ) Add: Magos #325 ( Protectorofcode ) Add: Lordmancer #324 ( Protectorofcode ) Add: Lampix #323 ( Protectorofcode ) Add: Fijinto #322 ( Protectorofcode ) Add: Fluence #321 ( Protectorofcode ) Add: Electroneum #319 ( Protectorofcode ) Add: DMarket #318 ( Protectorofcode ) Add: Dimcoin #317 ( Protectorofcode ) Add: Crowdholding #316 ( Protectorofcode ) Add: Cindicator #315 ( Protectorofcode ) Add: aventus #314 ( Protectorofcode ) Add: Anryze #313 ( Protectorofcode ) Updating Indorse links & token sale details #310 ( avadhootkulkarni ) Update: chaingear.json #309 ( Protectorofcode ) Update: FileCoin #308 ( Protectorofcode ) Update: chaingear.json #307 ( Protectorofcode ) Update: Filecoin #306 ( Protectorofcode ) Update: chaingear.json #305 ( Protectorofcode ) Add: Spectiv #304 ( Protectorofcode ) Add: Presearch #303 ( Protectorofcode ) Add: Poet #302 ( Protectorofcode ) Add: Indorse #301 ( Protectorofcode ) Add: CoinDash #300 ( Protectorofcode ) Add: Adshares #299 ( Protectorofcode ) Add: 8 Curcuit Studios #298 ( Protectorofcode ) Update: chaingear.json #297 ( Protectorofcode ) Add: U.CASH #296 ( Protectorofcode ) Add: Silent Notary #295 ( Protectorofcode ) Add: MooseCoin #294 ( Protectorofcode ) Add: Kairos #293 ( Protectorofcode ) Add: Jincor #292 ( Protectorofcode ) Add: Gluon #291 ( Protectorofcode ) Add: DigiCoinMaker #290 ( Protectorofcode ) Add: Blocklancer #289 ( Protectorofcode ) Update: chaingear.json #288 ( Protectorofcode ) Update: Kickico #287 ( Protectorofcode ) Update: chaingear.json #286 ( Protectorofcode ) Update: Starbase #285 ( Protectorofcode ) Update: Starbase #284 ( Protectorofcode ) Update: 0x #283 ( Protectorofcode ) Add: Vibe Hub #282 ( Protectorofcode ) Add: Stable #281 ( Protectorofcode ) Add: Sift #280 ( Protectorofcode ) Add: Gamerbits #279 ( Protectorofcode ) Add: Coss #278 ( Protectorofcode ) Add: Centra #277 ( Protectorofcode ) Add: Bitsdigit #276 ( Protectorofcode ) We've updated some info. Please, update Kickico.toml #275 ( KICKICOPR ) Update: chaingear.json #274 ( Protectorofcode ) Update: Bitcoin Cash #273 ( Protectorofcode ) Update: chaingear.json #272 ( Protectorofcode ) Update: Bitcoin Cash #271 ( Protectorofcode ) Add: Bitcoin Cash #270 ( Protectorofcode ) Update: chaingear.json #269 ( Protectorofcode ) Update: Kuna #268 ( Protectorofcode ) Update: chaingear.json #267 ( Protectorofcode ) Cha #266 ( Protectorofcode ) Update: chaingear.json #264 ( Protectorofcode ) Update: Kuna #263 ( Protectorofcode ) Update: chaingear.json #262 ( Protectorofcode ) Update: Brickblock #261 ( Protectorofcode ) Add: Brickblock #260 ( Protectorofcode ) Add: Nimfamoney #259 ( Protectorofcode ) Add: Monkey Capital #258 ( Protectorofcode ) Add: Kuna #257 ( Protectorofcode ) Add: Enjin Coin #256 ( Protectorofcode ) Update: chaingear.js #255 ( Protectorofcode ) Update: chaingear.js #254 ( Protectorofcode ) Update: Kickico #253 ( Protectorofcode ) Update: Skycoin #251 ( Protectorofcode ) update logo skycoin #250 ( Protectorofcode ) Add: Prospectors #248 ( Protectorofcode ) Add: Nexxus Parthers #247 ( Protectorofcode ) Add: Embermine #246 ( Protectorofcode ) Add: BOScoin #245 ( Protectorofcode ) Add: Viberate #243 ( Protectorofcode ) Add: Kickico #242 ( Protectorofcode ) Update: Skycoin #238 ( LucianMincu ) Delete Scam: Kibo #237 ( Protectorofcode ) Add: FundYourSelf #236 ( Protectorofcode ) Add: Apptrade #235 ( Protectorofcode ) Add: Encryptotel #234 ( Protectorofcode ) Add: Veritaseum #233 ( Protectorofcode ) Add: ZrCoin #232 ( Protectorofcode ) Add: Chain of Points #231 ( Protectorofcode ) Add: Everex #230 ( Protectorofcode ) Add: Kibo Platform #229 ( Protectorofcode ) Update: Blockfreight #228 ( Protectorofcode ) Add: SlognCoin #227 ( Protectorofcode ) Add: Ziber #224 ( Protectorofcode ) Add: Tieron #223 ( Protectorofcode ) Add: Rex #222 ( Protectorofcode ) Add: 0x #221 ( Protectorofcode ) Add: Ethbits iTrade #220 ( Protectorofcode ) Add: Lunyr #219 ( Protectorofcode ) Add: CreativeChain #218 ( Protectorofcode ) Add: Suretly #217 ( Protectorofcode ) Update: Tezos #216 ( Protectorofcode ) Update: Mybit #215 ( Protectorofcode ) Update: TokenCard #211 ( Protectorofcode ) Update: Mysterium #210 ( Protectorofcode ) Update: Bat #209 ( Protectorofcode ) Update: Cofound #208 ( Protectorofcode ) Update: Bancor #207 ( Protectorofcode ) Update: Civic #206 ( Protectorofcode ) Update: Status #205 ( Protectorofcode ) Update: Mybit #202 ( Protectorofcode ) Add: District0x #199 ( Protectorofcode ) Add: Edgeless #194 ( Protectorofcode ) Add: LeoCoin #193 ( Protectorofcode ) Add: Ubiq #192 ( Protectorofcode ) Add: Numeraire #191 ( Protectorofcode ) Add: ZCoin #190 ( Protectorofcode ) Add: Nexus #189 ( Protectorofcode ) Add: MobileGo #188 ( Protectorofcode ) Add: MCAP #187 ( Protectorofcode ) Add: Komodo #186 ( Protectorofcode ) Update : Tezos #185 ( Protectorofcode ) Update: DaoCasino #184 ( Protectorofcode ) Update Time: Omise #182 ( Protectorofcode ) Update: Tezos #173 ( Protectorofcode ) Update: Sonm #170 ( Protectorofcode ) Add: Eos #168 ( Protectorofcode ) Update: Civic #166 ( Protectorofcode ) Update: Status #161 ( Protectorofcode ) Update fundrequest ico date #160 ( karelstriegel ) Update: Sonm #159 ( Protectorofcode ) Update: bancor #157 ( Protectorofcode ) Update: Bancor #156 ( Protectorofcode ) Update: Storjcoin X #155 ( Protectorofcode ) Add: OmiseGO #154 ( Protectorofcode ) Add: Populous #153 ( Protectorofcode ) Slight update to time +4h +4h #152 ( Razaberry ) Update: Bancor #151 ( Protectorofcode ) Add: Kin #150 ( Protectorofcode ) Add: Bitquence #149 ( Protectorofcode ) Add: Monaco #148 ( Protectorofcode ) Update: Cofound #147 ( Protectorofcode ) Add: Ecobit #146 ( Protectorofcode ) Update: Aeternity #145 ( Protectorofcode ) Add: MyBit #144 ( Protectorofcode ) Update: Bat #143 ( Protectorofcode ) Add: 21Million #142 ( Protectorofcode ) Updated BNT sale date as per twitter annoucement #141 ( Razaberry ) Update: Bat #140 ( Protectorofcode ) Add: Cofound #139 ( Protectorofcode ) Update: DaoCasino #132 ( Protectorofcode ) Update: DaoCasino #130 ( Protectorofcode ) Add: Starbase #129 ( Protectorofcode ) Add: Civic #128 ( Protectorofcode ) New Bancor ICO start date: June 15 #127 ( Razaberry ) Add: Sonm #126 ( Protectorofcode ) Update: Voise #125 ( Protectorofcode ) Update: Tezos #124 ( Protectorofcode ) Add: Beth #123 ( Protectorofcode ) Add: Polybius #121 ( Protectorofcode ) Update: Status #120 ( Protectorofcode ) Update: Bancor #119 ( Protectorofcode ) Add: DCORP #118 ( Protectorofcode ) Add: Starta #116 ( Protectorofcode ) Add: Gilgam.es #115 ( Protectorofcode ) Add: Ark #114 ( Protectorofcode ) Add: Lykke #113 ( Protectorofcode ) Add: Bat #112 ( Protectorofcode ) Update: Mysterium #111 ( Protectorofcode ) Update: Storj #110 ( Protectorofcode ) Add: DaoCasino #109 ( Protectorofcode ) Fix link to Ripple web site #107 ( abitrolly ) Add: Mysterium #106 ( Protectorofcode ) Update: Storj #105 ( Protectorofcode ) BTCD - fix some links #99 ( abitrolly ) add bitworldvip #87 ( bitworldvip ) Update: Btsr, MassNetwork, Synereo, vDice #86 ( Protectorofcode ) add : Veltor, Voise, TokenCard #85 ( Protectorofcode ) add: Veltor #84 ( Protectorofcode ) Add: Tezos #83 ( Protectorofcode ) Bancor #82 ( Protectorofcode ) Add GBG #79 ( xhipster ) project update to seven blockchain systems #78 ( agent725 ) adjusted end-date for fundraiser, and subtle changes #77 ( agent725 ) Upcoming Musicoin Genesis #76 ( musicoiner ) Internet of Coins TOML specification #75 ( agent725 ) Add FundRequest Dapp #73 ( karelstriegel ) logo change #72 ( jamesgroton ) Update vDice.toml #70 ( jamesgroton ) Inchain`s ICO dates changed #69 ( trummax ) Big mistakes about the starting date. #66 ( zikilemini ) Added Beyond The Void #64 ( zikilemini ) Total Supply Update #63 ( chris4210 ) Update AntShares.toml from the Antshares Team #60 ( PeterLinX ) Update AntShares.toml from Antshares team #59 ( DavidthePangwaer ) Add files via upload #58 ( JasonMcz ) creating HONG profile #56 ( hongcoiner ) Add AntShares #55 ( PeterLinX ) Okcash Integration #54 ( oktoshi ) Add EnergyCoin #53 ( coin1hub ) Adding BTSR and ICOO assets #52 ( OpenLedgerDev ) Gh pages #51 ( ElephantDevelopment ) We are using Bitbucket instead of Github now. #50 ( justindonnaruma ) Add Rise.Vision Foundation #49 ( justindonnaruma ) Add MINEUM #48 ( antho281 ) Dash Forum migrated to new link #47 ( thelazier ) fix link name, hashtag #45 ( thelazier ) Fix some consensus descriptions #43 ( xhipster ) Add a Gitter chat badge to README.md #41 ( gitter-badger ) Update: Consensus data #40 ( xhipster ) Update: Consensus data for 6 systems #39 ( xhipster ) Update: Consensus data for 10 systems #38 ( xhipster ) Update: Consensus data for 10 systems #37 ( xhipster ) Update: All consensus data #36 ( xhipster ) Update Dash Whitepaper #34 ( thelazier ) Update Dash.toml #33 ( thelazier ) Update github link and remove redundancies #30 ( johansten ) Update NuBits.toml #19 ( CoinGame ) Update NuShares.toml #18 ( CoinGame ) Link updates #17 ( phideas ) aliases #1 ( ghost ) * This Change Log was automatically generated by github_changelog_generator","title":"v0.1.0-alpha (2018-07-11)"},{"location":"\u0441haingear/Contributing/","text":"Contributing list \u00b6 @litvintech - contracts developer/maintainer @pechalka - web3 app developer/maintainer","title":"Contributing"},{"location":"\u0441haingear/Contributing/#contributing-list","text":"@litvintech - contracts developer/maintainer @pechalka - web3 app developer/maintainer","title":"Contributing list"},{"location":"\u0441haingear/contracts/","text":"Contracts Overview \u00b6 Design rationale \u00b6 Main design principle goes from ERC721 NFT tokenization of Databases (in Chaingear/Database of databases) and Entries (in custom user's Database). In reason of Databases tokenization in Chaingear which allows token holder acts as administrator of their Databases, Chaingear acts to Database as owner, which sets token holder as administrator on creation phase, changes administrator when holder transfers token to another user, and transfers ownership when user unregister Database in Chaingear, giving them full control to contract. Database deep-linked to Chaingear database token. In other words, token ownership means control of Database. Also, Chaingear supports multiple Database Builders (fabrics of databases of given type), and allows Chaingear owners provide different kind and versioning of Databases. In reason of providing user functionality to describe their custom database data structures/schema and CRUD operations, the user creates their custom smart-contract, which implements the ISchema interface. This contract acts as inner storage, defines schema, and Database acts them on token operations (creating and deleting). A user may deploy erroneous or vulnerable Schema contract, but this should not crash Chaingear-Database NFT-token logic and Database inner entry NFT-logic too. Even if this happens Database crashing should not affect Chaingear/metadatabase contract. We proceed from the premise that the creator of the database (administrator) is positive and it does not make sense for them to break his database by initializing it with an incorrect contract. This brings us to tokenized ( C RU D ) operations (and inner in Schema) in Database and public ( C R UD ) plus tokenized ( CR U D ) Storage operation. Chaingear inheritance \u00b6 Database inheritance \u00b6 /chaingear \u00b6 Chaingear allows any user to create his own database. Building fee is collecting by new database creation. All builded databases are tokenized with ERC721 NFT token standard and saved in Chaingear metadatabase with db metainformation. Creator of database may transfer tokenized ownership of database and destroy database with token burning. Tokenized databases Entries may collect funds by users and Database's owner may claim them. Chaingear supports multiple benefitiaries witch have access to collected fees from databases creation. Also allows for owner add multiple database builders contracts based their on versioning or/and functionality. /builders \u00b6 DatabaseBuilder contains the code of specified version of Database. This code used by Chaingear for Database creation and deploy process. DatabaseBuilder should be added with specified version and description to Chaingear database's builders inner list. Chaingear contract should be added as allowed caller to DatabaseBuilder with reason to allow creation calls only by Chaingear contact. /common \u00b6 Safe allows creator contract transfer ETHs to them and claim from, accounting logic holded by owner contract. IChaingear IDatabase IDatabaseBuilder ISchema /databases \u00b6 Database contract witch tokenize entries as NFT tokens via ERC721 standard. Users can create tokenized empty entries according to entry access policy setted in Database. Database provides tokenized ( C RU D ) actions, after creation of token and empty database object, user should initialize them ( CR U D ) in Storage. Also users can fund entries with ETHs which send to DatabaseSafe with which owner of entry token can claim funds. DatabaseAccessControl holds logic of controlling database and accessing to entries creation. Policy options to entries creation are OnlyAdministrator, Whitelist, AllUsers. Chaingear acts as owner of Database and creator of database acts of administrator with separated policies to Database functions. /schemas \u00b6 Schema partially code-generated contract where database creator setup their custom entry structure and setters/getters. Schema then initializes in Database by their creator (as admin) and completes Database setup process. Provides public ( C RU D ) actions for users and inner ( C RU D ) tokenized actions for Database. Database goes as owner of contract (and acts as proxy) with entries creating, token-based transferring and deleting. EntryInterface interface (should be implemented in user EntryCore contract) \u00b6 interface ISchema { function createEntry () external ; function deleteEntry ( uint256 ) external ; } Example Schema \u00b6 pragma solidity 0.4.25 ; import \"../common/ISchema.sol\" ; import \"../common/IDatabase.sol\" ; import \"openzeppelin-solidity/contracts/ownership/Ownable.sol\" ; import \"openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\" ; contract Schema is ISchema , Ownable , SupportsInterfaceWithLookup { bytes4 constant internal INTERFACE_SCHEMA_ID = 0x153366ed ; struct Entry { string name ; string manifest ; string extension ; string content ; string logo ; } Entry [] public entries ; IDatabase internal database ; constructor () public { _registerInterface ( INTERFACE_SCHEMA_ID ); database = IDatabase ( owner ); } function () external {} function createEntry () external onlyOwner { Entry memory m = ( Entry ( { name : \"\" , manifest : \"\" , extension : \"\" , content : \"\" , logo : \"\" })); entries . push ( m ); } function readEntry ( uint256 _entryID ) external view returns ( string , string , string , string , string ) { uint256 entryIndex = database . getIndexByID ( _entryID ); return ( entries [ entryIndex ]. name , entries [ entryIndex ]. manifest , entries [ entryIndex ]. extension , entries [ entryIndex ]. content , entries [ entryIndex ]. logo ); } function updateEntry ( uint256 _entryID , string _name , string _manifest , string _extension , string _content , string _logo ) external { database . auth ( _entryID , msg . sender ); uint256 entryIndex = database . getIndexByID ( _entryID ); Entry memory m = ( Entry ( { name : _name , manifest : _manifest , extension : _extension , content : _content , logo : _logo })); entries [ entryIndex ] = m ; } function deleteEntry ( uint256 _entryIndex ) external onlyOwner { uint256 lastEntryIndex = entries . length - 1 ; Entry memory lastEntry = entries [ lastEntryIndex ]; entries [ _entryIndex ] = lastEntry ; delete entries [ lastEntryIndex ]; entries . length -- ; } }","title":"Contracts"},{"location":"\u0441haingear/contracts/#contracts-overview","text":"","title":"Contracts Overview"},{"location":"\u0441haingear/contracts/#design-rationale","text":"Main design principle goes from ERC721 NFT tokenization of Databases (in Chaingear/Database of databases) and Entries (in custom user's Database). In reason of Databases tokenization in Chaingear which allows token holder acts as administrator of their Databases, Chaingear acts to Database as owner, which sets token holder as administrator on creation phase, changes administrator when holder transfers token to another user, and transfers ownership when user unregister Database in Chaingear, giving them full control to contract. Database deep-linked to Chaingear database token. In other words, token ownership means control of Database. Also, Chaingear supports multiple Database Builders (fabrics of databases of given type), and allows Chaingear owners provide different kind and versioning of Databases. In reason of providing user functionality to describe their custom database data structures/schema and CRUD operations, the user creates their custom smart-contract, which implements the ISchema interface. This contract acts as inner storage, defines schema, and Database acts them on token operations (creating and deleting). A user may deploy erroneous or vulnerable Schema contract, but this should not crash Chaingear-Database NFT-token logic and Database inner entry NFT-logic too. Even if this happens Database crashing should not affect Chaingear/metadatabase contract. We proceed from the premise that the creator of the database (administrator) is positive and it does not make sense for them to break his database by initializing it with an incorrect contract. This brings us to tokenized ( C RU D ) operations (and inner in Schema) in Database and public ( C R UD ) plus tokenized ( CR U D ) Storage operation.","title":"Design rationale"},{"location":"\u0441haingear/contracts/#chaingear-inheritance","text":"","title":"Chaingear inheritance"},{"location":"\u0441haingear/contracts/#database-inheritance","text":"","title":"Database inheritance"},{"location":"\u0441haingear/contracts/#chaingear","text":"Chaingear allows any user to create his own database. Building fee is collecting by new database creation. All builded databases are tokenized with ERC721 NFT token standard and saved in Chaingear metadatabase with db metainformation. Creator of database may transfer tokenized ownership of database and destroy database with token burning. Tokenized databases Entries may collect funds by users and Database's owner may claim them. Chaingear supports multiple benefitiaries witch have access to collected fees from databases creation. Also allows for owner add multiple database builders contracts based their on versioning or/and functionality.","title":"/chaingear"},{"location":"\u0441haingear/contracts/#builders","text":"DatabaseBuilder contains the code of specified version of Database. This code used by Chaingear for Database creation and deploy process. DatabaseBuilder should be added with specified version and description to Chaingear database's builders inner list. Chaingear contract should be added as allowed caller to DatabaseBuilder with reason to allow creation calls only by Chaingear contact.","title":"/builders"},{"location":"\u0441haingear/contracts/#common","text":"Safe allows creator contract transfer ETHs to them and claim from, accounting logic holded by owner contract. IChaingear IDatabase IDatabaseBuilder ISchema","title":"/common"},{"location":"\u0441haingear/contracts/#databases","text":"Database contract witch tokenize entries as NFT tokens via ERC721 standard. Users can create tokenized empty entries according to entry access policy setted in Database. Database provides tokenized ( C RU D ) actions, after creation of token and empty database object, user should initialize them ( CR U D ) in Storage. Also users can fund entries with ETHs which send to DatabaseSafe with which owner of entry token can claim funds. DatabaseAccessControl holds logic of controlling database and accessing to entries creation. Policy options to entries creation are OnlyAdministrator, Whitelist, AllUsers. Chaingear acts as owner of Database and creator of database acts of administrator with separated policies to Database functions.","title":"/databases"},{"location":"\u0441haingear/contracts/#schemas","text":"Schema partially code-generated contract where database creator setup their custom entry structure and setters/getters. Schema then initializes in Database by their creator (as admin) and completes Database setup process. Provides public ( C RU D ) actions for users and inner ( C RU D ) tokenized actions for Database. Database goes as owner of contract (and acts as proxy) with entries creating, token-based transferring and deleting.","title":"/schemas"},{"location":"\u0441haingear/contracts/#entryinterface-interface-should-be-implemented-in-user-entrycore-contract","text":"interface ISchema { function createEntry () external ; function deleteEntry ( uint256 ) external ; }","title":"EntryInterface interface (should be implemented in user EntryCore contract)"},{"location":"\u0441haingear/contracts/#example-schema","text":"pragma solidity 0.4.25 ; import \"../common/ISchema.sol\" ; import \"../common/IDatabase.sol\" ; import \"openzeppelin-solidity/contracts/ownership/Ownable.sol\" ; import \"openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\" ; contract Schema is ISchema , Ownable , SupportsInterfaceWithLookup { bytes4 constant internal INTERFACE_SCHEMA_ID = 0x153366ed ; struct Entry { string name ; string manifest ; string extension ; string content ; string logo ; } Entry [] public entries ; IDatabase internal database ; constructor () public { _registerInterface ( INTERFACE_SCHEMA_ID ); database = IDatabase ( owner ); } function () external {} function createEntry () external onlyOwner { Entry memory m = ( Entry ( { name : \"\" , manifest : \"\" , extension : \"\" , content : \"\" , logo : \"\" })); entries . push ( m ); } function readEntry ( uint256 _entryID ) external view returns ( string , string , string , string , string ) { uint256 entryIndex = database . getIndexByID ( _entryID ); return ( entries [ entryIndex ]. name , entries [ entryIndex ]. manifest , entries [ entryIndex ]. extension , entries [ entryIndex ]. content , entries [ entryIndex ]. logo ); } function updateEntry ( uint256 _entryID , string _name , string _manifest , string _extension , string _content , string _logo ) external { database . auth ( _entryID , msg . sender ); uint256 entryIndex = database . getIndexByID ( _entryID ); Entry memory m = ( Entry ( { name : _name , manifest : _manifest , extension : _extension , content : _content , logo : _logo })); entries [ entryIndex ] = m ; } function deleteEntry ( uint256 _entryIndex ) external onlyOwner { uint256 lastEntryIndex = entries . length - 1 ; Entry memory lastEntry = entries [ lastEntryIndex ]; entries [ _entryIndex ] = lastEntry ; delete entries [ lastEntryIndex ]; entries . length -- ; } }","title":"Example Schema"},{"location":"\u0441haingear/overview/","text":"Overview \u00b6 This project allows you to create your own Database of general purpose entries on Ethereum blockchain. Entry type is defined during creation, so you can put into entry any custom logic you want (validation, entry-level permission control). Entries are tokenized as NFT. Your creating your database in Chaingear - metadatabase, which are one point of access to all databases. Databases on chaingear level are tokenized as NFT. Chaingear is most expensive database, so you should pay for your database and entry creation. Features \u00b6 Chaingear \u00b6 Metadatabase with Databases entries, where each entry are ERC721 token Fee-based Database creation Creating Databases with different functionality Token-based ownership/administration for Database Funding in ETH for Database Custom database \u00b6 Custom data structure for Database (Schema) Each Entry is ERC721 token Fee-based Entry creation Token-based ownership Entry management Entry creation policies (Administrator, Whitelist, AllUsers) Chaingear UI (browser/stand-alone web3 DApp) \u00b6 Web3/Metamask/Truffle/IPFS based Full Chaingear control interface Full custom Database control interface Schema smart-contract code generation and deploying on client Databases ABI and metainformation savings in IPFS","title":"Overview"},{"location":"\u0441haingear/overview/#overview","text":"This project allows you to create your own Database of general purpose entries on Ethereum blockchain. Entry type is defined during creation, so you can put into entry any custom logic you want (validation, entry-level permission control). Entries are tokenized as NFT. Your creating your database in Chaingear - metadatabase, which are one point of access to all databases. Databases on chaingear level are tokenized as NFT. Chaingear is most expensive database, so you should pay for your database and entry creation.","title":"Overview"},{"location":"\u0441haingear/overview/#features","text":"","title":"Features"},{"location":"\u0441haingear/overview/#chaingear","text":"Metadatabase with Databases entries, where each entry are ERC721 token Fee-based Database creation Creating Databases with different functionality Token-based ownership/administration for Database Funding in ETH for Database","title":"Chaingear"},{"location":"\u0441haingear/overview/#custom-database","text":"Custom data structure for Database (Schema) Each Entry is ERC721 token Fee-based Entry creation Token-based ownership Entry management Entry creation policies (Administrator, Whitelist, AllUsers)","title":"Custom database"},{"location":"\u0441haingear/overview/#chaingear-ui-browserstand-alone-web3-dapp","text":"Web3/Metamask/Truffle/IPFS based Full Chaingear control interface Full custom Database control interface Schema smart-contract code generation and deploying on client Databases ABI and metainformation savings in IPFS","title":"Chaingear UI (browser/stand-alone web3 DApp)"},{"location":"\u0441haingear/pipelines/","text":"General Chaingear/Database pipeline \u00b6 Database CRUD/tokenized Entry/Funds pipeline \u00b6 Chaingear tokenized Database pipeline \u00b6","title":"Pipelines"},{"location":"\u0441haingear/pipelines/#general-chaingeardatabase-pipeline","text":"","title":"General Chaingear/Database pipeline"},{"location":"\u0441haingear/pipelines/#database-crudtokenized-entryfunds-pipeline","text":"","title":"Database CRUD/tokenized Entry/Funds pipeline"},{"location":"\u0441haingear/pipelines/#chaingear-tokenized-database-pipeline","text":"","title":"Chaingear tokenized Database pipeline"},{"location":"\u0441haingear/help/development/","text":"Configuring, development and deploying \u00b6 Install \u00b6 npm i Linting: \u00b6 solium -d contracts Testing: \u00b6 ganache-cli -p 8545 truffle test Deploying (for example kovan): \u00b6 truffle migrate --network =","title":"Development"},{"location":"\u0441haingear/help/development/#configuring-development-and-deploying","text":"","title":"Configuring, development and deploying"},{"location":"\u0441haingear/help/development/#install","text":"npm i","title":"Install"},{"location":"\u0441haingear/help/development/#linting","text":"solium -d contracts","title":"Linting:"},{"location":"\u0441haingear/help/development/#testing","text":"ganache-cli -p 8545 truffle test","title":"Testing:"},{"location":"\u0441haingear/help/development/#deploying-for-example-kovan","text":"truffle migrate --network =","title":"Deploying (for example kovan):"}]}